{"version":3,"file":"niljs.esm.js","sources":["../src/utils/hex.ts","../src/encoding/fromHex.ts","../src/encoding/toHex.ts","../src/encoding/fromBytes.ts","../src/encoding/poseidon.ts","../src/encoding/ssz.ts","../src/utils/address.ts","../src/utils/refiners.ts","../src/encoding/deployPart.ts","../src/encoding/externalMessage.ts","../src/errors/BaseError.ts","../src/errors/block.ts","../src/clients/constants.ts","../src/utils/block.ts","../src/utils/assert.ts","../src/clients/BaseClient.ts","../src/clients/PublicClient.ts","../src/signers/mnemonic.ts","../src/signers/publicKey.ts","../src/signers/LocalECDSAKeySigner.ts","../src/signers/privateKey.ts","../src/signers/MetmaskSigner.ts","../src/utils/receipt.ts","../src/utils/eth.ts","../src/rpc/rpcClient.ts","../src/transport/HttpTransport.ts","../src/transport/MetaMaskTransport.ts","../src/transport/types/ITransport.ts","../src/errors/shardId.ts","../src/contracts/Faucet/Faucet.ts","../src/contracts/WalletV1/Wallet-bin.ts","../src/contracts/WalletV1/WalletV1.ts","../src/contracts/Minter/Minter.ts"],"sourcesContent":["import type { Hex } from \"../index.js\";\n\nconst HEX_REGEX = /^[0-9a-fA-F]+$/;\n\n/**\n * Checks if the value is a hex string. If the value is a hex string, returns true.\n * Otherwise, returns false.\n * @param value The value to check.\n */\nconst isHexString = (value: unknown): value is Hex => {\n  return (\n    typeof value === \"string\" &&\n    value.startsWith(\"0x\") &&\n    HEX_REGEX.test(removeHexPrefix(value) as string)\n  );\n};\n\n/**\n * Remove the hex prefix from the hex string.\n * @param hex The string whose hex prefix should be removed.\n * @returns The base-16 string.\n */\nconst removeHexPrefix = (str: Hex | string): string => {\n  return str.startsWith(\"0x\") ? str.slice(2) : str;\n};\n\n/**\n * Add the hex prefix to the hex string.\n * @param hex The string to which the prefix should be added.\n * @returns The string with the prefix.\n */\nconst addHexPrefix = (str: Hex | string): Hex => {\n  return `0x${removeHexPrefix(str)}`;\n};\n\nexport { isHexString, removeHexPrefix, addHexPrefix };\n","import type { Hex } from \"../index.js\";\nimport { addHexPrefix, removeHexPrefix } from \"../utils/hex.js\";\n\n/**\n * Convert a hex string to a number.\n * @param hex - The hex string to convert.\n * @returns The number representation of the input.\n */\nconst hexToNumber = (hex: Hex): number => {\n  return Number.parseInt(removeHexPrefix(hex), 16);\n};\n\n/**\n * Convert a hex string to a bigint.\n * @param hex - The hex string to convert.\n * @returns The bigint representation of the input.\n */\nconst hexToBigInt = (hex: Hex): bigint => {\n  return BigInt(addHexPrefix(hex));\n};\n\nexport { hexToNumber, hexToBigInt };\n","import { bytesToHex, numberToHexUnpadded } from \"@noble/curves/abstract/utils\";\n\n/**\n * Convert a string to a hex string.\n * @param str - The input string to convert.\n * @returns The hex string representation of the input.\n */\nconst stringToHex = (str: string): string => {\n  let hex = \"\";\n\n  for (let i = 0; i < str.length; i++) {\n    hex += str.charCodeAt(i).toString(16);\n  }\n\n  return hex;\n};\n\n/**\n * Convert a string, number, bigint, boolean, or ByteArrayType to a hex string.\n * @param str - The input string to convert.\n * @returns The hex string representation of the input.\n */\nconst toHex = <T extends string | number | bigint | boolean | Uint8Array>(\n  value: T,\n): `0x${string}` => {\n  if (typeof value === \"string\") {\n    return `0x${stringToHex(value)}`;\n  }\n\n  if (typeof value === \"number\") {\n    return `0x${numberToHexUnpadded(value)}`;\n  }\n\n  if (typeof value === \"bigint\") {\n    return `0x${numberToHexUnpadded(value)}`;\n  }\n\n  if (typeof value === \"boolean\") {\n    return `0x${(value ? 1 : 0).toString(16)}`;\n  }\n\n  return `0x${bytesToHex(value)}`;\n};\n\nexport { toHex };\n","/**\n * Converts bytes to a string.\n * @param bytes - The bytes to convert.\n * @returns The string representation of the input.\n */\nconst bytesToString = (bytes: Uint8Array): string => {\n  const decoder = new TextDecoder(\"utf8\");\n  const str = decoder.decode(bytes);\n\n  return str;\n};\n\nexport { bytesToString };\n","import { poseidon } from \"@iden3/js-crypto\";\n\n/**\n * Creates the Poseidon hash of the given bytes.\n * @param byes - The bytes to hash.\n * @returns The Poseidon hash.\n */\nconst poseidonHash = (bytes: Uint8Array) => {\n  return poseidon.hashBytesX(bytes, 16);\n};\n\nexport { poseidonHash };\n","import {\n  hashObjectToUint8Array,\n  setHasher,\n  uint8ArrayToHashObject,\n} from \"@chainsafe/persistent-merkle-tree\";\nimport {\n  BooleanType,\n  ByteListType,\n  ByteVectorType,\n  ContainerType,\n  UintBigintType,\n  UintNumberType,\n} from \"@chainsafe/ssz\";\nimport { concatBytes } from \"@noble/curves/abstract/utils\";\nimport { poseidonHash } from \"./poseidon.js\";\n\nsetHasher({\n  digest64(a, b) {\n    const hash = poseidonHash(concatBytes(a, b));\n    const arr = new Uint8Array(32);\n    for (let i = 0; i < 32; i++) {\n      // Shift the BigInt to the right by 8 * i bits, then take the 8 least significant bits\n      arr[31 - i] = Number((hash >> BigInt(i * 8)) & BigInt(0xff));\n    }\n    return arr;\n  },\n  digest64HashObjects(a, b) {\n    const hash = poseidonHash(\n      concatBytes(hashObjectToUint8Array(a), hashObjectToUint8Array(b)),\n    );\n    const arr = new Uint8Array(32);\n    for (let i = 0; i < 32; i++) {\n      // Shift the BigInt to the right by 8 * i bits, then take the 8 least significant bits\n      arr[31 - i] = Number((hash >> BigInt(i * 8)) & BigInt(0xff));\n    }\n    return uint8ArrayToHashObject(arr);\n  },\n});\n\n/**\n * The basic types used in the library.\n *\n */\nconst basicTypes = {\n  Uint8: new UintNumberType(1),\n  Uint32: new UintNumberType(4),\n  Uint64: new UintNumberType(8),\n  UintBn256: new UintBigintType(32),\n  Bool: new BooleanType(),\n};\n\n/**\n * The const representing a byte vector with 20 elements.\n *\n */\nconst Bytes20 = new ByteVectorType(20);\n\n/**\n * The SSZ schema for a message object.\n */\nconst SszMessageSchema = new ContainerType({\n  deploy: basicTypes.Bool,\n  to: Bytes20,\n  chainId: basicTypes.Uint64,\n  seqno: basicTypes.Uint64,\n  data: new ByteListType(24576),\n});\n\n/**\n * SSZ schema for a signed message object. Includes auth data in addition to all other message fields.\n */\nconst SszSignedMessageSchema = new ContainerType({\n  ...SszMessageSchema.fields,\n  authData: new ByteListType(256),\n});\n\nexport { SszMessageSchema, SszSignedMessageSchema };\n","import { type Hex, numberToBytesBE } from \"@noble/curves/abstract/utils\";\nimport { hexToBytes } from \"viem\";\nimport { poseidonHash } from \"../encoding/poseidon.js\";\nimport type { IAddress } from \"../signers/types/IAddress.js\";\n\n/**\n * The regular expression for matching addresses.\n *\n */\nconst ADDRESS_REGEX = /^0x[0-9a-fA-F]{40}$/;\n\n/**\n * Checks if the value is an address. If the value is an address, returns true.\n * Otherwise, returns false.\n * @param value The value to check.\n */\nconst isAddress = (value: Hex): value is IAddress => {\n  return typeof value === \"string\" && ADDRESS_REGEX.test(value);\n};\n\n/**\n * Returns the ID of the shard containing the provided address.\n * @param address The address.\n */\nconst getShardIdFromAddress = (address: Hex): number => {\n  if (typeof address === \"string\") {\n    return Number.parseInt(address.slice(2, 6), 16);\n  }\n\n  return (address[0] << 8) | address[1];\n};\n\n/**\n * Calculates an address.\n *\n * @param {number} shardId The ID of the shard containing the address.\n * @param {Uint8Array} code The bytecode to be deployed at the address.\n * @param {Uint8Array} salt Arbitrary data for address generation.\n * @returns {Uint8Array} The address.\n */\nconst calculateAddress = (\n  shardId: number,\n  code: Uint8Array,\n  salt: Uint8Array,\n): Uint8Array => {\n  if (!Number.isInteger(shardId)) {\n    throw new Error(\"Shard ID must be an integer\");\n  }\n  if (salt.length !== 32) {\n    throw new Error(\"Salt must be 32 bytes\");\n  }\n  if (code.length === 0) {\n    throw new Error(\"Code must not be empty\");\n  }\n  if (shardId < 0 || shardId > 0xffff) {\n    throw new Error(\"Invalid shard ID\");\n  }\n  const bytes = new Uint8Array(code.length + 32);\n  bytes.set(code);\n  bytes.set(salt, code.length);\n  const hash = poseidonHash(bytes);\n  const shardPart = numberToBytesBE(shardId, 2);\n  const hashPart = numberToBytesBE(hash, 32);\n\n  return new Uint8Array([...shardPart, ...hashPart.slice(14)]);\n};\n\n/**\n * Refines the address.\n *\n * @param {(Uint8Array | `0x`)} address The address to refine.\n * @returns {Uint8Array} The refined address.\n */\nconst refineAddress = (address: Uint8Array | `0x${string}`): Uint8Array => {\n  if (typeof address === \"string\") {\n    const bytes = hexToBytes(address);\n    if (bytes.length !== 20) {\n      throw new Error(\"Invalid address length\");\n    }\n    return bytes;\n  }\n  if (address.length !== 20) {\n    throw new Error(\"Invalid address length\");\n  }\n  return address;\n};\n\nexport { isAddress, getShardIdFromAddress, calculateAddress, refineAddress };\n","import invariant from \"tiny-invariant\";\nimport { hexToBytes } from \"viem\";\nimport { addHexPrefix } from \"./hex.js\";\n\nconst refineSalt = (salt: Uint8Array | bigint): Uint8Array => {\n  if (typeof salt === \"bigint\") {\n    return hexToBytes(addHexPrefix(salt.toString(16).padStart(64, \"0\"))).slice(\n      0,\n      32,\n    );\n  }\n\n  invariant(salt.length === 32, \"Salt must be 32 bytes\");\n\n  return salt;\n};\n\nconst refineCompressedPublicKey = (\n  pubkey: Uint8Array | `0x${string}`,\n): Uint8Array => {\n  const res = typeof pubkey === \"string\" ? hexToBytes(pubkey) : pubkey;\n  invariant(pubkey.length === 33, \"Invalid pubkey length\");\n\n  return res;\n};\n\nexport { refineSalt, refineCompressedPublicKey };\n","import { bytesToHex, encodeDeployData, hexToBytes } from \"viem\";\nimport type { IDeployData } from \"../types/IDeployData.js\";\nimport { calculateAddress } from \"../utils/address.js\";\nimport { refineSalt } from \"../utils/refiners.js\";\n\n/**\n * Refines the provided salt and generates the full bytecode for deployment. Returns the bytecode and the deployment address.\n *\n * @param {IDeployData} data The deployment data.\n * @returns {{ data: Uint8Array; address: Uint8Array }} The object containing the final bytecode and the deployment address.\n */\nexport const prepareDeployPart = (\n  data: IDeployData,\n): { data: Uint8Array; address: Uint8Array } => {\n  const byteSalt = refineSalt(data.salt);\n  let constructorData: Uint8Array;\n  if (data.abi) {\n    constructorData = hexToBytes(\n      encodeDeployData({\n        abi: data.abi,\n        bytecode:\n          typeof data.bytecode === \"string\"\n            ? data.bytecode\n            : bytesToHex(data.bytecode),\n        args: data.args || [],\n      }),\n    );\n  } else {\n    constructorData =\n      typeof data.bytecode === \"string\"\n        ? hexToBytes(data.bytecode)\n        : data.bytecode;\n  }\n  const bytecode = new Uint8Array([...constructorData, ...byteSalt]);\n  const address = calculateAddress(data.shard, constructorData, byteSalt);\n  return { data: bytecode, address: address };\n};\n","import { bytesToHex } from \"viem\";\nimport type { PublicClient } from \"../clients/PublicClient.js\";\nimport type { ISigner } from \"../signers/index.js\";\nimport type { ExternalMessage } from \"../types/ExternalMessage.js\";\nimport type { IDeployData } from \"../types/IDeployData.js\";\nimport { prepareDeployPart } from \"./deployPart.js\";\nimport { SszMessageSchema, SszSignedMessageSchema } from \"./ssz.js\";\n\n/**\n * The envelope for an external message (a message sent by a user, a dApp, etc.)\n *\n \n * @class ExternalMessageEnvelope\n * @typedef {ExternalMessageEnvelope}\n */\nexport class ExternalMessageEnvelope {\n  /**\n   * The flag that determines whether the external message is a deployment message.\n   *\n   * @type {boolean}\n   */\n  isDeploy: boolean;\n  /**\n   * The destination address of the message.\n   *\n   * @type {Uint8Array}\n   */\n  to: Uint8Array;\n  /**\n   * The chain ID.\n   *\n   * @type {number}\n   */\n  chainId: number;\n  /**\n   * The message sequence number.\n   *\n   * @type {number}\n   */\n  seqno: number;\n  /**\n   * The message data.\n   *\n   * @type {Uint8Array}\n   */\n  data: Uint8Array;\n  /**\n   * The auth data attached to the message.\n   *\n   * @type {Uint8Array}\n   */\n  authData: Uint8Array;\n  /**\n   * Creates an instance of ExternalMessageEnvelope.\n   *\n   * @constructor\n   * @param {ExternalMessage} param0 The object representing the external message.\n   * @param {ExternalMessage} param0.isDeploy The flag that determines whether the external message is a deployment message.\n   * @param {ExternalMessage} param0.to The destination address of the message.\n   * @param {ExternalMessage} param0.chainId The chain ID.\n   * @param {ExternalMessage} param0.seqno The message sequence number.\n   * @param {ExternalMessage} param0.data The message number.\n   * @param {ExternalMessage} param0.authData The auth data attached to the message.\n   */\n  constructor({\n    isDeploy,\n    to,\n    chainId,\n    seqno,\n    data,\n    authData,\n  }: ExternalMessage) {\n    this.isDeploy = isDeploy;\n    this.to = to;\n    this.chainId = chainId;\n    this.seqno = seqno;\n    this.data = data;\n    this.authData = authData;\n  }\n  /**\n   * Encodes the external message into a Uint8Array.\n   *\n   * @public\n   * @returns {Uint8Array} The encoded external message.\n   */\n  public encode(): Uint8Array {\n    return SszSignedMessageSchema.serialize({\n      seqno: this.seqno,\n      chainId: this.chainId,\n      to: this.to,\n      data: this.data,\n      deploy: this.isDeploy,\n      authData: this.authData,\n    });\n  }\n  /**\n   * Provides the hash tree root of the external message.\n   *\n   * @public\n   * @returns {Uint8Array} The hash tree root of the external message.\n   */\n  public hash(): Uint8Array {\n    return SszSignedMessageSchema.hashTreeRoot({\n      seqno: this.seqno,\n      chainId: this.chainId,\n      to: this.to,\n      data: this.data,\n      deploy: this.isDeploy,\n      authData: this.authData,\n    });\n  }\n  /**\n   * Provides the signing hash of the external message.\n   *\n   * @public\n   * @returns {Uint8Array} The signing hash of the external message.\n   */\n  public signingHash(): Uint8Array {\n    // print all the fields\n    return SszMessageSchema.hashTreeRoot({\n      seqno: this.seqno,\n      chainId: this.chainId,\n      to: this.to,\n      data: this.data,\n      deploy: this.isDeploy,\n    });\n  }\n  /**\n   * Encodes the external message with its signature.\n   *\n   * @public\n   * @async\n   * @param {ISigner} signer The message signer.\n   * @returns {Promise<{\n   *     raw: Uint8Array;\n   *     hash: Uint8Array;\n   *   }>} The object containing the encoded message and its hash.\n   */\n  public async encodeWithSignature(signer: ISigner): Promise<{\n    raw: Uint8Array;\n    hash: Uint8Array;\n  }> {\n    const signature = await this.sign(signer);\n    const raw = SszSignedMessageSchema.serialize({\n      seqno: this.seqno,\n      chainId: this.chainId,\n      to: this.to,\n      data: this.data,\n      deploy: this.isDeploy,\n      authData: signature,\n    });\n    const hash = SszSignedMessageSchema.hashTreeRoot({\n      seqno: this.seqno,\n      chainId: this.chainId,\n      to: this.to,\n      data: this.data,\n      deploy: this.isDeploy,\n      authData: signature,\n    });\n    return { raw, hash };\n  }\n  /**\n   * Signs the external message.\n   *\n   * @public\n   * @async\n   * @param {ISigner} signer The message signer.\n   * @returns {Promise<Uint8Array>} The message signature.\n   */\n  public async sign(signer: ISigner): Promise<Uint8Array> {\n    return signer.sign(this.signingHash());\n  }\n  /**\n   * Updates the authentication data in the external message and returns the result.\n   *\n   * @public\n   * @async\n   * @param {ISigner} signer The auth data signer.\n   * @returns {Promise<Uint8Array>} The signed auth data.\n   */\n  public async updateAuthdata(signer: ISigner): Promise<Uint8Array> {\n    this.authData = await this.sign(signer);\n    return this.authData;\n  }\n  /**\n   * Returns the hex address of the given bytes.\n   *\n   * @public\n   * @returns {`0x${string}`} The hex address.\n   */\n  public hexAddress(): `0x${string}` {\n    return bytesToHex(this.to);\n  }\n  /**\n   * Sends the external message.\n   *\n   * @public\n   * @param {PublicClient} client The client sending the message.\n   * @returns {*} The hash of the external message.\n   */\n  public send(client: PublicClient) {\n    return client.sendRawMessage(this.encode());\n  }\n}\n\n/**\n * The envelope for an internal message (a message sent by a smart contract to another smart contract).\n *\n \n * @class InternalMessageEnvelope\n * @typedef {InternalMessageEnvelope}\n */\nexport class InternalMessageEnvelope {}\n\n/**\n * Creates a new external deployment message.\n *\n * @param {IDeployData} data The message data.\n * @param {number} chainId The chain ID.\n * @returns {ExternalMessageEnvelope} The envelope of the external deployment message.\n * @example\n * import {\n     Faucet,\n     LocalECDSAKeySigner,\n     HttpTransport,\n     PublicClient\n     WalletV1,\n     externalDeploymentMessage,\n     generateRandomPrivateKey,\n   } from '@nilfoundation/niljs';\n * const signer = new LocalECDSAKeySigner({\n     privateKey: generateRandomPrivateKey(),\n   });\n\n   const pubkey = await signer.getPublicKey();\n * const chainId = await client.chainId();\n * const deploymentMessage = externalDeploymentMessage(\n     {\n       salt: 100n,\n       shard: 1,\n       bytecode: WalletV1.code,\n       abi: WalletV1.abi,\n       args: [bytesToHex(pubkey)],\n     },\n     chainId,\n   );\n */\nexport const externalDeploymentMessage = (\n  data: IDeployData,\n  chainId: number,\n): ExternalMessageEnvelope => {\n  const { data: deployData, address } = prepareDeployPart(data);\n  return new ExternalMessageEnvelope({\n    isDeploy: true,\n    to: address,\n    chainId,\n    seqno: 0,\n    data: deployData,\n    authData: new Uint8Array(0),\n  });\n};\n\n/**\n * Encodes the given external message.\n *\n * @async\n * @param {Omit<ExternalMessage, \"authData\">} params The external message to be encoded without its auth data.\n * @param {ISigner} signer The message signer.\n * @returns {Promise<{ raw: Uint8Array; hash: Uint8Array }>} The message bytecode and the message hash.\n */\nexport const externalMessageEncode = async (\n  params: Omit<ExternalMessage, \"authData\">,\n  signer: ISigner,\n): Promise<{ raw: Uint8Array; hash: Uint8Array }> => {\n  const message = new ExternalMessageEnvelope({\n    ...params,\n    authData: new Uint8Array(0),\n  });\n  const res = await message.encodeWithSignature(signer);\n  return res;\n};\n","/**\n * The interface for the parameters of the BaseError constructor.\n */\ntype IBaseErrorParameters = {\n  /**\n   * The flag that indicates if this error is operational.\n   * This is useful to differentiate operational errors from programming errors.\n   * It is recommended to always set this property to true when creating a custom error class.\n   * @default true\n   */\n  isOperational?: boolean;\n  /**\n   * The error cause.\n   */\n  cause?: Error | BaseError;\n  /**\n   * The path to the documentation of this error.\n   */\n  docsPath?: string;\n};\n\n/**\n * The base class for custom errors.\n */\nclass BaseError extends Error {\n  /**\n   * The flag that indicates if this error is operational.\n   * This is useful to differentiate operational errors from programming errors.\n   * It is recommended to always set this property to true when creating a custom error class.\n   * @public\n   * @type {boolean}\n   */\n  public isOperational: boolean;\n  /**\n   * The error cause.\n   *\n   * @public\n   * @type {?(Error | BaseError)}\n   */\n  public cause?: Error | BaseError;\n  /**\n   * The path to the documentation of this error.\n   *\n   * @public\n   * @type {?string}\n   */\n  public docsPath?: string;\n\n  /**\n   * Creates an instance of BaseError.\n   *\n   * @constructor\n   * @param {?string} [message] The error message.\n   * @param {IBaseErrorParameters} [param0={}] The error params.\n   * @param {boolean} [param0.isOperational=true] The flag that determines whether the error is operational.\n   * @param {*} param0.cause The error cause.\n   * @param {string} param0.docsPath The path to the documentation of this error.\n   */\n  constructor(\n    message?: string,\n    { isOperational = true, cause, docsPath }: IBaseErrorParameters = {},\n  ) {\n    super();\n    this.name = this.constructor.name;\n    this.isOperational = isOperational;\n    this.cause = cause;\n    this.docsPath = docsPath;\n\n    this.message = `${message ?? \"An error occured\"}\n      Name: ${this.name}`;\n\n    if (docsPath) {\n      this.message = `${this.message}\n      Docs: see \\${this.docsPath}`;\n    }\n\n    // This line is needed to make the instanceof operator work correctly with custom errors in TypeScript\n    Object.setPrototypeOf(this, BaseError.prototype);\n  }\n}\n\nexport { BaseError, type IBaseErrorParameters };\n","import type { Hex } from \"../index.js\";\nimport { BaseError, type IBaseErrorParameters } from \"./BaseError.js\";\n\n/**\n * The interface for the parameters of the {@link BlockNotFoundError} constructor.\n */\ntype BlockNotFoundErrorParameters = {\n  blockNumberOrHash: number | Hex;\n} & IBaseErrorParameters;\n\n/**\n * The error class for 'block not found' errors.\n * This error is thrown when the requested block is not found.\n */\nclass BlockNotFoundError extends BaseError {\n  /**\n   * Creates an instance of BlockNotFoundError.\n   *\n   * @constructor\n   * @param {BlockNotFoundErrorParameters} param0 The error params.\n   * @param {*} param0.blockNumberOrHash The block number or hash.\n   * @param {*} param0....rest The remaining error params, see {@link IBaseErrorParameters}.\n   */\n  constructor({ blockNumberOrHash, ...rest }: BlockNotFoundErrorParameters) {\n    super(`Block not found: ${blockNumberOrHash}`, { ...rest });\n  }\n}\n\nexport { BlockNotFoundError };\n","const emptyAddress = \"0x0000000000000000000000000000000000000000\";\nconst masterShardId = 0;\n\nexport { emptyAddress, masterShardId };\n","import type { Block } from \"../index.js\";\n\n/**\n * Checks if the provided block is valid.\n * @param block The block to check.\n * @returns True if the block is valid, false otherwise.\n */\nconst isValidBlock = (block: Block): block is Block => {\n  return true;\n};\n\nexport { isValidBlock };\n","import invariant from \"tiny-invariant\";\nimport { masterShardId } from \"../clients/constants.js\";\nimport type { IDeployData } from \"../clients/types/IDeployData.js\";\nimport type { ISendMessage } from \"../clients/types/ISendMessage.js\";\nimport { type Hex, InvalidShardIdError } from \"../index.js\";\nimport type { IPrivateKey } from \"../signers/index.js\";\nimport type { Block } from \"../types/Block.js\";\nimport { isAddress } from \"./address.js\";\nimport { isValidBlock } from \"./block.js\";\nimport { isHexString } from \"./hex.js\";\n\n/**\n * Checks if the value is a string.\n * @throws Will throw an error if the value is not a hex string.\n * @param value - The value to check.\n * @param message - The message to throw if the value is not a hex string.\n */\nconst assertIsHexString = (value: Hex, message?: string): void => {\n  invariant(\n    isHexString(value),\n    message ?? `Expected a hex string but got ${value}`,\n  );\n};\n\n/**\n * Checks if the value is a buffer.\n * @throws Will throw an error if value is not a buffer.\n * @param value - The value to check.\n * @param message - The message to throw if the value is not a buffer.\n */\nconst assertIsBuffer = (value: Uint8Array, message?: string): void => {\n  invariant(\n    value instanceof Uint8Array,\n    message ?? `Expected a buffer but got ${value}`,\n  );\n};\n\n/**\n * Checks if provided private key is valid. If the value is a hex string with length 32 nothing is returned.\n * @throws Will throw an error if provided private key is invalid.\n * @param privateKey - The private key to check.\n * @param message - The message to throw if the private key is invalid.\n */\nconst assertIsValidPrivateKey = (\n  privateKey: IPrivateKey,\n  message?: string,\n): void => {\n  invariant(\n    isHexString(privateKey) && privateKey.length === 32 * 2 + 2,\n    message ?? `Expected a valid private key, but got ${privateKey}`,\n  );\n};\n\n/**\n * Checks if the data to send message is valid. If the message is valid, it returns nothing.\n * @throws Will throw an error if the value is not a valid data to send message.\n * @param sendMessage - The data to validate.\n * @param message - The message to throw if the data is invalid.\n */\nconst assertIsValidSendMessageData = (\n  sendMessage: ISendMessage,\n  message?: string,\n) => {\n  const { gasPrice, gasLimit, to, from, seqno, value } = sendMessage;\n  invariant(\n    typeof to === \"string\" && isAddress(to),\n    message ?? `Expected a valid 'to' address but got ${to}`,\n  );\n\n  invariant(\n    typeof value === \"bigint\" && value >= 0,\n    message ?? `Expected a valid 'value' but got ${value}`,\n  );\n\n  if (from !== undefined) {\n    invariant(\n      typeof from === \"string\" && isAddress(from),\n      message ?? `Expected a valid 'from' address but got ${from}`,\n    );\n  }\n\n  if (gasPrice !== undefined) {\n    invariant(\n      (typeof gasPrice === \"number\" || typeof gasPrice === \"bigint\") &&\n        gasPrice > 0,\n      message ?? `Expected a valid 'gasPrice' but got ${gasPrice}`,\n    );\n  }\n\n  if (gasLimit !== undefined) {\n    invariant(\n      (typeof gasLimit === \"number\" || typeof gasLimit === \"bigint\") &&\n        gasLimit > 0,\n      message ?? `Expected a valid 'gasLimit' but got ${gasLimit}`,\n    );\n  }\n\n  if (seqno !== undefined) {\n    invariant(\n      seqno >= 0,\n      message ?? `Expected a valid 'seqno' but got ${seqno}`,\n    );\n  }\n};\n\n/**\n * Checks if the data to deploy contract is valid. If the data is valid, it returns nothing.\n * @throws Will throw an error if the value is not a valid data to deploy contract.\n * @param deployData - The data to validate.\n * @param message - The message to throw if the data is invalid.\n */\nconst assertIsValidDeployData = (\n  deployContractData: IDeployData,\n  message?: string,\n) => {\n  const { seqno, pubkey, shardId } = deployContractData;\n\n  if (seqno !== undefined) {\n    invariant(\n      seqno >= 0,\n      message ?? `Expected a valid 'seqno' but got ${seqno}`,\n    );\n  }\n\n  if (pubkey !== undefined) {\n    invariant(\n      typeof pubkey === \"string\",\n      message ?? `Expected a valid 'pubkey' but got ${pubkey}`,\n    );\n  }\n\n  assertIsValidShardId(shardId);\n};\n\n/**\n * Checks if the address is valid. If the address is valid, it returns nothing.\n * @param address - The address to check.\n * @param message - The message to throw if the address is invalid.\n */\nconst assertIsAddress = (address: string, message?: string): void => {\n  invariant(\n    isAddress(address),\n    message ?? `Expected a valid address but got ${address}`,\n  );\n};\n\n/**\n * Checks if the block is valid. If the block is valid, it returns nothing.\n * @param block - The block to check.\n * @param message - The message to throw if the block is invalid.\n */\nconst assertIsValidBlock = (block: Block, message?: string): void => {\n  invariant(\n    isValidBlock(block),\n    message ?? `Expected a valid block but got ${block}`,\n  );\n};\n\n/**\n * Checks if the shard id is valid. If the shard id is valid, it returns nothing.\n * @param shardId - The shard id to check.\n */\nconst assertIsValidShardId = (shardId?: number): void => {\n  const isValid =\n    typeof shardId === \"number\" &&\n    Number.isInteger(shardId) &&\n    shardId >= 0 &&\n    shardId < 2 ** 16 &&\n    shardId !== masterShardId;\n\n  if (!isValid) {\n    throw new InvalidShardIdError({ shardId });\n  }\n};\n\nexport {\n  assertIsBuffer,\n  assertIsHexString,\n  assertIsValidPrivateKey,\n  assertIsValidSendMessageData,\n  assertIsAddress,\n  assertIsValidBlock,\n  assertIsValidShardId,\n  assertIsValidDeployData,\n};\n","import type { RequestArguments } from \"@open-rpc/client-js/build/ClientInterface.js\";\nimport type { ITransport } from \"../transport/index.js\";\nimport { assertIsValidShardId } from \"../utils/assert.js\";\nimport type { IClientBaseConfig } from \"./types/ClientConfigs.js\";\n\n/**\n * BaseClient is the base class for any client tasked with interacting with =nil; *\n * @class BaseClient\n * @typedef {BaseClient}\n */\nclass BaseClient {\n  /**\n   * The ITransport to be used in the client. See {@link ITransport}.\n   *\n   * @protected\n   * @type {ITransport}\n   */\n  protected transport: ITransport;\n  /**\n   * The ID of the shard which the client needs to interact with.\n   * The shard with this ID will be used in every call made by the client.\n   * @protected\n   * @type {number | undefined}\n   */\n  protected shardId?: number;\n\n  /**\n   * Creates an instance of BaseClient.\n   * @constructor\n   * @param {IClientBaseConfig} config The config to be used in the client. It contains the transport and the shard ID. See {@link IClientBaseConfig}.\n   */\n  constructor(config: IClientBaseConfig) {\n    this.transport = config.transport;\n    this.shardId = config.shardId;\n  }\n\n  /**\n   * Sends a request.\n   * @param requestObject The request object. It contains the method and parameters.\n   * @returns The response.\n   */\n  protected async request<T>(requestObject: RequestArguments): Promise<T> {\n    return this.transport.request(requestObject);\n  }\n\n  /**\n   * Returns the shard ID.\n   * @returns The shard ID.\n   */\n  public getShardId() {\n    return this.shardId;\n  }\n\n  /**\n   * Sets the shard ID.\n   * @param shardId The shard ID.\n   * @throws Will throw an error if the provided shard ID is invalid.\n   * @example\n   * client.setShardId(1);\n   */\n  public setShardId(shardId: number): void {\n    assertIsValidShardId(shardId);\n\n    this.shardId = shardId;\n  }\n}\n\nexport { BaseClient };\n","import { bytesToHex } from \"@noble/curves/abstract/utils\";\nimport { hexToBytes, numberToHex } from \"viem\";\nimport { hexToBigInt, hexToNumber } from \"../encoding/index.js\";\nimport { BlockNotFoundError } from \"../errors/block.js\";\nimport { type Hex, assertIsValidShardId } from \"../index.js\";\nimport type { IAddress } from \"../signers/types/IAddress.js\";\nimport type { Block, BlockTag } from \"../types/Block.js\";\nimport type { CallArgs } from \"../types/CallArgs.js\";\nimport type { IReceipt } from \"../types/IReceipt.js\";\nimport type { ProcessedMessage } from \"../types/ProcessedMessage.js\";\nimport type { RPCMessage } from \"../types/RPCMessage.js\";\nimport { addHexPrefix } from \"../utils/hex.js\";\nimport { BaseClient } from \"./BaseClient.js\";\nimport type { IPublicClientConfig } from \"./types/ClientConfigs.js\";\n\n/**\n * PublicClient is a class that allows for interacting with the network via the JSON-RPC API.\n * It provides an abstraction of the connection to =nil;.\n * PublicClient enables using API requests that do not require signing data (or otherwise using one's private key).\n * @example\n * import { PublicClient } from '@nilfoundation/niljs';\n *\n * const client = new PublicClient({\n *   transport: new HttpTransport({\n *     endpoint: \"http://127.0.0.1:8529\",\n *   }),\n *   shardId: 1,\n * });\n */\nclass PublicClient extends BaseClient {\n  /**\n   * Creates an instance of PublicClient.\n   *\n   * @constructor\n   * @param {IPublicClientConfig} config The config to be used in the client. See {@link IPublicClientConfig}.\n   */\n  // biome-ignore lint/complexity/noUselessConstructor: may be useful in the future\n  constructor(config: IPublicClientConfig) {\n    super(config);\n  }\n\n  /**\n   * Returns the block with the given hash.\n   * @param hash The hash of the block whose information is requested.\n   * @param fullTx The flag that determines whether full transaction information is returned in the output.\n   * @param shardId The ID of the shard where the block was generated.\n   * @returns Information about the block with the given hash.\n   * @example\n   * import { PublicClient } from '@nilfoundation/niljs';\n   *\n   * const client = new PublicClient({\n   *   transport: new HttpTransport({\n   *     endpoint: \"http://127.0.0.1:8529\",\n   *   }),\n   *   shardId: 1,\n   * });\n   *\n   * const block = await client.getBlockByHash(0x9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08);\n   */\n  public async getBlockByHash(\n    hash: Hex,\n    fullTx = false,\n    shardId = this.shardId,\n  ) {\n    assertIsValidShardId(shardId);\n\n    try {\n      return await this.request<Block>({\n        method: \"eth_getBlockByHash\",\n        params: [shardId, hash, fullTx],\n      });\n    } catch (error) {\n      throw new BlockNotFoundError({\n        blockNumberOrHash: hash,\n        cause: error,\n      });\n    }\n  }\n\n  /**\n   * Returns the block with the given number.\n   * @param blockNumber The number of the block whose information is requested.\n   * @param fullTx The flag that determines whether full transaction information is returned in the output.\n   * @param shardId The ID of the shard where the block was generated.\n   * @returns Returns information about a block with the given number.\n   * @example\n   import { PublicClient } from '@nilfoundation/niljs';\n   *\n   * const client = new PublicClient({\n   *  endpoint: 'http://127.0.0.1:8529'\n   * })\n   *\n   * const block = await client.getBlockByNumber(1);\n   */\n  public async getBlockByNumber(\n    blockNumber: Hex,\n    fullTx = false,\n    shardId = this.shardId,\n  ) {\n    assertIsValidShardId(shardId);\n\n    try {\n      return await this.request<Block>({\n        method: \"eth_getBlockByNumber\",\n        params: [shardId, blockNumber, fullTx],\n      });\n    } catch (error) {\n      throw new BlockNotFoundError({\n        blockNumberOrHash: blockNumber,\n        cause: error,\n      });\n    }\n  }\n\n  /**\n   * Returns the total number of messages recorded in the block with the given number.\n   * @param number The number of the block whose information is requested.\n   * @returns The number of messages contained within the block.\n   * @example\n   * import { PublicClient } from '@nilfoundation/niljs';\n   *\n   * const client = new PublicClient({\n   *  endpoint: 'http://127.0.0.1:8529'\n   * })\n   *\n   * const count = await client.getBlockMessageCountByNumber(1);\n   *\n   */\n  public async getBlockMessageCountByNumber(\n    blockNumber: string,\n    shardId = this.shardId,\n  ) {\n    assertIsValidShardId(shardId);\n\n    const res = await this.request<number>({\n      method: \"eth_getBlockTransactionCountByNumber\",\n      params: [shardId, blockNumber],\n    });\n\n    return res;\n  }\n\n  /**\n   * Returns the total number of messages recorded in the block with the given hash.\n   * @param hash The hash of the block whose information is requested.\n   * @param shardId The ID of the shard where the block was generated.\n   * @returns The number of messages contained within the block.\n   * @example\n   * import { PublicClient } from '@nilfoundation/niljs';\n   *\n   * const client = new PublicClient({\n   *  endpoint: 'http://127.0.0.1:8529'\n   * })\n   *\n   * const count = await client.getBlockMessageCountByHash(Uint8Array.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\n   */\n  public async getBlockMessageCountByHash(hash: Hex, shardId = this.shardId) {\n    assertIsValidShardId(shardId);\n\n    const res = await this.request<number>({\n      method: \"eth_getBlockTransactionCountByHash\",\n      params: [shardId, hash],\n    });\n\n    return res;\n  }\n\n  /**\n   * Returns the bytecode of the contract with the given address and at the given block.\n   * @param address The address of the account or contract.\n   * @param blockNumberOrHash The number/hash of the block.\n   * @param shardId The ID of the shard where the block was generated.\n   * @returns The bytecode of the contract.\n   * @example\n   * import { PublicClient } from '@nilfoundation/niljs';\n   *\n   * const client = new PublicClient({\n   *  endpoint: 'http://127.0.0.1:8529'\n   * })\n   *\n   * const code = await client.getCode(Uint8Array.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 'latest');\n   */\n  public async getCode(address: IAddress, blockNumberOrHash: Hex | BlockTag) {\n    const res = await this.request<`0x${string}`>({\n      method: \"eth_getCode\",\n      params: [address, blockNumberOrHash],\n    });\n\n    return hexToBytes(res);\n  }\n\n  /**\n   * Returns the transaction count of the account with the given address and at the given block.\n   * @param address The address of the account or contract.\n   * @param blockNumberOrHash The number/hash of the block.\n   * @returns The number of transactions contained within the block.\n   * @example\n   * import { PublicClient } from '@nilfoundation/niljs';\n   *\n   * const client = new PublicClient({\n   *  endpoint: 'http://127.0.0.1:8529'\n   * })\n   *\n   * const count = await client.getMessageCount(Uint8Array.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 'latest');\n   *\n   */\n  public async getMessageCount(\n    address: IAddress,\n    blockNumberOrHash: Hex | BlockTag,\n  ) {\n    const res = await this.request<Hex>({\n      method: \"eth_getTransactionCount\",\n      params: [address, blockNumberOrHash],\n    });\n\n    return hexToNumber(res);\n  }\n\n  /**\n   * Returns the balance of the given address and at the given block.\n   * @param address The address of the account or contract.\n   * @param blockNumberOrHash The number/hash of the block.\n   * @returns The balance of the address.\n   * @example\n   * import { PublicClient } from '@nilfoundation/niljs';\n   *\n   * const client = new PublicClient({\n   *  endpoint: 'http://127.0.0.1:8529'\n   * })\n   *\n   * const balance = await client.getBalance(Uint8Array.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), 'latest');\n   */\n  public async getBalance(\n    address: IAddress,\n    blockNumberOrHash: Hex | BlockTag,\n  ) {\n    const res = await this.request<`0x${string}`>({\n      method: \"eth_getBalance\",\n      params: [addHexPrefix(address), blockNumberOrHash],\n    });\n\n    return hexToBigInt(res);\n  }\n\n  /**\n   * Returns the structure of the internal message with the given hash.\n   * @param hash - The hash of the message.\n   * @param shardId - The ID of the shard where the message was recorded.\n   * @returns The message whose information is requested.\n   * @example\n   * import { PublicClient } from '@nilfoundation/niljs';\n   *\n   * const client = new PublicClient({\n   *  endpoint: 'http://127.0.0.1:8529'\n   * })\n   *\n   * const message = await client.getMessageByHash(Uint8Array.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\n   */\n  public async getMessageByHash(\n    hash: Hex,\n    shardId = this.shardId,\n  ): Promise<ProcessedMessage> {\n    assertIsValidShardId(shardId);\n\n    const res = await this.request<RPCMessage>({\n      method: \"eth_getInMessageByHash\",\n      params: [shardId, hash],\n    });\n\n    return {\n      ...res,\n      value: BigInt(res.value),\n      gasLimit: BigInt(res.gasLimit),\n      gasUsed: hexToBigInt(res.gasUsed),\n      gasPrice: BigInt(res.gasPrice),\n      seqno: hexToBigInt(res.seqno),\n      index: res.index ? hexToNumber(res.index) : 0,\n    };\n  }\n\n  /**\n   * Returns the receipt for the message with the given hash.\n   * @param hash - The hash of the message.\n   * @param shardId - The ID of the shard where the message was recorded.\n   * @returns The receipt whose structure is requested.\n   * @example\n   * import { PublicClient } from '@nilfoundation/niljs';\n   *\n   * const client = new PublicClient({\n   * endpoint: 'http://127.0.0.1:8529'\n   * })\n   *\n   * const receipt = await client.getMessageReceiptByHash(1, Uint8Array.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\n   */\n  public async getMessageReceiptByHash(hash: Hex, shardId = this.shardId) {\n    assertIsValidShardId(shardId);\n\n    const res = await this.request<IReceipt | null>({\n      method: \"eth_getInMessageReceipt\",\n      params: [\n        shardId,\n        typeof hash === \"string\"\n          ? addHexPrefix(hash)\n          : addHexPrefix(bytesToHex(hash)),\n      ],\n    });\n\n    return res;\n  }\n\n  /**\n   * Creates a new message or creates a contract for a previously signed message.\n   * @param message - The encoded bytecode of the message.\n   * @returns The hash of the message.\n   * @example\n   * import { PublicClient } from '@nilfoundation/niljs';\n   *\n   * const client = new PublicClient({\n   *  endpoint: 'http://127.0.0.1:8529'\n   * })\n   *\n   * const message = Uint8Array.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n   */\n  public async sendRawMessage(message: `0x${string}` | Uint8Array) {\n    const res = await this.request<Hex>({\n      method: \"eth_sendRawTransaction\",\n      params: [\n        typeof message === \"string\"\n          ? message\n          : addHexPrefix(bytesToHex(message)),\n      ],\n    });\n\n    return res;\n  }\n\n  /**\n   * Returns the gas price in wei.\n   * @returns The gas price.\n   */\n  public async getGasPrice(): Promise<bigint> {\n    const stubGasPrice = BigInt(1);\n\n    return stubGasPrice;\n  }\n\n  /**\n   * Returns the gas limit.\n   * @returns The gas limit.\n   */\n  public async estimateGasLimit(): Promise<bigint> {\n    const stubGasLimit = BigInt(1000000);\n\n    return stubGasLimit;\n  }\n\n  /**\n   * Returns the chain ID.\n   * @returns The chain ID.\n   */\n  public async chainId(): Promise<number> {\n    const res = await this.request<Hex>({\n      method: \"eth_chainId\",\n      params: [],\n    });\n\n    return hexToNumber(res);\n  }\n\n  /**\n   * Returns all tokens by the given address.\n   * @param address The address of the account.\n   * @param blockNumberOrHash The number/hash of the block.\n   * @returns The list of tokens.\n   */\n  public async getCurrencies(\n    address: IAddress,\n    blockNumberOrHash: Hex | BlockTag,\n  ) {\n    const res = await this.request<{ [id: string]: `0x${string}` } | null>({\n      method: \"eth_getCurrencies\",\n      params: [address, blockNumberOrHash],\n    });\n    const tokenMap: Record<string, bigint> = {};\n\n    if (res) {\n      for (const [key, value] of Object.entries(res)) {\n        tokenMap[key] = hexToBigInt(value);\n      }\n    }\n\n    return tokenMap;\n  }\n\n  /**\n   * Returns the result of the call.\n   * @param callArgs The arguments for the call.\n   * @param callArgs.from The address of the sender.\n   * @param callArgs.to The address of the receiver.\n   * @param callArgs.data The data to be sent.\n   * @param callArgs.value The value to be sent.\n   * @param callArgs.gasLimit The gas limit.\n   * @param blockNumberOrHash The number/hash of the block.\n   */\n  public async call(callArgs: CallArgs, blockNumberOrHash: Hex | BlockTag) {\n    const sendData = {\n      from: callArgs.from,\n      to: callArgs.to,\n      data:\n        typeof callArgs.data === \"string\"\n          ? callArgs.data\n          : addHexPrefix(bytesToHex(callArgs.data)),\n      value: numberToHex(callArgs.value || 0n),\n      gasLimit: (callArgs.gasLimit || 5_000_000n).toString(10),\n    };\n\n    const res = await this.request<`0x${string}`>({\n      method: \"eth_call\",\n      params: [sendData, blockNumberOrHash],\n    });\n\n    return res;\n  }\n}\n\nexport { PublicClient };\n","import { mnemonicToSeedSync } from \"@scure/bip39\";\nimport { toHex } from \"../encoding/toHex.js\";\nimport { addHexPrefix } from \"../utils/hex.js\";\nimport type { IPrivateKey } from \"./index.js\";\n\n/**\n * Generate the private key from the mnemonic phrase.\n * @param mnemonic The ,nemonic phrase to generate the private key from.\n * @param password The password to generate the private key.\n * @returns The private key.\n */\nconst privateKeyFromPhrase = (mnemonic: string): IPrivateKey => {\n  return addHexPrefix(toHex(mnemonicToSeedSync(mnemonic).slice(0, 32)));\n};\n\nexport { privateKeyFromPhrase };\n","import {\n  bytesToHex,\n  hexToBytes,\n  numberToBytesBE,\n} from \"@noble/curves/abstract/utils\";\nimport { secp256k1 } from \"@noble/curves/secp256k1\";\nimport { poseidonHash } from \"../encoding/poseidon.js\";\nimport { toHex } from \"../encoding/toHex.js\";\nimport type { Hex } from \"../types/Hex.js\";\nimport { assertIsValidShardId } from \"../utils/assert.js\";\nimport { addHexPrefix, removeHexPrefix } from \"../utils/hex.js\";\nimport type { IAddress } from \"./types/IAddress.js\";\nimport type { IPrivateKey } from \"./types/IPrivateKey.js\";\n\n/**\n * Returns the public key from the private key using the secp256k1 curve.\n */\nconst getPublicKey = (privateKey: IPrivateKey, isCompressed = false): Hex => {\n  const publicKey = secp256k1.getPublicKey(\n    removeHexPrefix(privateKey),\n    isCompressed,\n  );\n\n  return addHexPrefix(bytesToHex(publicKey));\n};\n\n/**\n * Returns the address from the public key.\n * @param publicKey - Public key in hex format\n * @param shardId - Shard id\n * @returns Address in hex format\n */\nconst getAddressFromPublicKey = (publicKey: Hex, shardId: number): IAddress => {\n  assertIsValidShardId(shardId);\n  const publickKeyWithoutPrefix = removeHexPrefix(publicKey);\n\n  const pubKeyBytes =\n    typeof publickKeyWithoutPrefix === \"string\"\n      ? hexToBytes(publickKeyWithoutPrefix)\n      : publickKeyWithoutPrefix;\n\n  const hash = poseidonHash(pubKeyBytes);\n  const shardPart = numberToBytesBE(shardId, 2);\n  const hashPart = numberToBytesBE(hash, 32);\n  return toHex(new Uint8Array([...shardPart, ...hashPart.slice(14)]));\n};\n\nexport { getPublicKey, getAddressFromPublicKey };\n","import { concatBytes, numberToBytesBE } from \"@noble/curves/abstract/utils\";\nimport { secp256k1 } from \"@noble/curves/secp256k1\";\nimport invariant from \"tiny-invariant\";\nimport { type Hex, bytesToHex, hexToBytes } from \"viem\";\nimport { assertIsValidPrivateKey } from \"../utils/assert.js\";\nimport { addHexPrefix, removeHexPrefix } from \"../utils/hex.js\";\nimport { privateKeyFromPhrase } from \"./mnemonic.js\";\nimport { getAddressFromPublicKey, getPublicKey } from \"./publicKey.js\";\nimport type { IAddress } from \"./types/IAddress.js\";\nimport type { ILocalKeySignerConfig } from \"./types/ILocalKeySignerConfig.js\";\nimport type { ISigner } from \"./types/ISigner.js\";\n\n/**\n * LocalKeySigner is a class that allows for signing data with the private key.\n * It uses the secp256k1 curve implementation by the @noble/curves/secp256k1 library.\n * @example\n * import {\n *   LocalECDSAKeySigner,\n *   generateRandomPrivateKey,\n * } from '@nilfoundation/niljs';\n * const signer = new LocalECDSAKeySigner({\n *   privateKey: generateRandomPrivateKey(),\n * });\n */\nclass LocalECDSAKeySigner implements ISigner {\n  /**\n   * The private key to be used for signing.\n   *\n   * @private\n   * @type {Hex}\n   */\n  private privateKey: Hex;\n  /**\n   * The public key to be used for signing.\n   *\n   * @private\n   * @type {?Hex}\n   */\n  private publicKey?: Hex = undefined;\n  /**\n   * The wallet address.\n   *\n   * @private\n   * @type {?IAddress}\n   */\n  private address?: IAddress = undefined;\n\n  /**\n   * Creates an instance of LocalECDSAKeySigner.\n   *\n   * @constructor\n   * @param {ILocalKeySignerConfig} config The config for the LocalECDSAKeySigner. See {@link ILocalKeySignerConfig}.\n   */\n  constructor(config: ILocalKeySignerConfig) {\n    const { privateKey, mnemonic } = config;\n\n    invariant(\n      privateKey || mnemonic,\n      \"Either privateKey or mnemonic must be provided.\",\n    );\n\n    const privKey = mnemonic\n      ? privateKeyFromPhrase(mnemonic)\n      : addHexPrefix(privateKey as string);\n\n    assertIsValidPrivateKey(privKey);\n\n    this.privateKey = privKey;\n  }\n\n  /**\n   * Signs the data.\n   *\n   * @public\n   * @async\n   * @param {Uint8Array} data The input data.\n   * @returns {Promise<Uint8Array>} The signed data.\n   */\n  public async sign(data: Uint8Array): Promise<Uint8Array> {\n    const signature = secp256k1.sign(data, removeHexPrefix(this.privateKey));\n    const { r, s, recovery } = signature;\n\n    return concatBytes(\n      numberToBytesBE(r, 32),\n      numberToBytesBE(s, 32),\n      numberToBytesBE(recovery, 1),\n    );\n  }\n\n  /**\n   * Retrieves the public key.\n   *\n   * @public\n   * @async\n   * @returns {unknown} The publc key of the signer.\n   */\n  public async getPublicKey() {\n    if (this.publicKey) {\n      return hexToBytes(this.publicKey);\n    }\n\n    const publicKey = getPublicKey(this.privateKey, true);\n\n    this.publicKey = publicKey;\n    return hexToBytes(this.publicKey);\n  }\n\n  /**\n   * Retrieves the wallet address.\n   *\n   * @public\n   * @async\n   * @param {number} shardId The ID of the shard where the wallet is deployed.\n   * @returns {unknown} The wallet address.\n   */\n  public async getAddress(shardId: number) {\n    if (this.address) {\n      return hexToBytes(this.address);\n    }\n\n    const pubKey = await this.getPublicKey();\n\n    this.address = getAddressFromPublicKey(bytesToHex(pubKey), shardId);\n\n    return hexToBytes(this.address);\n  }\n}\n\nexport { LocalECDSAKeySigner };\n","import { secp256k1 } from \"@noble/curves/secp256k1\";\nimport { toHex } from \"../encoding/toHex.js\";\nimport type { IPrivateKey } from \"./types/IPrivateKey.js\";\n\n/**\n * Generate a new private key.\n * @returns The new private key\n * @example\n * const privateKey = generatePrivateKey();\n */\nconst generateRandomPrivateKey = (): IPrivateKey =>\n  toHex(secp256k1.utils.randomPrivateKey());\n\nexport { generateRandomPrivateKey };\n","import invariant from \"tiny-invariant\";\nimport type { ISigner } from \"./types/ISigner.js\";\n\n/**\n * MetaMaskSigner is a class that allows for signing data using MetaMask.\n * This signer can only be used inside a browser.\n * @example\n * import { MetaMaskSigner } from '@nilfoundation/niljs';\n *\n * const signer = new MetaMaskSigner();\n */\nclass MetaMaskSigner implements ISigner {\n  /**\n   * The signer provider.\n   *\n   * @private\n   * @type {*}\n   */\n  private provider;\n  /**\n   * Creates an instance of MetaMaskSigner.\n   *\n   * @constructor\n   */\n  constructor() {\n    invariant(\n      typeof window !== \"undefined\",\n      \"MetaMaskSigner can be used in the browser only\",\n    );\n\n    invariant(\n      typeof window.ethereum !== \"undefined\",\n      \"No MetaMask provider found. Please install MetaMask browser extension before using MetaMaskSigner\",\n    );\n\n    this.provider = window.ethereum;\n  }\n\n  /**\n   * Signs the data.\n   *\n   * @public\n   * @async\n   * @param {Uint8Array} data The input data.\n   * @returns {unknown} The signed data.\n   */\n  public async sign(data: Uint8Array) {\n    // mock signature\n    return new Uint8Array(65);\n  }\n\n  /**\n   * Retrieves the wallet address.\n   *\n   * @public\n   * @async\n   * @returns {unknown}\n   */\n  public async getAddress() {\n    // mock address\n    return new Uint8Array(20);\n  }\n\n  /**\n   * Retreieves the public key.\n   *\n   * @public\n   * @async\n   * @returns {unknown}\n   */\n  public async getPublicKey() {\n    // mock public key\n    return new Uint8Array(33);\n  }\n\n  /**\n   * Connects the signer to an existing MetaMask wallet.\n   *\n   * @public\n   * @async\n   * @returns {Promise<void>}\n   */\n  public async connect(): Promise<void> {\n    await this.provider.request({ method: \"eth_requestAccounts\" });\n  }\n}\n\nexport { MetaMaskSigner };\n","import type { PublicClient } from \"../clients/PublicClient.js\";\nimport type { Hex } from \"../types/Hex.js\";\nimport type { IReceipt } from \"../types/IReceipt.js\";\n\n/**\n * Makes it so that the client waits until the processing of the message whose hash is passed.\n *\n * @async\n * @param {PublicClient} client The client that must wait for action completion.\n * @param {number} shardId The ID of the shard where the message is processed.\n * @param {Hex} hash The message hash.\n * @returns {unknown}\n * @example\n * await waitTillCompleted(client, 1, hash);\n */\nexport const waitTillCompleted = async (\n  client: PublicClient,\n  shardId: number,\n  hash: Hex,\n) => {\n  const receipts: IReceipt[] = [];\n  const hashes: [number, Hex][] = [[shardId, hash]];\n  let cur = 0;\n  while (cur !== hashes.length) {\n    const [shardId, hash] = hashes[cur];\n    const receipt = await client.getMessageReceiptByHash(hash, shardId);\n    if (\n      !receipt ||\n      (receipt.outMessages !== null &&\n        receipt.outputReceipts &&\n        receipt.outputReceipts.filter((x) => x !== null).length !==\n          receipt.outMessages.length)\n    ) {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      continue;\n    }\n    cur++;\n    receipts.push(receipt);\n    if (receipt.outputReceipts) {\n      for (const r of receipt.outputReceipts) {\n        hashes.push([r.shardId, r.messageHash]);\n      }\n    }\n  }\n\n  return receipts;\n};\n","export const convertEthToWei = (eth: number): bigint => {\n  return BigInt(eth * 1e18);\n};\n","import { Client, HTTPTransport, RequestManager } from \"@open-rpc/client-js\";\n\n/**\n * Creates a new RPC client to interact with the network using the RPC API.\n * The RPC client uses an HTTP transport to send requests to the network.\n * HTTP is currently the only supported transport.\n * @example const client = createRPCClient(\"http://127.0.0.1:8529\");\n */\nconst createRPCClient = (endpoint: string) => {\n  const transport = new HTTPTransport(endpoint);\n  const requestManager = new RequestManager([transport]);\n  return new Client(requestManager);\n};\n\nexport { createRPCClient };\n","import type { Client as RPCClient } from \"@open-rpc/client-js\";\nimport type { RequestArguments } from \"@open-rpc/client-js/build/ClientInterface.js\";\nimport { createRPCClient } from \"../rpc/rpcClient.js\";\nimport type { IHttpTransportConfig } from \"./types/IHttpTransportConfig.js\";\nimport type { ITransport } from \"./types/ITransport.js\";\n\n/**\n * HttpTransport represents the HTTP transport for connecting to the network.\n *\n * @class HttpTransport\n * @typedef {HttpTransport}\n * @implements {ITransport}\n */\nclass HttpTransport implements ITransport {\n  /**\n   * The RPC client for the transport.\n   *\n   * @private\n   * @type {RPCClient}\n   */\n  private rpcClient: RPCClient;\n  /**\n   * The request timeout.\n   *\n   * @private\n   * @type {number}\n   */\n  private timeout: number;\n\n  /**\n   * Creates an instance of HttpTransport.\n   *\n   * @constructor\n   * @param {IHttpTransportConfig} config The transport config. See {@link IHttpTransportConfig}.\n   */\n  constructor(config: IHttpTransportConfig) {\n    this.rpcClient = createRPCClient(config.endpoint);\n    this.timeout = config.timeout !== undefined ? config.timeout : 20000;\n  }\n\n  /**\n   * Sends a request to the network.\n   *\n   * @public\n   * @async\n   * @template T\n   * @param {RequestArguments} requestObject The request object.\n   * @returns {Promise<T>} The response.\n   */\n  public async request<T>(requestObject: RequestArguments): Promise<T> {\n    return this.rpcClient.request(requestObject, this.timeout);\n  }\n\n  /**\n   * Connects to the network.\n   *\n   * @public\n   */\n  public connect(): void {\n    //\n  }\n\n  /**\n   * Closes the connection to the network.\n   *\n   * @public\n   */\n  public closeConnection(): void {\n    this.rpcClient.close();\n  }\n}\n\nexport { HttpTransport };\n","import type { RequestArguments } from \"@open-rpc/client-js/build/ClientInterface.js\";\nimport invariant from \"tiny-invariant\";\nimport type { IHttpTransportConfig } from \"./types/IHttpTransportConfig.js\";\nimport type { ITransport } from \"./types/ITransport.js\";\n\n/**\n * MetaMask transport represents the MetaMask transport for connecting to the network.\n * MetaMask transport can be used in browser only.\n * @class MetaMaskTransport\n * @typedef {MetaMaskTransport}\n * @implements {ITransport}\n */\nclass MetaMaskTransport implements ITransport {\n  /**\n   * The provider for the transport.\n   *\n   * @private\n   * @type {*}\n   */\n  private provider;\n  /**\n   * The request timeout.\n   *\n   * @private\n   * @type {number}\n   */\n  private timeout: number;\n\n  /**\n   * Creates an instance of MetaMaskTransport.\n   *\n   * @constructor\n   * @param {IHttpTransportConfig} config The transport config.\n   */\n  constructor(config: IHttpTransportConfig) {\n    this.timeout = config.timeout !== undefined ? config.timeout : 20000;\n\n    invariant(\n      typeof window !== \"undefined\",\n      \"MetaMaskTransport can be used in the browser only\",\n    );\n\n    invariant(\n      typeof window.ethereum !== \"undefined\",\n      \"No MetaMask provider found. Please install MetaMask browser extension before using MetaMaskSigner\",\n    );\n\n    this.provider = window.ethereum;\n  }\n\n  /**\n   * Sends a request to the network.\n   *\n   * @public\n   * @async\n   * @template T\n   * @param {RequestArguments} requestObject The request object.\n   * @returns {Promise<T>} The response.\n   */\n  public async request<T>(requestObject: RequestArguments): Promise<T> {\n    return this.provider.request(requestObject);\n  }\n\n  /**\n   * Connects to the network.\n   *\n   * @public\n   */\n  public connect(): void {\n    this.provider.request({ method: \"eth_requestAccounts\" });\n  }\n\n  /**\n   * Closes the connection to the network.\n   *\n   * @public\n   */\n  public closeConnection(): void {\n    //\n  }\n}\n\nexport { MetaMaskTransport };\n","import type { RequestArguments } from \"@open-rpc/client-js/build/ClientInterface.js\";\n\n/**\n * The transport interface.\n */\nabstract class ITransport {\n  /**\n   * Sends a request.\n   * @param requestObject - The request object. It contains the method and parameters.\n   * @returns The response.\n   */\n  abstract request<T>(requestObject: RequestArguments): Promise<T>;\n\n  /**\n   * Connects to the network.\n   */\n  abstract connect(): void;\n\n  /**\n   * Closes the connection to the network.\n   */\n  abstract closeConnection(): void;\n}\n\nexport { ITransport };\n","import { BaseError, type IBaseErrorParameters } from \"./BaseError.js\";\n\n/**\n * The interface for the parameters of the {@link InvalidShardIdError} constructor.\n */\ntype InvalidShardIdErrorParameters = {\n  shardId?: number;\n} & IBaseErrorParameters;\n\n/**\n * The error class for invalid shard ID.\n * This error is thrown when the provided shard ID is invalid.\n */\nclass InvalidShardIdError extends BaseError {\n  /**\n   * Creates an instance of InvalidShardIdError.\n   *\n   * @constructor\n   * @param {InvalidShardIdErrorParameters} param0 The error params.\n   * @param {*} param0.shardId The invalid shard ID.\n   * @param {*} param0....rest The remaining error params, see {@link IBaseErrorParameters}.\n   */\n  constructor({ shardId, ...rest }: InvalidShardIdErrorParameters) {\n    super(`Expected a valid shardId but got: ${shardId}`, { ...rest });\n  }\n}\n\nexport { InvalidShardIdError };\n","import { type Hex, bytesToHex, encodeFunctionData, hexToBytes } from \"viem\";\nimport type { PublicClient } from \"../../clients/PublicClient.js\";\nimport { ExternalMessageEnvelope } from \"../../encoding/externalMessage.js\";\nimport type { IReceipt } from \"../../types/IReceipt.js\";\nimport { getShardIdFromAddress } from \"../../utils/address.js\";\nimport { waitTillCompleted } from \"../../utils/receipt.js\";\nimport FaucetAbi from \"./Faucet.abi.json\";\n\n/**\n * Faucet is a special contract that is used to top up other contracts in the =nil; devnet.\n *\n \n * @class Faucet\n * @typedef {Faucet}\n */\nexport class Faucet {\n  /**\n   * The const address of the faucet contract.\n   *\n   * @static\n   * @type {\"0x000100000000000000000000000000000FA00CE7\"}\n   */\n  static address = \"0x000100000000000000000000000000000FA00CE7\" as const;\n  /**\n   * The client to be used with the faucet contract.\n   *\n   * @private\n   * @type {PublicClient}\n   */\n  private client: PublicClient;\n\n  /**\n   * Creates an instance of Faucet.\n   *\n   * @constructor\n   * @param {PublicClient} client\n   */\n  constructor(client: PublicClient) {\n    this.client = client;\n  }\n\n  /**\n   * Withdraws the specified value to the given address.\n   *\n   * @deprecated\n   * @async\n   * @param {Hex} address The address to which the withdrawal should be made.\n   * @param {bigint} [value=1000000000000000000n] The value that should be withdrawn to the given address.\n   * @param {?number} [seqno] The sequence number of the withdrawal message.\n   * @returns {Uint8Array} The hash of the withdrawal message.\n   */\n  async withdrawTo(address: Hex, value = 1000000000000000000n, seqno?: number) {\n    const [refinedSeqno, chainId] = await Promise.all([\n      seqno ?? this.client.getMessageCount(Faucet.address, \"latest\"),\n      this.client.chainId(),\n    ]);\n    const calldata = encodeFunctionData({\n      abi: FaucetAbi,\n      functionName: \"withdrawTo\",\n      args: [address.toLowerCase(), value],\n    });\n    const message = new ExternalMessageEnvelope({\n      isDeploy: false,\n      to: hexToBytes(Faucet.address),\n      chainId,\n      seqno: refinedSeqno,\n      data: hexToBytes(calldata),\n      authData: new Uint8Array(0),\n    });\n    const encodedMessage = message.encode();\n    await this.client.sendRawMessage(bytesToHex(encodedMessage));\n    return message.hash();\n  }\n\n  /**\n   * Withdraws the specified value to the given address with retries.\n   *\n   * @async\n   * @param {Hex} address The address to which the withdrawal should be made.\n   * @param {bigint} [value=1000000000000000000n] The value that should be withdrawn to the given address.\n   * @param {?number} [retry=3] How many times to retry the withdrawal in case of failure.\n   * @returns {Uint8Array} The hash of the withdrawal message.\n   */\n  async withdrawToWithRetry(\n    address: Hex,\n    value = 1000000000000000000n,\n    retry = 5,\n  ) {\n    let currentRetry = 0;\n    while (currentRetry++ < retry) {\n      try {\n        const [refinedSeqno, chainId] = await Promise.all([\n          this.client.getMessageCount(Faucet.address, \"latest\"),\n          this.client.chainId(),\n        ]);\n        const calldata = encodeFunctionData({\n          abi: FaucetAbi,\n          functionName: \"withdrawTo\",\n          args: [address.toLowerCase(), value],\n        });\n        const message = new ExternalMessageEnvelope({\n          isDeploy: false,\n          to: hexToBytes(Faucet.address),\n          chainId,\n          seqno: refinedSeqno,\n          data: hexToBytes(calldata),\n          authData: new Uint8Array(0),\n        });\n        const encodedMessage = message.encode();\n        await this.client.sendRawMessage(bytesToHex(encodedMessage));\n        const hash = bytesToHex(message.hash());\n        const receipts: IReceipt[] = await Promise.race([\n          new Promise<[]>((resolve) => setTimeout(() => resolve([]), 10000)),\n          waitTillCompleted(\n            this.client,\n            getShardIdFromAddress(Faucet.address),\n            hash,\n          ),\n        ]);\n        if (receipts.length === 0) {\n          continue;\n        }\n        if (receipts.some((receipt) => !receipt.success)) {\n          continue;\n        }\n        return hash;\n      } catch (error) {\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n        if (currentRetry >= retry) {\n          throw error;\n        }\n      }\n    }\n    throw new Error(\"Failed to withdraw to the given address\");\n  }\n}\n","export const code =\n  \"0x608060405260405162001eff38038062001eff8339818101604052810190620000299190620001c6565b805f90816200003991906200044c565b505062000530565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b620000a2826200005a565b810181811067ffffffffffffffff82111715620000c457620000c36200006a565b5b80604052505050565b5f620000d862000041565b9050620000e6828262000097565b919050565b5f67ffffffffffffffff8211156200010857620001076200006a565b5b62000113826200005a565b9050602081019050919050565b5f5b838110156200013f57808201518184015260208101905062000122565b5f8484015250505050565b5f620001606200015a84620000eb565b620000cd565b9050828152602081018484840111156200017f576200017e62000056565b5b6200018c84828562000120565b509392505050565b5f82601f830112620001ab57620001aa62000052565b5b8151620001bd8482602086016200014a565b91505092915050565b5f60208284031215620001de57620001dd6200004a565b5b5f82015167ffffffffffffffff811115620001fe57620001fd6200004e565b5b6200020c8482850162000194565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200026457607f821691505b6020821081036200027a57620002796200021f565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620002de7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002a1565b620002ea8683620002a1565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620003346200032e620003288462000302565b6200030b565b62000302565b9050919050565b5f819050919050565b6200034f8362000314565b620003676200035e826200033b565b848454620002ad565b825550505050565b5f90565b6200037d6200036f565b6200038a81848462000344565b505050565b5b81811015620003b157620003a55f8262000373565b60018101905062000390565b5050565b601f8211156200040057620003ca8162000280565b620003d58462000292565b81016020851015620003e5578190505b620003fd620003f48562000292565b8301826200038f565b50505b505050565b5f82821c905092915050565b5f620004225f198460080262000405565b1980831691505092915050565b5f6200043c838362000411565b9150826002028217905092915050565b620004578262000215565b67ffffffffffffffff8111156200047357620004726200006a565b5b6200047f82546200024c565b6200048c828285620003b5565b5f60209050601f831160018114620004c2575f8415620004ad578287015190505b620004b985826200042f565b86555062000528565b601f198416620004d28662000280565b5f5b82811015620004fb57848901518255600182019150602085019450602081019050620004d4565b868310156200051b578489015162000517601f89168262000411565b8355505b6001600288020188555050505b505050505050565b6119c1806200053e5f395ff3fe60806040526004361061007e575f3560e01c80639647c0161161004d5780639647c0161461013d578063be4b177214610159578063c248ab2014610175578063f5b8214a1461019157610085565b80632bb1ae7c146100895780634f7d1d58146100b157806355b517cb146100d9578063796d7f561461010157610085565b3661008557005b5f80fd5b348015610094575f80fd5b506100af60048036038101906100aa9190610bc3565b6101b9565b005b3480156100bc575f80fd5b506100d760048036038101906100d29190610dd3565b610252565b005b3480156100e4575f80fd5b506100ff60048036038101906100fa9190610e88565b61034e565b005b34801561010c575f80fd5b5061012760048036038101906101229190610f32565b6103f2565b6040516101349190610f9e565b60405180910390f35b61015760048036038101906101529190610fb7565b6104d1565b005b610173600480360381019061016e9190610ff5565b6105d3565b005b61018f600480360381019061018a91906110d1565b6106d5565b005b34801561019c575f80fd5b506101b760048036038101906101b2919061124e565b6107bd565b005b6101c1610864565b15610201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f8906113ba565b60405180910390fd5b61024e5a83838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050610970565b5050565b61025a610864565b1561029a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610291906113ba565b60405180910390fd5b5f8473ffffffffffffffffffffffffffffffffffffffff16838590846040516102c39190611444565b5f60405180830381858888f193505050503d805f81146102fe576040519150601f19603f3d011682016040523d82523d5f602084013e610303565b606091505b5050905080610347576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033e906114a4565b60405180910390fd5b5050505050565b610356610864565b15610396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038d906113ba565b60405180910390fd5b6103e887878888888888888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505061098e565b5050505050505050565b5f6104c85f8054610402906114ef565b80601f016020809104026020016040519081016040528092919081815260200182805461042e906114ef565b80156104795780601f1061045057610100808354040283529160200191610479565b820191905f5260205f20905b81548152906001019060200180831161045c57829003601f168201915b50505050508585858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050506109af565b90509392505050565b6104d9610864565b15610519576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610510906113ba565b60405180910390fd5b5f3073ffffffffffffffffffffffffffffffffffffffff1690505f61271090506105cc72012222222222222222222222222222222222225f80845f600a87610561919061154c565b888b8b61056e575f610570565b305b604051602401610582939291906115ab565b60405160208183030381529060405263e7d3fe6b60e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061098e565b5050505050565b6105db610864565b1561061b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610612906113ba565b60405180910390fd5b5f3073ffffffffffffffffffffffffffffffffffffffff1690505f61c35090506106ce72012222222222222222222222222222222222225f80845f600a876002610665919061154c565b61066f919061154c565b888b8b604051602401610684939291906115ab565b604051602081830303815290604052630ad58d2f60e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061098e565b5050505050565b6106dd610864565b1561071d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610714906113ba565b60405180910390fd5b5f5a90506107b672012222222222222222222222222222222222225f80845f600a87610749919061154c565b8a5f8b8b610757575f610759565b305b60405160240161076c9493929190611622565b604051602081830303815290604052637166eb4960e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061098e565b5050505050565b6107c5610864565b15610805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc906113ba565b60405180910390fd5b6108588989898989888a89898080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050610ab5565b50505050505050505050565b5f60605f8060ff73ffffffffffffffffffffffffffffffffffffffff168360405161088f9190611444565b5f60405180830381855afa9150503d805f81146108c7576040519150601f19603f3d011682016040523d82523d5f602084013e6108cc565b606091505b509150915081610911576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610908906116b6565b60405180910390fd5b5f815111610954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094b90611744565b60405180910390fd5b808060200190518101906109689190611776565b935050505090565b5f815190505f8082602085015f60fc88f1610989575f80fd5b505050565b5f60606109a1898989898989878a610ab5565b915050979650505050505050565b5f808484846040516020016109c6939291906117e9565b60405160208183030381529060405290505f80606060fe73ffffffffffffffffffffffffffffffffffffffff1684604051610a019190611444565b5f60405180830381855afa9150503d805f8114610a39576040519150601f19603f3d011682016040523d82523d5f602084013e610a3e565b606091505b50809250819450505082610a87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7e906116b6565b60405180910390fd5b5f81511115610aa75780806020019051810190610aa49190611776565b91505b819450505050509392505050565b5f8060fd73ffffffffffffffffffffffffffffffffffffffff16632495aa6d86888d8d8d8d8b8b6040518963ffffffff1660e01b8152600401610afe9796959493929190611910565b60206040518083038185885af1158015610b1a573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190610b3f9190611776565b90508091505098975050505050505050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f8083601f840112610b8357610b82610b62565b5b8235905067ffffffffffffffff811115610ba057610b9f610b66565b5b602083019150836001820283011115610bbc57610bbb610b6a565b5b9250929050565b5f8060208385031215610bd957610bd8610b5a565b5b5f83013567ffffffffffffffff811115610bf657610bf5610b5e565b5b610c0285828601610b6e565b92509250509250929050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610c3782610c0e565b9050919050565b610c4781610c2d565b8114610c51575f80fd5b50565b5f81359050610c6281610c3e565b92915050565b5f819050919050565b610c7a81610c68565b8114610c84575f80fd5b50565b5f81359050610c9581610c71565b92915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610ce582610c9f565b810181811067ffffffffffffffff82111715610d0457610d03610caf565b5b80604052505050565b5f610d16610b51565b9050610d228282610cdc565b919050565b5f67ffffffffffffffff821115610d4157610d40610caf565b5b610d4a82610c9f565b9050602081019050919050565b828183375f83830152505050565b5f610d77610d7284610d27565b610d0d565b905082815260208101848484011115610d9357610d92610c9b565b5b610d9e848285610d57565b509392505050565b5f82601f830112610dba57610db9610b62565b5b8135610dca848260208601610d65565b91505092915050565b5f805f8060808587031215610deb57610dea610b5a565b5b5f610df887828801610c54565b9450506020610e0987828801610c87565b9350506040610e1a87828801610c87565b925050606085013567ffffffffffffffff811115610e3b57610e3a610b5e565b5b610e4787828801610da6565b91505092959194509250565b5f8115159050919050565b610e6781610e53565b8114610e71575f80fd5b50565b5f81359050610e8281610e5e565b92915050565b5f805f805f805f60c0888a031215610ea357610ea2610b5a565b5b5f610eb08a828b01610c54565b9750506020610ec18a828b01610c54565b9650506040610ed28a828b01610c87565b9550506060610ee38a828b01610e74565b9450506080610ef48a828b01610c87565b93505060a088013567ffffffffffffffff811115610f1557610f14610b5e565b5b610f218a828b01610b6e565b925092505092959891949750929550565b5f805f60408486031215610f4957610f48610b5a565b5b5f610f5686828701610c87565b935050602084013567ffffffffffffffff811115610f7757610f76610b5e565b5b610f8386828701610b6e565b92509250509250925092565b610f9881610e53565b82525050565b5f602082019050610fb15f830184610f8f565b92915050565b5f8060408385031215610fcd57610fcc610b5a565b5b5f610fda85828601610c87565b9250506020610feb85828601610e74565b9150509250929050565b5f806040838503121561100b5761100a610b5a565b5b5f61101885828601610c87565b925050602061102985828601610c54565b9150509250929050565b5f67ffffffffffffffff82111561104d5761104c610caf565b5b61105682610c9f565b9050602081019050919050565b5f61107561107084611033565b610d0d565b90508281526020810184848401111561109157611090610c9b565b5b61109c848285610d57565b509392505050565b5f82601f8301126110b8576110b7610b62565b5b81356110c8848260208601611063565b91505092915050565b5f805f606084860312156110e8576110e7610b5a565b5b5f6110f586828701610c87565b935050602084013567ffffffffffffffff81111561111657611115610b5e565b5b611122868287016110a4565b925050604061113386828701610e74565b9150509250925092565b5f67ffffffffffffffff82111561115757611156610caf565b5b602082029050602081019050919050565b5f80fd5b5f6040828403121561118157611180611168565b5b61118b6040610d0d565b90505f61119a84828501610c87565b5f8301525060206111ad84828501610c87565b60208301525092915050565b5f6111cb6111c68461113d565b610d0d565b905080838252602082019050604084028301858111156111ee576111ed610b6a565b5b835b818110156112175780611203888261116c565b8452602084019350506040810190506111f0565b5050509392505050565b5f82601f83011261123557611234610b62565b5b81356112458482602086016111b9565b91505092915050565b5f805f805f805f805f6101008a8c03121561126c5761126b610b5a565b5b5f6112798c828d01610c54565b995050602061128a8c828d01610c54565b985050604061129b8c828d01610c54565b97505060606112ac8c828d01610c87565b96505060806112bd8c828d01610e74565b95505060a08a013567ffffffffffffffff8111156112de576112dd610b5e565b5b6112ea8c828d01611221565b94505060c06112fb8c828d01610c87565b93505060e08a013567ffffffffffffffff81111561131c5761131b610b5e565b5b6113288c828d01610b6e565b92509250509295985092959850929598565b5f82825260208201905092915050565b7f547279696e6720746f2063616c6c2065787465726e616c2066756e6374696f6e5f8201527f207769746820696e7465726e616c206d65737361676500000000000000000000602082015250565b5f6113a460368361133a565b91506113af8261134a565b604082019050919050565b5f6020820190508181035f8301526113d181611398565b9050919050565b5f81519050919050565b5f81905092915050565b5f5b838110156114095780820151818401526020810190506113ee565b5f8484015250505050565b5f61141e826113d8565b61142881856113e2565b93506114388185602086016113ec565b80840191505092915050565b5f61144f8284611414565b915081905092915050565b7f43616c6c206661696c65640000000000000000000000000000000000000000005f82015250565b5f61148e600b8361133a565b91506114998261145a565b602082019050919050565b5f6020820190508181035f8301526114bb81611482565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061150657607f821691505b602082108103611519576115186114c2565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61155682610c68565b915061156183610c68565b925082820261156f81610c68565b915082820484148315176115865761158561151f565b5b5092915050565b61159681610c68565b82525050565b6115a581610c2d565b82525050565b5f6060820190506115be5f83018661158d565b6115cb602083018561158d565b6115d8604083018461159c565b949350505050565b5f81519050919050565b5f6115f4826115e0565b6115fe818561133a565b935061160e8185602086016113ec565b61161781610c9f565b840191505092915050565b5f6080820190506116355f83018761158d565b611642602083018661159c565b818103604083015261165481856115ea565b9050611663606083018461159c565b95945050505050565b7f507265636f6d70696c656420636f6e74726163742063616c6c206661696c65645f82015250565b5f6116a060208361133a565b91506116ab8261166c565b602082019050919050565b5f6020820190508181035f8301526116cd81611694565b9050919050565b7f2749535f494e5445524e414c5f4d455353414745272072657475726e7320696e5f8201527f76616c6964206461746100000000000000000000000000000000000000000000602082015250565b5f61172e602a8361133a565b9150611739826116d4565b604082019050919050565b5f6020820190508181035f83015261175b81611722565b9050919050565b5f8151905061177081610e5e565b92915050565b5f6020828403121561178b5761178a610b5a565b5b5f61179884828501611762565b91505092915050565b5f82825260208201905092915050565b5f6117bb826113d8565b6117c581856117a1565b93506117d58185602086016113ec565b6117de81610c9f565b840191505092915050565b5f6060820190508181035f83015261180181866117b1565b9050611810602083018561158d565b818103604083015261182281846117b1565b9050949350505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61185e81610c68565b82525050565b604082015f8201516118785f850182611855565b50602082015161188b6020850182611855565b50505050565b5f61189c8383611864565b60408301905092915050565b5f602082019050919050565b5f6118be8261182c565b6118c88185611836565b93506118d383611846565b805f5b838110156119035781516118ea8882611891565b97506118f5836118a8565b9250506001810190506118d6565b5085935050505092915050565b5f60e0820190506119235f83018a610f8f565b611930602083018961159c565b61193d604083018861159c565b61194a606083018761159c565b611957608083018661158d565b81810360a083015261196981856118b4565b905081810360c083015261197d81846117b1565b90509897505050505050505056fea26469706673582212201e973eb5c7959750c4e77210d3e9a58cf9005e2500e827031ba7d910dcc1907364736f6c63430008150033\";\n","import type { Abi } from \"abitype\";\nimport invariant from \"tiny-invariant\";\nimport { bytesToHex, encodeFunctionData, hexToBytes } from \"viem\";\nimport type { PublicClient } from \"../../clients/PublicClient.js\";\nimport { prepareDeployPart } from \"../../encoding/deployPart.js\";\nimport { externalMessageEncode } from \"../../encoding/externalMessage.js\";\nimport type { ISigner } from \"../../signers/index.js\";\nimport type { IDeployData } from \"../../types/IDeployData.js\";\nimport { getShardIdFromAddress, refineAddress } from \"../../utils/address.js\";\nimport { refineCompressedPublicKey, refineSalt } from \"../../utils/refiners.js\";\nimport { code } from \"./Wallet-bin.js\";\nimport WalletAbi from \"./Wallet.abi.json\";\nimport type {\n  DeployParams,\n  RequestParams,\n  SendMessageParams,\n  SendSyncMessageParams,\n  WalletV1Config,\n} from \"./types/index.js\";\n\n/**\n * WalletV1 is a class used for performing operations on the cluster that require authentication. \n *\n \n * @class WalletV1\n * @typedef {WalletV1}\n */\nexport class WalletV1 {\n  /**\n   * The wallet bytecode.\n   *\n   * @static\n   * @type {*}\n   */\n  static code = hexToBytes(code);\n  /**\n   * The wallet ABI.\n   *\n   * @static\n   * @type {Abi}\n   */\n  static abi = WalletAbi as Abi;\n\n  /**\n   * Calculates the address of the new wallet.\n   *\n   * @static\n   * @param {{\n   *     pubKey: Uint8Array;\n   *     shardId: number;\n   *     salt: Uint8Array | bigint;\n   *   }} param0 The object representing the config for address calculation.\n   * @param {Uint8Array} param0.pubKey The wallet public key.\n   * @param {number} param0.shardId The ID of the shard where the wallet should be deployed.\n   * @param {Uint8Array | bigint} param0.salt Arbitrary data change the address.\n   * @returns {Uint8Array} The address of the new wallet.\n   * @example\n   * import {\n       LocalECDSAKeySigner,\n       WalletV1,\n       generateRandomPrivateKey,\n     } from '@nilfoundation/niljs';\n\n   * const signer = new LocalECDSAKeySigner({\n       privateKey: generateRandomPrivateKey(),\n     });\n\n     const pubkey = await signer.getPublicKey();\n\n   * const anotherAddress = WalletV1.calculateWalletAddress({\n       pubKey: pubkey,\n       shardId: 1,\n       salt: 200n,\n     });\n   */\n  static calculateWalletAddress({\n    pubKey,\n    shardId,\n    salt,\n  }: {\n    pubKey: Uint8Array;\n    shardId: number;\n    salt: Uint8Array | bigint;\n  }) {\n    const { address } = prepareDeployPart({\n      abi: WalletAbi as Abi,\n      bytecode: WalletV1.code,\n      args: [bytesToHex(pubKey)],\n      salt: salt,\n      shard: shardId,\n    });\n    return address;\n  }\n\n  /**\n   * The wallet public key.\n   *\n   * @type {Uint8Array}\n   */\n  pubkey: Uint8Array;\n  /**\n   * The ID of the shard where the wallet is deployed.\n   *\n   * @type {number}\n   */\n  shardId: number;\n  /**\n   * The client for interacting with the wallet.\n   *\n   * @type {PublicClient}\n   */\n  client: PublicClient;\n  /**\n   * Arbitrary data for changing the wallet address.\n   *\n   * @type {Uint8Array}\n   */\n  salt?: Uint8Array;\n  /**\n   * The wallet signer.\n   *\n   * @type {ISigner}\n   */\n  signer: ISigner;\n  /**\n   * The wallet address.\n   *\n   * @type {Uint8Array}\n   */\n  address: Uint8Array;\n\n  /**\n   * Creates an instance of WalletV1.\n   *\n   * @constructor\n   * @param {WalletV1Config} param0 The object representing the initial wallet config. See {@link WalletV1Config}.\n   * @param {WalletV1Config} param0.pubkey The wallet public key.\n   * @param {WalletV1Config} param0.shardId The ID of the shard where the wallet is deployed.\n   * @param {WalletV1Config} param0.address The wallet address. If address is not provided it will be calculated with salt.\n   * @param {WalletV1Config} param0.client The client for interacting with the wallet.\n   * @param {WalletV1Config} param0.salt The arbitrary data for changing the wallet address.\n   * @param {WalletV1Config} param0.signer The wallet signer.\n   */\n  constructor({\n    pubkey,\n    shardId,\n    address,\n    client,\n    salt,\n    signer,\n  }: WalletV1Config) {\n    this.pubkey = refineCompressedPublicKey(pubkey);\n    this.client = client;\n    this.signer = signer;\n    invariant(\n      !(salt && address),\n      \"You should use salt and shard for calculating address or address itself, not both to avoid issue.\",\n    );\n    this.address = address\n      ? refineAddress(address)\n      : WalletV1.calculateWalletAddress({\n          pubKey: this.pubkey,\n          shardId,\n          salt,\n        });\n    if (salt) {\n      this.salt = refineSalt(salt);\n    }\n    this.shardId = getShardIdFromAddress(this.address);\n  }\n\n  /**\n   * Converts the wallet address into a hexadecimal.\n   *\n   * @returns {String}\n   */\n  getAddressHex() {\n    return bytesToHex(this.address);\n  }\n\n  /**\n   * Deploys the wallet.\n   *\n   * @async\n   * @param {boolean} [waitTillConfirmation=true] The flag that determines whether the function waits for deployment confirmation before exiting.\n   * @returns {Uint8Array} The hash of the deployment transaction.\n   * @example\n   * import {\n       Faucet,\n       HttpTransport,\n       LocalECDSAKeySigner,\n       PublicClient,\n       WalletV1,\n       generateRandomPrivateKey,\n     } from '@nilfoundation/niljs';\n   * const client = new PublicClient({\n       transport: new HttpTransport({\n         endpoint: \"http://127.0.0.1:8529\",\n       }),\n       shardId: 1,\n     });\n   * const signer = new LocalECDSAKeySigner({\n       privateKey: generateRandomPrivateKey(),\n     });\n   * const faucet = new Faucet(client);\n   * await faucet.withdrawTo(walletAddress, 100000n);\n   * const pubkey = await signer.getPublicKey();\n   * const wallet = new WalletV1({\n       pubkey: pubkey,\n       salt: 100n,\n       shardId: 1,\n       client,\n       signer,\n       address: WalletV1.calculateWalletAddress({\n         pubKey: pubkey,\n         shardId: 1,\n         salt: 100n,\n       }),\n     });\n   * await wallet.selfDeploy(true);\n   */\n  async selfDeploy(waitTillConfirmation = true) {\n    invariant(\n      typeof this.salt !== \"undefined\",\n      \"Salt is required for external deployment. Please provide salt for walelt\",\n    );\n\n    const [balance, code] = await Promise.all([\n      await this.client.getBalance(this.getAddressHex(), \"latest\"),\n      await this.client\n        .getCode(this.getAddressHex(), \"latest\")\n        .catch(() => Uint8Array.from([])),\n    ]);\n\n    invariant(code.length === 0, \"Contract already deployed\");\n    invariant(balance > 0n, \"Insufficient balance\");\n\n    const { data } = prepareDeployPart({\n      abi: WalletAbi as Abi,\n      bytecode: WalletV1.code,\n      args: [bytesToHex(this.pubkey)],\n      salt: this.salt,\n      shard: this.shardId,\n    });\n\n    const { hash } = await this.requestToWallet({\n      data: data,\n      deploy: true,\n      seqno: 0,\n    });\n\n    if (waitTillConfirmation) {\n      while (true) {\n        const code = await this.client.getCode(this.getAddressHex(), \"latest\");\n        if (code.length > 0) {\n          break;\n        }\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n    }\n    return hash;\n  }\n\n  /**\n   * Checks the deployment status.\n   *\n   * @async\n   * @returns {Promise<boolean>} The current deployment status.\n   */\n  async checkDeploymentStatus(): Promise<boolean> {\n    const code = await this.client.getCode(this.getAddressHex(), \"latest\");\n    return code.length > 0;\n  }\n\n  /**\n   * Performs a request to the wallet.\n   *\n   * @async\n   * @param {RequestParams} requestParams The object representing the request parameters.\n   * @param {boolean} [send=true] The flag that determines whether the request is sent when the function is called.\n   * @returns {Promise<{ raw: Uint8Array; hash: Uint8Array }>} The message bytecode and hash.\n   */\n  async requestToWallet(\n    requestParams: RequestParams,\n    send = true,\n  ): Promise<{ raw: Uint8Array; hash: Uint8Array }> {\n    const [seqno, chainId] = await Promise.all([\n      requestParams.seqno ??\n        this.client.getMessageCount(this.getAddressHex(), \"latest\"),\n      requestParams.chainId ?? this.client.chainId(),\n    ]);\n    const encodedMessage = await externalMessageEncode(\n      {\n        isDeploy: requestParams.deploy,\n        to: this.address,\n        chainId: chainId,\n        seqno,\n        data: requestParams.data,\n      },\n      this.signer,\n    );\n    if (send) await this.client.sendRawMessage(encodedMessage.raw);\n    return encodedMessage;\n  }\n\n  /**\n   * Send a message via the wallet.\n   *\n   * @async\n   * @param {SendMessageParams} param0 The object representing the message params.\n   * @param {SendMessageParams} param0.to The address where the message should be sent.\n   * @param {SendMessageParams} param0.refundTo The address where the gas cost should be refunded.\n   * @param {SendMessageParams} param0.bounceTo The address where the message value should be refunded in case of failure.\n   * @param {SendMessageParams} param0.tokens The tokens to be sent with the message.\n   * @param {SendMessageParams} param0.data The message bytecode.\n   * @param {SendMessageParams} param0.deploy The flag that determines whether the message is a deploy message.\n   * @param {SendMessageParams} param0.seqno The message sequence number.\n   * @param {SendMessageParams} param0.gas The message gas.\n   * @param {SendMessageParams} param0.value The message value.\n   * @param {SendMessageParams} param0.chainId The message chain id.\n   * @returns {unknown} The message hash.\n   * @example\n   * const anotherAddress = WalletV1.calculateWalletAddress({\n   *     pubKey: pubkey,\n   *     shardId: 1,\n   *     salt: 200n,\n   *   });\n   * await wallet.sendMessage({\n   *     to: anotherAddress,\n   *     value: 10n,\n   *     gas: 100000n,\n   *   });\n   */\n  async sendMessage({\n    to,\n    refundTo,\n    bounceTo,\n    data,\n    deploy,\n    seqno,\n    gas,\n    value,\n    tokens,\n    chainId,\n  }: SendMessageParams) {\n    const hexTo = bytesToHex(refineAddress(to));\n    const hexRefundTo = bytesToHex(refineAddress(refundTo ?? this.address));\n    const hexBounceTo = bytesToHex(refineAddress(bounceTo ?? this.address));\n    const hexData = data\n      ? data instanceof Uint8Array\n        ? bytesToHex(data)\n        : data\n      : \"0x\";\n\n    const callData = encodeFunctionData({\n      abi: WalletAbi,\n      functionName: \"asyncCall\",\n      args: [\n        hexTo,\n        hexRefundTo,\n        hexBounceTo,\n        gas,\n        !!deploy,\n        tokens ?? [],\n        value ?? 0n,\n        hexData,\n      ],\n    });\n\n    const { hash } = await this.requestToWallet({\n      data: hexToBytes(callData),\n      deploy: false,\n      seqno,\n      chainId,\n    });\n\n    return bytesToHex(hash);\n  }\n\n  /**\n   * Send a raw signed message via the wallet.\n   *\n   * @async\n   * @param {Uint8Array} rawMessage The message bytecode.\n   * @returns {unknown} The message hash.\n   */\n  async sendRawInternalMessage(rawMessage: Uint8Array) {\n    const { hash } = await this.requestToWallet({\n      data: rawMessage,\n      deploy: false,\n    });\n\n    return bytesToHex(hash);\n  }\n\n  /**\n   * Deploys a new smart contract via the wallet.\n   *\n   * @async\n   * @param {DeployParams} param0 The object representing the contract deployment params.\n   * @param {DeployParams} param0.shardId The ID of the shard where the contract should be deployed.\n   * @param {DeployParams} param0.bytecode The contract bytecode.\n   * @param {DeployParams} param0.abi The contract ABI.\n   * @param {DeployParams} param0.args The arbitrary arguments for deployment.\n   * @param {DeployParams} param0.salt The arbitrary data for changing the contract address.\n   * @param {DeployParams} param0.value The deployment message value.\n   * @param {DeployParams} param0.gas The deployment message gas.\n   * @param {DeployParams} param0.seqno The deployment message seqno.\n   * @param {DeployParams} param0.chainId The deployment message chain id.\n   * @returns {unknown} The object containing the deployment message hash and the contract address.\n   */\n  async deployContract({\n    shardId,\n    bytecode,\n    abi,\n    args,\n    salt,\n    value,\n    gas,\n    seqno,\n    chainId,\n  }: DeployParams) {\n    let deployData: IDeployData;\n    if (abi && args) {\n      deployData = {\n        shard: shardId,\n        bytecode,\n        abi: abi,\n        args: args,\n        salt,\n      };\n    } else {\n      invariant(\n        abi || args,\n        \"ABI and args should be provided together or not provided at all.\",\n      );\n      deployData = {\n        shard: shardId,\n        bytecode,\n        salt,\n      };\n    }\n\n    const { data, address } = prepareDeployPart(deployData);\n\n    const hash = await this.sendMessage({\n      to: address,\n      refundTo: this.getAddressHex(),\n      data,\n      value: value ?? 0n,\n      deploy: true,\n      gas,\n      seqno,\n      chainId,\n    });\n\n    return {\n      hash,\n      address: bytesToHex(address),\n    };\n  }\n\n  /**\n   * Send a message synchronously via the wallet.\n   *\n   * @async\n   * @param {SendSyncMessageParams} param0 The object representing the message params.\n   * @param {SendSyncMessageParams} param0.to The address where the message should be sent.\n   * @param {SendSyncMessageParams} param0.data The message bytecode.\n   * @param {SendMessageParams} param0.seqno The message sequence number.\n   * @param {SendMessageParams} param0.gas The message gas.\n   * @param {SendMessageParams} param0.value The message value.\n   * @returns {unknown} The message hash.\n   * @example\n   * const anotherAddress = WalletV1.calculateWalletAddress({\n   *     pubKey: pubkey,\n   *     shardId: 1,\n   *     salt: 200n,\n   *   });\n   * await wallet.sendMessage({\n   *     to: anotherAddress,\n   *     value: 10n,\n   *     gas: 100000n,\n   *   });\n   */\n  async syncSendMessage({\n    to,\n    data,\n    seqno,\n    gas,\n    value,\n  }: SendSyncMessageParams) {\n    const hexTo = bytesToHex(refineAddress(to));\n    const hexData = data\n      ? data instanceof Uint8Array\n        ? bytesToHex(data)\n        : data\n      : \"0x\";\n\n    const callData = encodeFunctionData({\n      abi: WalletAbi,\n      functionName: \"syncCall\",\n      args: [hexTo, gas, value, hexData],\n    });\n\n    const { hash } = await this.requestToWallet({\n      data: hexToBytes(callData),\n      deploy: false,\n      seqno,\n    });\n\n    return bytesToHex(hash);\n  }\n\n  /**\n   * Returns the wallet balance.\n   *\n   * @async\n   * @returns {unknown} The wallet balance.\n   */\n  async getBalance() {\n    return this.client.getBalance(this.getAddressHex(), \"latest\");\n  }\n}\n","import type { Abi } from \"abitype\";\nimport MinterAbi from \"./Minter.abi.json\";\n\n/**\n * The ABI of the minter contract.\n */\nexport const MINTER_ABI: Abi = MinterAbi as Abi;\n\n/**\n * The address of the minter contract.\n */\nexport const MINTER_ADDRESS = \"0x0001222222222222222222222222222222222222\";\n"],"names":["HEX_REGEX","isHexString","value","removeHexPrefix","str","addHexPrefix","hexToNumber","hex","hexToBigInt","stringToHex","i","toHex","numberToHexUnpadded","bytesToHex","bytesToString","bytes","poseidonHash","poseidon","setHasher","a","b","hash","concatBytes","arr","hashObjectToUint8Array","uint8ArrayToHashObject","basicTypes","UintNumberType","UintBigintType","BooleanType","Bytes20","ByteVectorType","SszMessageSchema","ContainerType","ByteListType","SszSignedMessageSchema","ADDRESS_REGEX","isAddress","getShardIdFromAddress","address","calculateAddress","shardId","code","salt","shardPart","numberToBytesBE","hashPart","refineAddress","hexToBytes","refineSalt","invariant","refineCompressedPublicKey","pubkey","res","prepareDeployPart","data","byteSalt","constructorData","encodeDeployData","bytecode","ExternalMessageEnvelope","isDeploy","to","chainId","seqno","authData","signer","signature","raw","client","InternalMessageEnvelope","externalDeploymentMessage","deployData","externalMessageEncode","params","r$4","BaseError","message","isOperational","cause","docsPath","t$3","blockNumberOrHash","rest","masterShardId","isValidBlock","block","assertIsHexString","assertIsBuffer","assertIsValidPrivateKey","privateKey","assertIsValidSendMessageData","sendMessage","gasPrice","gasLimit","from","assertIsValidDeployData","deployContractData","assertIsValidShardId","assertIsAddress","assertIsValidBlock","InvalidShardIdError","e$1","config","requestObject","BaseClient","fullTx","error","BlockNotFoundError","blockNumber","tokenMap","key","callArgs","sendData","numberToHex","privateKeyFromPhrase","mnemonic","mnemonicToSeedSync","getPublicKey","isCompressed","publicKey","secp256k1","getAddressFromPublicKey","publickKeyWithoutPrefix","pubKeyBytes","LocalECDSAKeySigner","privKey","r","t","recovery","s","pubKey","generateRandomPrivateKey","waitTillCompleted","receipts","hashes","cur","receipt","x","resolve","convertEthToWei","eth","createRPCClient","endpoint","transport","HTTPTransport","requestManager","RequestManager","Client","r$1","MetaMaskTransport","t$1","d$1","_Faucet","refinedSeqno","calldata","encodeFunctionData","FaucetAbi","encodedMessage","retry","currentRetry","Faucet","_WalletV1","WalletAbi","waitTillConfirmation","balance","requestParams","send","refundTo","bounceTo","deploy","gas","tokens","hexTo","hexRefundTo","hexBounceTo","hexData","callData","rawMessage","abi","args","WalletV1","MINTER_ABI","MinterAbi","MINTER_ADDRESS"],"mappings":"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"}