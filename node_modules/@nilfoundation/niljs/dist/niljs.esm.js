/**!
 * @nilfoundation/niljs v0.9.0
 *
 * @copyright (c) 2024 =nil; Foundation.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
import{numberToHexUnpadded as O,bytesToHex as v,concatBytes as H,numberToBytesBE as m,hexToBytes as o0}from"@noble/curves/abstract/utils";
import{hexToBytes as o,encodeDeployData as c0,bytesToHex as d,numberToHex as u0,encodeFunctionData as A}from"viem";
import{poseidon as l0}from"@iden3/js-crypto";import{setHasher as y0,hashObjectToUint8Array as F,uint8ArrayToHashObject as p0}from"@chainsafe/persistent-merkle-tree";
import{UintNumberType as P,UintBigintType as h0,BooleanType as m0,ByteVectorType as g0,ContainerType as V,
ByteListType as j}from"@chainsafe/ssz";import i from"tiny-invariant";import{secp256k1 as U}from"@noble/curves/secp256k1";
import{mnemonicToSeedSync as w0}from"@scure/bip39";import{HTTPTransport as T0,RequestManager as I0,Client as v0}from"@open-rpc/client-js";
const x0=/^[0-9a-fA-F]+$/,N=t=>typeof t=="string"&&t.startsWith("0x")&&x0.test(g(t)),g=t=>t.startsWith(
"0x")?t.slice(2):t,l=t=>`0x${g(t)}`;const D=t=>Number.parseInt(g(t),16),x=t=>BigInt(l(t));const M0=t=>{
let e="";for(let f=0;f<t.length;f++)e+=t.charCodeAt(f).toString(16);return e},k=t=>typeof t=="string"?
`0x${M0(t)}`:typeof t=="number"?`0x${O(t)}`:typeof t=="bigint"?`0x${O(t)}`:typeof t=="boolean"?`0x${(t?
1:0).toString(16)}`:`0x${v(t)}`;const q0=t=>new TextDecoder("utf8").decode(t);const M=t=>l0.hashBytesX(
t,16);y0({digest64(t,e){const f=M(H(t,e)),a=new Uint8Array(32);for(let s=0;s<32;s++)a[31-s]=Number(f>>
BigInt(s*8)&BigInt(255));return a},digest64HashObjects(t,e){const f=M(H(F(t),F(e))),a=new Uint8Array(
32);for(let s=0;s<32;s++)a[31-s]=Number(f>>BigInt(s*8)&BigInt(255));return p0(a)}});const R={Uint8:new P(
1),Uint32:new P(4),Uint64:new P(8),UintBn256:new h0(32),Bool:new m0},$0=new g0(20),K=new V({deploy:R.
Bool,to:$0,chainId:R.Uint64,seqno:R.Uint64,data:new j(24576)}),q=new V({...K.fields,authData:new j(256)});
const B0=/^0x[0-9a-fA-F]{40}$/,E=t=>typeof t=="string"&&B0.test(t),W=t=>typeof t=="string"?Number.parseInt(
t.slice(2,6),16):t[0]<<8|t[1],z=(t,e,f)=>{if(!Number.isInteger(t))throw new Error("Shard ID must be \
an integer");if(f.length!==32)throw new Error("Salt must be 32 bytes");if(e.length===0)throw new Error(
"Code must not be empty");if(t<0||t>65535)throw new Error("Invalid shard ID");const a=new Uint8Array(
e.length+32);a.set(e),a.set(f,e.length);const s=M(a),n=m(t,2),b=m(s,32);return new Uint8Array([...n,
...b.slice(14)])},T=t=>{if(typeof t=="string"){const e=o(t);if(e.length!==20)throw new Error("Invali\
d address length");return e}if(t.length!==20)throw new Error("Invalid address length");return t};const G=t=>typeof t==
"bigint"?o(l(t.toString(16).padStart(64,"0"))).slice(0,32):(i(t.length===32,"Salt must be 32 bytes"),
t),A0=t=>{const e=typeof t=="string"?o(t):t;return i(t.length===33,"Invalid pubkey length"),e};const S=t=>{
const e=G(t.salt);let f;t.abi?f=o(c0({abi:t.abi,bytecode:typeof t.bytecode=="string"?t.bytecode:d(t.
bytecode),args:t.args||[]})):f=typeof t.bytecode=="string"?o(t.bytecode):t.bytecode;const a=new Uint8Array(
[...f,...e]),s=z(t.shard,f,e);return{data:a,address:s}};class ${constructor({isDeploy:e,to:f,chainId:a,
seqno:s,data:n,authData:b}){this.isDeploy=e,this.to=f,this.chainId=a,this.seqno=s,this.data=n,this.authData=
b}encode(){return q.serialize({seqno:this.seqno,chainId:this.chainId,to:this.to,data:this.data,deploy:this.
isDeploy,authData:this.authData})}hash(){return q.hashTreeRoot({seqno:this.seqno,chainId:this.chainId,
to:this.to,data:this.data,deploy:this.isDeploy,authData:this.authData})}signingHash(){return K.hashTreeRoot(
{seqno:this.seqno,chainId:this.chainId,to:this.to,data:this.data,deploy:this.isDeploy})}async encodeWithSignature(e){
const f=await this.sign(e),a=q.serialize({seqno:this.seqno,chainId:this.chainId,to:this.to,data:this.
data,deploy:this.isDeploy,authData:f}),s=q.hashTreeRoot({seqno:this.seqno,chainId:this.chainId,to:this.
to,data:this.data,deploy:this.isDeploy,authData:f});return{raw:a,hash:s}}async sign(e){return e.sign(
this.signingHash())}async updateAuthdata(e){return this.authData=await this.sign(e),this.authData}hexAddress(){
return d(this.to)}send(e){return e.sendRawMessage(this.encode())}}class D0{}const k0=(t,e)=>{const{data:f,
address:a}=S(t);return new $({isDeploy:!0,to:a,chainId:e,seqno:0,data:f,authData:new Uint8Array(0)})},
X=async(t,e)=>await new $({...t,authData:new Uint8Array(0)}).encodeWithSignature(e);let Y=class n0 extends Error{constructor(e,{
isOperational:f=!0,cause:a,docsPath:s}={}){super(),this.name=this.constructor.name,this.isOperational=
f,this.cause=a,this.docsPath=s,this.message=`${e??"An error occured"}
      Name: ${this.name}`,s&&(this.message=`${this.message}
      Docs: see \${this.docsPath}`),Object.setPrototypeOf(this,n0.prototype)}};let _=class extends Y{constructor({
blockNumberOrHash:e,...f}){super(`Block not found: ${e}`,{...f})}};const E0=0;const J=t=>!0;const S0=(t,e)=>{
i(N(t),e??`Expected a hex string but got ${t}`)},C0=(t,e)=>{i(t instanceof Uint8Array,e??`Expected a\
 buffer but got ${t}`)},Q=(t,e)=>{i(N(t)&&t.length===32*2+2,e??`Expected a valid private key, but go\
t ${t}`)},H0=(t,e)=>{const{gasPrice:f,gasLimit:a,to:s,from:n,seqno:b,value:c}=t;i(typeof s=="string"&&
E(s),e??`Expected a valid 'to' address but got ${s}`),i(typeof c=="bigint"&&c>=0,e??`Expected a vali\
d 'value' but got ${c}`),n!==void 0&&i(typeof n=="string"&&E(n),e??`Expected a valid 'from' address \
but got ${n}`),f!==void 0&&i((typeof f=="number"||typeof f=="bigint")&&f>0,e??`Expected a valid 'gas\
Price' but got ${f}`),a!==void 0&&i((typeof a=="number"||typeof a=="bigint")&&a>0,e??`Expected a val\
id 'gasLimit' but got ${a}`),b!==void 0&&i(b>=0,e??`Expected a valid 'seqno' but got ${b}`)},P0=(t,e)=>{
const{seqno:f,pubkey:a,shardId:s}=t;f!==void 0&&i(f>=0,e??`Expected a valid 'seqno' but got ${f}`),a!==
void 0&&i(typeof a=="string",e??`Expected a valid 'pubkey' but got ${a}`),y(s)},U0=(t,e)=>{i(E(t),e??
`Expected a valid address but got ${t}`)},N0=(t,e)=>{i(J(),e??`Expected a valid block but got ${t}`)},
y=t=>{if(!(typeof t=="number"&&Number.isInteger(t)&&t>=0&&t<65536&&t!==E0))throw new f0({shardId:t})};
let R0=class{constructor(e){this.transport=e.transport,this.shardId=e.shardId}async request(e){return this.
transport.request(e)}getShardId(){return this.shardId}setShardId(e){y(e),this.shardId=e}};let K0=class extends R0{constructor(e){
super(e)}async getBlockByHash(e,f=!1,a=this.shardId){y(a);try{return await this.request({method:"eth\
_getBlockByHash",params:[a,e,f]})}catch(s){throw new _({blockNumberOrHash:e,cause:s})}}async getBlockByNumber(e,f=!1,a=this.
shardId){y(a);try{return await this.request({method:"eth_getBlockByNumber",params:[a,e,f]})}catch(s){
throw new _({blockNumberOrHash:e,cause:s})}}async getBlockMessageCountByNumber(e,f=this.shardId){return y(
f),await this.request({method:"eth_getBlockTransactionCountByNumber",params:[f,e]})}async getBlockMessageCountByHash(e,f=this.
shardId){return y(f),await this.request({method:"eth_getBlockTransactionCountByHash",params:[f,e]})}async getCode(e,f){
const a=await this.request({method:"eth_getCode",params:[e,f]});return o(a)}async getMessageCount(e,f){
const a=await this.request({method:"eth_getTransactionCount",params:[e,f]});return D(a)}async getBalance(e,f){
const a=await this.request({method:"eth_getBalance",params:[l(e),f]});return x(a)}async getMessageByHash(e,f=this.
shardId){y(f);const a=await this.request({method:"eth_getInMessageByHash",params:[f,e]});return{...a,
value:BigInt(a.value),gasLimit:BigInt(a.gasLimit),gasUsed:x(a.gasUsed),gasPrice:BigInt(a.gasPrice),seqno:x(
a.seqno),index:a.index?D(a.index):0}}async getMessageReceiptByHash(e,f=this.shardId){return y(f),await this.
request({method:"eth_getInMessageReceipt",params:[f,l(typeof e=="string"?e:v(e))]})}async sendRawMessage(e){
return await this.request({method:"eth_sendRawTransaction",params:[typeof e=="string"?e:l(v(e))]})}async getGasPrice(){
return BigInt(1)}async estimateGasLimit(){return BigInt(1e6)}async chainId(){const e=await this.request(
{method:"eth_chainId",params:[]});return D(e)}async getCurrencies(e,f){const a=await this.request({method:"\
eth_getCurrencies",params:[e,f]}),s={};if(a)for(const[n,b]of Object.entries(a))s[n]=x(b);return s}async call(e,f){
const a={from:e.from,to:e.to,data:typeof e.data=="string"?e.data:l(v(e.data)),value:u0(e.value||0n),
gasLimit:(e.gasLimit||5000000n).toString(10)};return await this.request({method:"eth_call",params:[a,
f]})}};const W0=t=>l(k(w0(t).slice(0,32)));const Z=(t,e=!1)=>{const f=U.getPublicKey(g(t),e);return l(
v(f))},e0=(t,e)=>{y(e);const f=g(t),a=typeof f=="string"?o0(f):f,s=M(a),n=m(e,2),b=m(s,32);return k(
new Uint8Array([...n,...b.slice(14)]))};class _0{constructor(e){this.publicKey=void 0,this.address=void 0;
const{privateKey:f,mnemonic:a}=e;i(f||a,"Either privateKey or mnemonic must be provided.");const s=a?
W0(a):l(f);Q(s),this.privateKey=s}async sign(e){const f=U.sign(e,g(this.privateKey)),{r:a,s,recovery:n}=f;
return H(m(a,32),m(s,32),m(n,1))}async getPublicKey(){if(this.publicKey)return o(this.publicKey);const e=Z(
this.privateKey,!0);return this.publicKey=e,o(this.publicKey)}async getAddress(e){if(this.address)return o(
this.address);const f=await this.getPublicKey();return this.address=e0(d(f),e),o(this.address)}}const L0=()=>k(
U.utils.randomPrivateKey());let O0=class{constructor(){i(typeof window<"u","MetaMaskSigner can be us\
ed in the browser only"),i(typeof window.ethereum<"u","No MetaMask provider found. Please install Me\
taMask browser extension before using MetaMaskSigner"),this.provider=window.ethereum}async sign(e){return new Uint8Array(
65)}async getAddress(){return new Uint8Array(20)}async getPublicKey(){return new Uint8Array(33)}async connect(){
await this.provider.request({method:"eth_requestAccounts"})}};const t0=async(t,e,f)=>{const a=[],s=[
[e,f]];let n=0;for(;n!==s.length;){const[b,c]=s[n],r=await t.getMessageReceiptByHash(c,b);if(!r||r.outMessages!==
null&&r.outputReceipts&&r.outputReceipts.filter(u=>u!==null).length!==r.outMessages.length){await new Promise(
u=>setTimeout(u,1e3));continue}if(n++,a.push(r),r.outputReceipts)for(const u of r.outputReceipts)s.push(
[u.shardId,u.messageHash])}return a};const F0=t=>BigInt(t*1e18);const V0=t=>{const e=new T0(t),f=new I0(
[e]);return new v0(f)};let j0=class{constructor(e){this.rpcClient=V0(e.endpoint),this.timeout=e.timeout!==
void 0?e.timeout:2e4}async request(e){return this.rpcClient.request(e,this.timeout)}connect(){}closeConnection(){
this.rpcClient.close()}};class z0{constructor(e){this.timeout=e.timeout!==void 0?e.timeout:2e4,i(typeof window<
"u","MetaMaskTransport can be used in the browser only"),i(typeof window.ethereum<"u","No MetaMask p\
rovider found. Please install MetaMask browser extension before using MetaMaskSigner"),this.provider=
window.ethereum}async request(e){return this.provider.request(e)}connect(){this.provider.request({method:"\
eth_requestAccounts"})}closeConnection(){}}let G0=class{};let f0=class extends Y{constructor({shardId:e,
...f}){super(`Expected a valid shardId but got: ${e}`,{...f})}};var a0=[{anonymous:!1,inputs:[{indexed:!1,
internalType:"address",name:"addr",type:"address"}],name:"Deploy",type:"event"},{anonymous:!1,inputs:[
{indexed:!1,internalType:"address",name:"addr",type:"address"},{indexed:!1,internalType:"uint256",name:"\
value",type:"uint256"}],name:"Send",type:"event"},{inputs:[{internalType:"bytes",name:"owner_pubkey",
type:"bytes"},{internalType:"bytes32",name:"salt",type:"bytes32"},{internalType:"uint256",name:"valu\
e",type:"uint256"}],name:"createWallet",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"\
nonpayable",type:"function"},{inputs:[{internalType:"bytes",name:"message",type:"bytes"}],name:"send",
outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"\
uint256"},{internalType:"bytes",name:"",type:"bytes"}],name:"verifyExternal",outputs:[{internalType:"\
bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address \
payable",name:"addr",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"wit\
hdrawTo",outputs:[],stateMutability:"nonpayable",type:"function"}];const s0=class I{constructor(e){this.
client=e}async withdrawTo(e,f=1000000000000000000n,a){const[s,n]=await Promise.all([a??this.client.getMessageCount(
I.address,"latest"),this.client.chainId()]),b=A({abi:a0,functionName:"withdrawTo",args:[e.toLowerCase(),
f]}),c=new $({isDeploy:!1,to:o(I.address),chainId:n,seqno:s,data:o(b),authData:new Uint8Array(0)}),r=c.
encode();return await this.client.sendRawMessage(d(r)),c.hash()}async withdrawToWithRetry(e,f=1000000000000000000n,a=5){
let s=0;for(;s++<a;)try{const[n,b]=await Promise.all([this.client.getMessageCount(I.address,"latest"),
this.client.chainId()]),c=A({abi:a0,functionName:"withdrawTo",args:[e.toLowerCase(),f]}),r=new $({isDeploy:!1,
to:o(I.address),chainId:b,seqno:n,data:o(c),authData:new Uint8Array(0)}),u=r.encode();await this.client.
sendRawMessage(d(u));const p=d(r.hash()),w=await Promise.race([new Promise(h=>setTimeout(()=>h([]),1e4)),
t0(this.client,W(I.address),p)]);if(w.length===0||w.some(h=>!h.success))continue;return p}catch(n){if(await new Promise(
b=>setTimeout(b,1e3)),s>=a)throw n}throw new Error("Failed to withdraw to the given address")}};s0.address=
"0x000100000000000000000000000000000FA00CE7";let X0=s0;const Y0="0x608060405260405162001eff380380620\
01eff8339818101604052810190620000299190620001c6565b805f90816200003991906200044c565b505062000530565b5\
f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000\
000000000000000000000000000000000000000000000005f52604160045260245ffd5b620000a2826200005a565b8101818\
11067ffffffffffffffff82111715620000c457620000c36200006a565b5b80604052505050565b5f620000d862000041565\
b9050620000e6828262000097565b919050565b5f67ffffffffffffffff8211156200010857620001076200006a565b5b620\
00113826200005a565b9050602081019050919050565b5f5b838110156200013f57808201518184015260208101905062000\
122565b5f8484015250505050565b5f620001606200015a84620000eb565b620000cd565b905082815260208101848484011\
1156200017f576200017e62000056565b5b6200018c84828562000120565b509392505050565b5f82601f830112620001ab5\
7620001aa62000052565b5b8151620001bd8482602086016200014a565b91505092915050565b5f60208284031215620001d\
e57620001dd6200004a565b5b5f82015167ffffffffffffffff811115620001fe57620001fd6200004e565b5b6200020c848\
2850162000194565b91505092915050565b5f81519050919050565b7f4e487b7100000000000000000000000000000000000\
0000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200026457607f821691505b6020821\
081036200027a57620002796200021f565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f83010\
49050919050565b5f82821b905092915050565b5f60088302620002de7ffffffffffffffffffffffffffffffffffffffffff\
fffffffffffffffffffffff82620002a1565b620002ea8683620002a1565b955080198416935080861684179250505093925\
05050565b5f819050919050565b5f819050919050565b5f620003346200032e620003288462000302565b6200030b565b620\
00302565b9050919050565b5f819050919050565b6200034f8362000314565b620003676200035e826200033b565b8484546\
20002ad565b825550505050565b5f90565b6200037d6200036f565b6200038a81848462000344565b505050565b5b8181101\
5620003b157620003a55f8262000373565b60018101905062000390565b5050565b601f8211156200040057620003ca81620\
00280565b620003d58462000292565b81016020851015620003e5578190505b620003fd620003f48562000292565b8301826\
200038f565b50505b505050565b5f82821c905092915050565b5f620004225f198460080262000405565b198083169150509\
2915050565b5f6200043c838362000411565b9150826002028217905092915050565b620004578262000215565b67fffffff\
fffffffff8111156200047357620004726200006a565b5b6200047f82546200024c565b6200048c828285620003b5565b5f6\
0209050601f831160018114620004c2575f8415620004ad578287015190505b620004b985826200042f565b8655506200052\
8565b601f198416620004d28662000280565b5f5b82811015620004fb5784890151825560018201915060208501945060208\
1019050620004d4565b868310156200051b578489015162000517601f89168262000411565b8355505b60016002880201885\
55050505b505050505050565b6119c1806200053e5f395ff3fe60806040526004361061007e575f3560e01c80639647c0161\
161004d5780639647c0161461013d578063be4b177214610159578063c248ab2014610175578063f5b8214a1461019157610\
085565b80632bb1ae7c146100895780634f7d1d58146100b157806355b517cb146100d9578063796d7f56146101015761008\
5565b3661008557005b5f80fd5b348015610094575f80fd5b506100af60048036038101906100aa9190610bc3565b6101b95\
65b005b3480156100bc575f80fd5b506100d760048036038101906100d29190610dd3565b610252565b005b3480156100e45\
75f80fd5b506100ff60048036038101906100fa9190610e88565b61034e565b005b34801561010c575f80fd5b50610127600\
48036038101906101229190610f32565b6103f2565b6040516101349190610f9e565b60405180910390f35b6101576004803\
6038101906101529190610fb7565b6104d1565b005b610173600480360381019061016e9190610ff5565b6105d3565b005b6\
1018f600480360381019061018a91906110d1565b6106d5565b005b34801561019c575f80fd5b506101b7600480360381019\
06101b2919061124e565b6107bd565b005b6101c1610864565b15610201576040517f08c379a000000000000000000000000\
00000000000000000000000000000000081526004016101f8906113ba565b60405180910390fd5b61024e5a83838080601f0\
160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905\
08083019250505050505050610970565b5050565b61025a610864565b1561029a576040517f08c379a000000000000000000\
0000000000000000000000000000000000000008152600401610291906113ba565b60405180910390fd5b5f8473fffffffff\
fffffffffffffffffffffffffffffff16838590846040516102c39190611444565b5f60405180830381858888f1935050505\
03d805f81146102fe576040519150601f19603f3d011682016040523d82523d5f602084013e610303565b606091505b50509\
05080610347576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033\
e906114a4565b60405180910390fd5b5050505050565b610356610864565b15610396576040517f08c379a00000000000000\
0000000000000000000000000000000000000000000815260040161038d906113ba565b60405180910390fd5b6103e887878\
888888888888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f8184015\
2601f19601f8201169050808301925050505050505061098e565b5050505050505050565b5f6104c85f8054610402906114e\
f565b80601f016020809104026020016040519081016040528092919081815260200182805461042e906114ef565b8015610\
4795780601f1061045057610100808354040283529160200191610479565b820191905f5260205f20905b815481529060010\
19060200180831161045c57829003601f168201915b50505050508585858080601f016020809104026020016040519081016\
0405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050506109af565\
b90509392505050565b6104d9610864565b15610519576040517f08c379a0000000000000000000000000000000000000000\
000000000000000008152600401610510906113ba565b60405180910390fd5b5f3073fffffffffffffffffffffffffffffff\
fffffffff1690505f61271090506105cc72012222222222222222222222222222222222225f80845f600a876105619190611\
54c565b888b8b61056e575f610570565b305b604051602401610582939291906115ab565b604051602081830303815290604\
05263e7d3fe6b60e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178\
3525050505061098e565b5050505050565b6105db610864565b1561061b576040517f08c379a000000000000000000000000\
0000000000000000000000000000000008152600401610612906113ba565b60405180910390fd5b5f3073fffffffffffffff\
fffffffffffffffffffffffff1690505f61c35090506106ce72012222222222222222222222222222222222225f80845f600\
a876002610665919061154c565b61066f919061154c565b888b8b604051602401610684939291906115ab565b60405160208\
1830303815290604052630ad58d2f60e01b6020820180517bfffffffffffffffffffffffffffffffffffffffffffffffffff\
fffff838183161783525050505061098e565b5050505050565b6106dd610864565b1561071d576040517f08c379a00000000\
00000000000000000000000000000000000000000000000008152600401610714906113ba565b60405180910390fd5b5f5a9\
0506107b672012222222222222222222222222222222222225f80845f600a87610749919061154c565b8a5f8b8b610757575\
f610759565b305b60405160240161076c9493929190611622565b604051602081830303815290604052637166eb4960e01b6\
020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061098e565\
b5050505050565b6107c5610864565b15610805576040517f08c379a00000000000000000000000000000000000000000000\
000000000000081526004016107fc906113ba565b60405180910390fd5b6108588989898989888a89898080601f016020809\
1040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019\
250505050505050610ab5565b50505050505050505050565b5f60605f8060ff73fffffffffffffffffffffffffffffffffff\
fffff168360405161088f9190611444565b5f60405180830381855afa9150503d805f81146108c7576040519150601f19603\
f3d011682016040523d82523d5f602084013e6108cc565b606091505b509150915081610911576040517f08c379a00000000\
00000000000000000000000000000000000000000000000008152600401610908906116b6565b60405180910390fd5b5f815\
111610954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094b9\
0611744565b60405180910390fd5b808060200190518101906109689190611776565b935050505090565b5f815190505f808\
2602085015f60fc88f1610989575f80fd5b505050565b5f60606109a1898989898989878a610ab5565b91505097965050505\
0505050565b5f808484846040516020016109c6939291906117e9565b60405160208183030381529060405290505f8060606\
0fe73ffffffffffffffffffffffffffffffffffffffff1684604051610a019190611444565b5f60405180830381855afa915\
0503d805f8114610a39576040519150601f19603f3d011682016040523d82523d5f602084013e610a3e565b606091505b508\
09250819450505082610a87576040517f08c379a000000000000000000000000000000000000000000000000000000000815\
2600401610a7e906116b6565b60405180910390fd5b5f81511115610aa75780806020019051810190610aa49190611776565\
b91505b819450505050509392505050565b5f8060fd73ffffffffffffffffffffffffffffffffffffffff16632495aa6d868\
88d8d8d8d8b8b6040518963ffffffff1660e01b8152600401610afe9796959493929190611910565b6020604051808303818\
5885af1158015610b1a573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190610b3f919\
0611776565b90508091505098975050505050505050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f8\
0fd5b5f8083601f840112610b8357610b82610b62565b5b8235905067ffffffffffffffff811115610ba057610b9f610b665\
65b5b602083019150836001820283011115610bbc57610bbb610b6a565b5b9250929050565b5f8060208385031215610bd95\
7610bd8610b5a565b5b5f83013567ffffffffffffffff811115610bf657610bf5610b5e565b5b610c0285828601610b6e565\
b92509250509250929050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610c3782610\
c0e565b9050919050565b610c4781610c2d565b8114610c51575f80fd5b50565b5f81359050610c6281610c3e565b9291505\
0565b5f819050919050565b610c7a81610c68565b8114610c84575f80fd5b50565b5f81359050610c9581610c71565b92915\
050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b710000000000000000000000000000000000000000000\
00000000000005f52604160045260245ffd5b610ce582610c9f565b810181811067ffffffffffffffff82111715610d04576\
10d03610caf565b5b80604052505050565b5f610d16610b51565b9050610d228282610cdc565b919050565b5f67fffffffff\
fffffff821115610d4157610d40610caf565b5b610d4a82610c9f565b9050602081019050919050565b828183375f8383015\
2505050565b5f610d77610d7284610d27565b610d0d565b905082815260208101848484011115610d9357610d92610c9b565\
b5b610d9e848285610d57565b509392505050565b5f82601f830112610dba57610db9610b62565b5b8135610dca848260208\
601610d65565b91505092915050565b5f805f8060808587031215610deb57610dea610b5a565b5b5f610df887828801610c5\
4565b9450506020610e0987828801610c87565b9350506040610e1a87828801610c87565b925050606085013567fffffffff\
fffffff811115610e3b57610e3a610b5e565b5b610e4787828801610da6565b91505092959194509250565b5f81151590509\
19050565b610e6781610e53565b8114610e71575f80fd5b50565b5f81359050610e8281610e5e565b92915050565b5f805f8\
05f805f60c0888a031215610ea357610ea2610b5a565b5b5f610eb08a828b01610c54565b9750506020610ec18a828b01610\
c54565b9650506040610ed28a828b01610c87565b9550506060610ee38a828b01610e74565b9450506080610ef48a828b016\
10c87565b93505060a088013567ffffffffffffffff811115610f1557610f14610b5e565b5b610f218a828b01610b6e565b9\
25092505092959891949750929550565b5f805f60408486031215610f4957610f48610b5a565b5b5f610f5686828701610c8\
7565b935050602084013567ffffffffffffffff811115610f7757610f76610b5e565b5b610f8386828701610b6e565b92509\
250509250925092565b610f9881610e53565b82525050565b5f602082019050610fb15f830184610f8f565b92915050565b5\
f8060408385031215610fcd57610fcc610b5a565b5b5f610fda85828601610c87565b9250506020610feb85828601610e745\
65b9150509250929050565b5f806040838503121561100b5761100a610b5a565b5b5f61101885828601610c87565b9250506\
02061102985828601610c54565b9150509250929050565b5f67ffffffffffffffff82111561104d5761104c610caf565b5b6\
1105682610c9f565b9050602081019050919050565b5f61107561107084611033565b610d0d565b905082815260208101848\
48401111561109157611090610c9b565b5b61109c848285610d57565b509392505050565b5f82601f8301126110b8576110b\
7610b62565b5b81356110c8848260208601611063565b91505092915050565b5f805f606084860312156110e8576110e7610\
b5a565b5b5f6110f586828701610c87565b935050602084013567ffffffffffffffff81111561111657611115610b5e565b5\
b611122868287016110a4565b925050604061113386828701610e74565b9150509250925092565b5f67ffffffffffffffff8\
2111561115757611156610caf565b5b602082029050602081019050919050565b5f80fd5b5f6040828403121561118157611\
180611168565b5b61118b6040610d0d565b90505f61119a84828501610c87565b5f8301525060206111ad84828501610c875\
65b60208301525092915050565b5f6111cb6111c68461113d565b610d0d565b9050808382526020820190506040840283018\
58111156111ee576111ed610b6a565b5b835b818110156112175780611203888261116c565b8452602084019350506040810\
190506111f0565b5050509392505050565b5f82601f83011261123557611234610b62565b5b8135611245848260208601611\
1b9565b91505092915050565b5f805f805f805f805f6101008a8c03121561126c5761126b610b5a565b5b5f6112798c828d0\
1610c54565b995050602061128a8c828d01610c54565b985050604061129b8c828d01610c54565b97505060606112ac8c828\
d01610c87565b96505060806112bd8c828d01610e74565b95505060a08a013567ffffffffffffffff8111156112de576112d\
d610b5e565b5b6112ea8c828d01611221565b94505060c06112fb8c828d01610c87565b93505060e08a013567fffffffffff\
fffff81111561131c5761131b610b5e565b5b6113288c828d01610b6e565b92509250509295985092959850929598565b5f8\
2825260208201905092915050565b7f547279696e6720746f2063616c6c2065787465726e616c2066756e6374696f6e5f820\
1527f207769746820696e7465726e616c206d65737361676500000000000000000000602082015250565b5f6113a46036836\
1133a565b91506113af8261134a565b604082019050919050565b5f6020820190508181035f8301526113d181611398565b9\
050919050565b5f81519050919050565b5f81905092915050565b5f5b8381101561140957808201518184015260208101905\
06113ee565b5f8484015250505050565b5f61141e826113d8565b61142881856113e2565b93506114388185602086016113e\
c565b80840191505092915050565b5f61144f8284611414565b915081905092915050565b7f43616c6c206661696c6564000\
0000000000000000000000000000000000000005f82015250565b5f61148e600b8361133a565b91506114998261145a565b6\
02082019050919050565b5f6020820190508181035f8301526114bb81611482565b9050919050565b7f4e487b71000000000\
000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061150\
657607f821691505b602082108103611519576115186114c2565b5b50919050565b7f4e487b7100000000000000000000000\
0000000000000000000000000000000005f52601160045260245ffd5b5f61155682610c68565b915061156183610c68565b9\
25082820261156f81610c68565b915082820484148315176115865761158561151f565b5b5092915050565b61159681610c6\
8565b82525050565b6115a581610c2d565b82525050565b5f6060820190506115be5f83018661158d565b6115cb602083018\
561158d565b6115d8604083018461159c565b949350505050565b5f81519050919050565b5f6115f4826115e0565b6115fe8\
18561133a565b935061160e8185602086016113ec565b61161781610c9f565b840191505092915050565b5f6080820190506\
116355f83018761158d565b611642602083018661159c565b818103604083015261165481856115ea565b905061166360608\
3018461159c565b95945050505050565b7f507265636f6d70696c656420636f6e74726163742063616c6c206661696c65645\
f82015250565b5f6116a060208361133a565b91506116ab8261166c565b602082019050919050565b5f60208201905081810\
35f8301526116cd81611694565b9050919050565b7f2749535f494e5445524e414c5f4d455353414745272072657475726e7\
320696e5f8201527f76616c6964206461746100000000000000000000000000000000000000000000602082015250565b5f6\
1172e602a8361133a565b9150611739826116d4565b604082019050919050565b5f6020820190508181035f83015261175b8\
1611722565b9050919050565b5f8151905061177081610e5e565b92915050565b5f6020828403121561178b5761178a610b5\
a565b5b5f61179884828501611762565b91505092915050565b5f82825260208201905092915050565b5f6117bb826113d85\
65b6117c581856117a1565b93506117d58185602086016113ec565b6117de81610c9f565b840191505092915050565b5f606\
0820190508181035f83015261180181866117b1565b9050611810602083018561158d565b818103604083015261182281846\
117b1565b9050949350505050565b5f81519050919050565b5f82825260208201905092915050565b5f81905060208201905\
0919050565b61185e81610c68565b82525050565b604082015f8201516118785f850182611855565b50602082015161188b6\
020850182611855565b50505050565b5f61189c8383611864565b60408301905092915050565b5f602082019050919050565\
b5f6118be8261182c565b6118c88185611836565b93506118d383611846565b805f5b838110156119035781516118ea88826\
11891565b97506118f5836118a8565b9250506001810190506118d6565b5085935050505092915050565b5f60e0820190506\
119235f83018a610f8f565b611930602083018961159c565b61193d604083018861159c565b61194a606083018761159c565\
b611957608083018661158d565b81810360a083015261196981856118b4565b905081810360c083015261197d81846117b15\
65b90509897505050505050505056fea26469706673582212201e973eb5c7959750c4e77210d3e9a58cf9005e2500e827031\
ba7d910dcc1907364736f6c63430008150033";var B=[{inputs:[{internalType:"bytes",name:"_pubkey",type:"by\
tes"}],stateMutability:"payable",type:"constructor"},{inputs:[{internalType:"address",name:"dst",type:"\
address"},{internalType:"address",name:"refundTo",type:"address"},{internalType:"uint256",name:"gas",
type:"uint256"},{internalType:"bool",name:"deploy",type:"bool"},{internalType:"uint256",name:"value",
type:"uint256"},{internalType:"bytes",name:"callData",type:"bytes"}],name:"asyncCall",outputs:[],stateMutability:"\
nonpayable",type:"function"},{inputs:[{internalType:"address",name:"dst",type:"address"},{internalType:"\
address",name:"refundTo",type:"address"},{internalType:"address",name:"bounceTo",type:"address"},{internalType:"\
uint256",name:"gas",type:"uint256"},{internalType:"bool",name:"deploy",type:"bool"},{components:[{internalType:"\
uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"\
struct Nil.Token[]",name:"tokens",type:"tuple[]"},{internalType:"uint256",name:"value",type:"uint256"},
{internalType:"bytes",name:"callData",type:"bytes"}],name:"asyncCall",outputs:[],stateMutability:"no\
npayable",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"\
string",name:"name",type:"string"},{internalType:"bool",name:"withdraw",type:"bool"}],name:"createTo\
ken",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"am\
ount",type:"uint256"},{internalType:"bool",name:"withdraw",type:"bool"}],name:"mintToken",outputs:[],
stateMutability:"payable",type:"function"},{inputs:[{internalType:"bytes",name:"message",type:"bytes"}],
name:"send",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",
name:"dst",type:"address"},{internalType:"uint256",name:"gas",type:"uint256"},{internalType:"uint256",
name:"value",type:"uint256"},{internalType:"bytes",name:"call_data",type:"bytes"}],name:"syncCall",outputs:[],
stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"hash",type:"uin\
t256"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"verifyExternal",outputs:[{internalType:"\
bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",
name:"amount",type:"uint256"},{internalType:"address",name:"to",type:"address"}],name:"withdrawToken",
outputs:[],stateMutability:"payable",type:"function"},{stateMutability:"payable",type:"receive"}];const L=class C{static calculateWalletAddress({
pubKey:e,shardId:f,salt:a}){const{address:s}=S({abi:B,bytecode:C.code,args:[d(e)],salt:a,shard:f});return s}constructor({
pubkey:e,shardId:f,address:a,client:s,salt:n,signer:b}){this.pubkey=A0(e),this.client=s,this.signer=
b,i(!(n&&a),"You should use salt and shard for calculating address or address itself, not both to av\
oid issue."),this.address=a?T(a):C.calculateWalletAddress({pubKey:this.pubkey,shardId:f,salt:n}),n&&
(this.salt=G(n)),this.shardId=W(this.address)}getAddressHex(){return d(this.address)}async selfDeploy(e=!0){
i(typeof this.salt<"u","Salt is required for external deployment. Please provide salt for walelt");const[
f,a]=await Promise.all([await this.client.getBalance(this.getAddressHex(),"latest"),await this.client.
getCode(this.getAddressHex(),"latest").catch(()=>Uint8Array.from([]))]);i(a.length===0,"Contract alr\
eady deployed"),i(f>0n,"Insufficient balance");const{data:s}=S({abi:B,bytecode:C.code,args:[d(this.pubkey)],
salt:this.salt,shard:this.shardId}),{hash:n}=await this.requestToWallet({data:s,deploy:!0,seqno:0});
if(e)for(;!((await this.client.getCode(this.getAddressHex(),"latest")).length>0);)await new Promise(
b=>setTimeout(b,1e3));return n}async checkDeploymentStatus(){return(await this.client.getCode(this.getAddressHex(),
"latest")).length>0}async requestToWallet(e,f=!0){const[a,s]=await Promise.all([e.seqno??this.client.
getMessageCount(this.getAddressHex(),"latest"),e.chainId??this.client.chainId()]),n=await X({isDeploy:e.
deploy,to:this.address,chainId:s,seqno:a,data:e.data},this.signer);return f&&await this.client.sendRawMessage(
n.raw),n}async sendMessage({to:e,refundTo:f,bounceTo:a,data:s,deploy:n,seqno:b,gas:c,value:r,tokens:u,
chainId:p}){const w=d(T(e)),h=d(T(f??this.address)),b0=d(T(a??this.address)),i0=s?s instanceof Uint8Array?
d(s):s:"0x",r0=A({abi:B,functionName:"asyncCall",args:[w,h,b0,c,!!n,u??[],r??0n,i0]}),{hash:d0}=await this.
requestToWallet({data:o(r0),deploy:!1,seqno:b,chainId:p});return d(d0)}async sendRawInternalMessage(e){
const{hash:f}=await this.requestToWallet({data:e,deploy:!1});return d(f)}async deployContract({shardId:e,
bytecode:f,abi:a,args:s,salt:n,value:b,gas:c,seqno:r,chainId:u}){let p;a&&s?p={shard:e,bytecode:f,abi:a,
args:s,salt:n}:(i(a||s,"ABI and args should be provided together or not provided at all."),p={shard:e,
bytecode:f,salt:n});const{data:w,address:h}=S(p);return{hash:await this.sendMessage({to:h,refundTo:this.
getAddressHex(),data:w,value:b??0n,deploy:!0,gas:c,seqno:r,chainId:u}),address:d(h)}}async syncSendMessage({
to:e,data:f,seqno:a,gas:s,value:n}){const b=d(T(e)),c=f?f instanceof Uint8Array?d(f):f:"0x",r=A({abi:B,
functionName:"syncCall",args:[b,s,n,c]}),{hash:u}=await this.requestToWallet({data:o(r),deploy:!1,seqno:a});
return d(u)}async getBalance(){return this.client.getBalance(this.getAddressHex(),"latest")}};L.code=
o(Y0),L.abi=B;let J0=L;var Q0=[{inputs:[{internalType:"bytes",name:"_pubkey",type:"bytes"}],stateMutability:"\
nonpayable",type:"constructor"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"\
address",name:"owner",type:"address"},{internalType:"string",name:"name",type:"string"},{internalType:"\
address",name:"sendTo",type:"address"}],name:"create",outputs:[{internalType:"bool",name:"",type:"bo\
ol"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"id",type:"ui\
nt256"}],name:"getName",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"vie\
w",type:"function"},{inputs:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint25\
6",name:"amount",type:"uint256"},{internalType:"address",name:"sendTo",type:"address"}],name:"mint",
outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"\
uint256"}],name:"tokens",outputs:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"s\
tring",name:"name",type:"string"},{internalType:"address",name:"owner",type:"address"},{internalType:"\
uint256",name:"totalSupply",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"\
uint256",name:"hash",type:"uint256"},{internalType:"bytes",name:"signature",type:"bytes"}],name:"ver\
ifyExternal",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"functi\
on"},{inputs:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"amount",
type:"uint256"},{internalType:"address",name:"to",type:"address"}],name:"withdraw",outputs:[],stateMutability:"\
payable",type:"function"},{stateMutability:"payable",type:"receive"}];const Z0=Q0,e5="0x000122222222\
2222222222222222222222222222";export{_ as BlockNotFoundError,$ as ExternalMessageEnvelope,X0 as Faucet,j0 as HttpTransport,G0 as ITransport,
D0 as InternalMessageEnvelope,f0 as InvalidShardIdError,_0 as LocalECDSAKeySigner,Z0 as MINTER_ABI,e5 as MINTER_ADDRESS,
O0 as MetaMaskSigner,z0 as MetaMaskTransport,K0 as PublicClient,K as SszMessageSchema,q as SszSignedMessageSchema,
J0 as WalletV1,l as addHexPrefix,U0 as assertIsAddress,C0 as assertIsBuffer,S0 as assertIsHexString,
N0 as assertIsValidBlock,P0 as assertIsValidDeployData,Q as assertIsValidPrivateKey,H0 as assertIsValidSendMessageData,
y as assertIsValidShardId,q0 as bytesToString,z as calculateAddress,F0 as convertEthToWei,k0 as externalDeploymentMessage,
X as externalMessageEncode,L0 as generateRandomPrivateKey,e0 as getAddressFromPublicKey,Z as getPublicKey,
W as getShardIdFromAddress,x as hexToBigInt,D as hexToNumber,E as isAddress,N as isHexString,J as isValidBlock,
M as poseidonHash,T as refineAddress,g as removeHexPrefix,k as toHex,t0 as waitTillCompleted};
//# sourceMappingURL=niljs.esm.js.map
