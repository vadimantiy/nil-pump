/**!
 * @nilfoundation/niljs v0.9.0
 *
 * @copyright (c) 2024 =nil; Foundation.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
"use strict";var d=require("@noble/curves/abstract/utils"),n=require("viem"),s0=require("@iden3/js-crypto"),H=require("@chainsafe/persistent-merkle-tree"),
l=require("@chainsafe/ssz"),r=require("tiny-invariant"),C=require("@noble/curves/secp256k1"),n0=require("@scure/bip39"),
S=require("@open-rpc/client-js");const b0=/^[0-9a-fA-F]+$/,P=t=>typeof t=="string"&&t.startsWith("0x")&&
b0.test(g(t)),g=t=>t.startsWith("0x")?t.slice(2):t,u=t=>`0x${g(t)}`;const $=t=>Number.parseInt(g(t),
16),I=t=>BigInt(u(t));const i0=t=>{let e="";for(let f=0;f<t.length;f++)e+=t.charCodeAt(f).toString(16);
return e},A=t=>typeof t=="string"?`0x${i0(t)}`:typeof t=="number"?`0x${d.numberToHexUnpadded(t)}`:typeof t==
"bigint"?`0x${d.numberToHexUnpadded(t)}`:typeof t=="boolean"?`0x${(t?1:0).toString(16)}`:`0x${d.bytesToHex(
t)}`;const r0=t=>new TextDecoder("utf8").decode(t);const v=t=>s0.poseidon.hashBytesX(t,16);H.setHasher(
{digest64(t,e){const f=v(d.concatBytes(t,e)),a=new Uint8Array(32);for(let s=0;s<32;s++)a[31-s]=Number(
f>>BigInt(s*8)&BigInt(255));return a},digest64HashObjects(t,e){const f=v(d.concatBytes(H.hashObjectToUint8Array(
t),H.hashObjectToUint8Array(e))),a=new Uint8Array(32);for(let s=0;s<32;s++)a[31-s]=Number(f>>BigInt(
s*8)&BigInt(255));return H.uint8ArrayToHashObject(a)}});const U={Uint8:new l.UintNumberType(1),Uint32:new l.
UintNumberType(4),Uint64:new l.UintNumberType(8),UintBn256:new l.UintBigintType(32),Bool:new l.BooleanType},
o0=new l.ByteVectorType(20),N=new l.ContainerType({deploy:U.Bool,to:o0,chainId:U.Uint64,seqno:U.Uint64,
data:new l.ByteListType(24576)}),B=new l.ContainerType({...N.fields,authData:new l.ByteListType(256)});
const d0=/^0x[0-9a-fA-F]{40}$/,E=t=>typeof t=="string"&&d0.test(t),R=t=>typeof t=="string"?Number.parseInt(
t.slice(2,6),16):t[0]<<8|t[1],_=(t,e,f)=>{if(!Number.isInteger(t))throw new Error("Shard ID must be \
an integer");if(f.length!==32)throw new Error("Salt must be 32 bytes");if(e.length===0)throw new Error(
"Code must not be empty");if(t<0||t>65535)throw new Error("Invalid shard ID");const a=new Uint8Array(
e.length+32);a.set(e),a.set(f,e.length);const s=v(a),b=d.numberToBytesBE(t,2),i=d.numberToBytesBE(s,
32);return new Uint8Array([...b,...i.slice(14)])},w=t=>{if(typeof t=="string"){const e=n.hexToBytes(
t);if(e.length!==20)throw new Error("Invalid address length");return e}if(t.length!==20)throw new Error(
"Invalid address length");return t};const F=t=>typeof t=="bigint"?n.hexToBytes(u(t.toString(16).padStart(
64,"0"))).slice(0,32):(r(t.length===32,"Salt must be 32 bytes"),t),c0=t=>{const e=typeof t=="string"?
n.hexToBytes(t):t;return r(t.length===33,"Invalid pubkey length"),e};const D=t=>{const e=F(t.salt);let f;
t.abi?f=n.hexToBytes(n.encodeDeployData({abi:t.abi,bytecode:typeof t.bytecode=="string"?t.bytecode:n.
bytesToHex(t.bytecode),args:t.args||[]})):f=typeof t.bytecode=="string"?n.hexToBytes(t.bytecode):t.bytecode;
const a=new Uint8Array([...f,...e]),s=_(t.shard,f,e);return{data:a,address:s}};class M{constructor({
isDeploy:e,to:f,chainId:a,seqno:s,data:b,authData:i}){this.isDeploy=e,this.to=f,this.chainId=a,this.
seqno=s,this.data=b,this.authData=i}encode(){return B.serialize({seqno:this.seqno,chainId:this.chainId,
to:this.to,data:this.data,deploy:this.isDeploy,authData:this.authData})}hash(){return B.hashTreeRoot(
{seqno:this.seqno,chainId:this.chainId,to:this.to,data:this.data,deploy:this.isDeploy,authData:this.
authData})}signingHash(){return N.hashTreeRoot({seqno:this.seqno,chainId:this.chainId,to:this.to,data:this.
data,deploy:this.isDeploy})}async encodeWithSignature(e){const f=await this.sign(e),a=B.serialize({seqno:this.
seqno,chainId:this.chainId,to:this.to,data:this.data,deploy:this.isDeploy,authData:f}),s=B.hashTreeRoot(
{seqno:this.seqno,chainId:this.chainId,to:this.to,data:this.data,deploy:this.isDeploy,authData:f});return{
raw:a,hash:s}}async sign(e){return e.sign(this.signingHash())}async updateAuthdata(e){return this.authData=
await this.sign(e),this.authData}hexAddress(){return n.bytesToHex(this.to)}send(e){return e.sendRawMessage(
this.encode())}}class y0{}const u0=(t,e)=>{const{data:f,address:a}=D(t);return new M({isDeploy:!0,to:a,
chainId:e,seqno:0,data:f,authData:new Uint8Array(0)})},L=async(t,e)=>await new M({...t,authData:new Uint8Array(
0)}).encodeWithSignature(e);let O=class Z extends Error{constructor(e,{isOperational:f=!0,cause:a,docsPath:s}={}){
super(),this.name=this.constructor.name,this.isOperational=f,this.cause=a,this.docsPath=s,this.message=
`${e??"An error occured"}
      Name: ${this.name}`,s&&(this.message=`${this.message}
      Docs: see \${this.docsPath}`),Object.setPrototypeOf(this,Z.prototype)}};let K=class extends O{constructor({
blockNumberOrHash:e,...f}){super(`Block not found: ${e}`,{...f})}};const l0=0;const V=t=>!0;const p0=(t,e)=>{
r(P(t),e??`Expected a hex string but got ${t}`)},h0=(t,e)=>{r(t instanceof Uint8Array,e??`Expected a\
 buffer but got ${t}`)},j=(t,e)=>{r(P(t)&&t.length===32*2+2,e??`Expected a valid private key, but go\
t ${t}`)},m0=(t,e)=>{const{gasPrice:f,gasLimit:a,to:s,from:b,seqno:i,value:c}=t;r(typeof s=="string"&&
E(s),e??`Expected a valid 'to' address but got ${s}`),r(typeof c=="bigint"&&c>=0,e??`Expected a vali\
d 'value' but got ${c}`),b!==void 0&&r(typeof b=="string"&&E(b),e??`Expected a valid 'from' address \
but got ${b}`),f!==void 0&&r((typeof f=="number"||typeof f=="bigint")&&f>0,e??`Expected a valid 'gas\
Price' but got ${f}`),a!==void 0&&r((typeof a=="number"||typeof a=="bigint")&&a>0,e??`Expected a val\
id 'gasLimit' but got ${a}`),i!==void 0&&r(i>=0,e??`Expected a valid 'seqno' but got ${i}`)},g0=(t,e)=>{
const{seqno:f,pubkey:a,shardId:s}=t;f!==void 0&&r(f>=0,e??`Expected a valid 'seqno' but got ${f}`),a!==
void 0&&r(typeof a=="string",e??`Expected a valid 'pubkey' but got ${a}`),p(s)},T0=(t,e)=>{r(E(t),e??
`Expected a valid address but got ${t}`)},w0=(t,e)=>{r(V(),e??`Expected a valid block but got ${t}`)},
p=t=>{if(!(typeof t=="number"&&Number.isInteger(t)&&t>=0&&t<65536&&t!==l0))throw new X({shardId:t})};
let x0=class{constructor(e){this.transport=e.transport,this.shardId=e.shardId}async request(e){return this.
transport.request(e)}getShardId(){return this.shardId}setShardId(e){p(e),this.shardId=e}};let I0=class extends x0{constructor(e){
super(e)}async getBlockByHash(e,f=!1,a=this.shardId){p(a);try{return await this.request({method:"eth\
_getBlockByHash",params:[a,e,f]})}catch(s){throw new K({blockNumberOrHash:e,cause:s})}}async getBlockByNumber(e,f=!1,a=this.
shardId){p(a);try{return await this.request({method:"eth_getBlockByNumber",params:[a,e,f]})}catch(s){
throw new K({blockNumberOrHash:e,cause:s})}}async getBlockMessageCountByNumber(e,f=this.shardId){return p(
f),await this.request({method:"eth_getBlockTransactionCountByNumber",params:[f,e]})}async getBlockMessageCountByHash(e,f=this.
shardId){return p(f),await this.request({method:"eth_getBlockTransactionCountByHash",params:[f,e]})}async getCode(e,f){
const a=await this.request({method:"eth_getCode",params:[e,f]});return n.hexToBytes(a)}async getMessageCount(e,f){
const a=await this.request({method:"eth_getTransactionCount",params:[e,f]});return $(a)}async getBalance(e,f){
const a=await this.request({method:"eth_getBalance",params:[u(e),f]});return I(a)}async getMessageByHash(e,f=this.
shardId){p(f);const a=await this.request({method:"eth_getInMessageByHash",params:[f,e]});return{...a,
value:BigInt(a.value),gasLimit:BigInt(a.gasLimit),gasUsed:I(a.gasUsed),gasPrice:BigInt(a.gasPrice),seqno:I(
a.seqno),index:a.index?$(a.index):0}}async getMessageReceiptByHash(e,f=this.shardId){return p(f),await this.
request({method:"eth_getInMessageReceipt",params:[f,u(typeof e=="string"?e:d.bytesToHex(e))]})}async sendRawMessage(e){
return await this.request({method:"eth_sendRawTransaction",params:[typeof e=="string"?e:u(d.bytesToHex(
e))]})}async getGasPrice(){return BigInt(1)}async estimateGasLimit(){return BigInt(1e6)}async chainId(){
const e=await this.request({method:"eth_chainId",params:[]});return $(e)}async getCurrencies(e,f){const a=await this.
request({method:"eth_getCurrencies",params:[e,f]}),s={};if(a)for(const[b,i]of Object.entries(a))s[b]=
I(i);return s}async call(e,f){const a={from:e.from,to:e.to,data:typeof e.data=="string"?e.data:u(d.bytesToHex(
e.data)),value:n.numberToHex(e.value||0n),gasLimit:(e.gasLimit||5000000n).toString(10)};return await this.
request({method:"eth_call",params:[a,f]})}};const v0=t=>u(A(n0.mnemonicToSeedSync(t).slice(0,32)));const z=(t,e=!1)=>{
const f=C.secp256k1.getPublicKey(g(t),e);return u(d.bytesToHex(f))},G=(t,e)=>{p(e);const f=g(t),a=typeof f==
"string"?d.hexToBytes(f):f,s=v(a),b=d.numberToBytesBE(e,2),i=d.numberToBytesBE(s,32);return A(new Uint8Array(
[...b,...i.slice(14)]))};class B0{constructor(e){this.publicKey=void 0,this.address=void 0;const{privateKey:f,
mnemonic:a}=e;r(f||a,"Either privateKey or mnemonic must be provided.");const s=a?v0(a):u(f);j(s),this.
privateKey=s}async sign(e){const f=C.secp256k1.sign(e,g(this.privateKey)),{r:a,s,recovery:b}=f;return d.
concatBytes(d.numberToBytesBE(a,32),d.numberToBytesBE(s,32),d.numberToBytesBE(b,1))}async getPublicKey(){
if(this.publicKey)return n.hexToBytes(this.publicKey);const e=z(this.privateKey,!0);return this.publicKey=
e,n.hexToBytes(this.publicKey)}async getAddress(e){if(this.address)return n.hexToBytes(this.address);
const f=await this.getPublicKey();return this.address=G(n.bytesToHex(f),e),n.hexToBytes(this.address)}}
const M0=()=>A(C.secp256k1.utils.randomPrivateKey());let q0=class{constructor(){r(typeof window<"u",
"MetaMaskSigner can be used in the browser only"),r(typeof window.ethereum<"u","No MetaMask provider\
 found. Please install MetaMask browser extension before using MetaMaskSigner"),this.provider=window.
ethereum}async sign(e){return new Uint8Array(65)}async getAddress(){return new Uint8Array(20)}async getPublicKey(){
return new Uint8Array(33)}async connect(){await this.provider.request({method:"eth_requestAccounts"})}};
const J=async(t,e,f)=>{const a=[],s=[[e,f]];let b=0;for(;b!==s.length;){const[i,c]=s[b],o=await t.getMessageReceiptByHash(
c,i);if(!o||o.outMessages!==null&&o.outputReceipts&&o.outputReceipts.filter(y=>y!==null).length!==o.
outMessages.length){await new Promise(y=>setTimeout(y,1e3));continue}if(b++,a.push(o),o.outputReceipts)
for(const y of o.outputReceipts)s.push([y.shardId,y.messageHash])}return a};const H0=t=>BigInt(t*1e18);
const $0=t=>{const e=new S.HTTPTransport(t),f=new S.RequestManager([e]);return new S.Client(f)};let A0=class{constructor(e){
this.rpcClient=$0(e.endpoint),this.timeout=e.timeout!==void 0?e.timeout:2e4}async request(e){return this.
rpcClient.request(e,this.timeout)}connect(){}closeConnection(){this.rpcClient.close()}};class E0{constructor(e){
this.timeout=e.timeout!==void 0?e.timeout:2e4,r(typeof window<"u","MetaMaskTransport can be used in \
the browser only"),r(typeof window.ethereum<"u","No MetaMask provider found. Please install MetaMask\
 browser extension before using MetaMaskSigner"),this.provider=window.ethereum}async request(e){return this.
provider.request(e)}connect(){this.provider.request({method:"eth_requestAccounts"})}closeConnection(){}}
let D0=class{};let X=class extends O{constructor({shardId:e,...f}){super(`Expected a valid shardId b\
ut got: ${e}`,{...f})}};var Y=[{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"addr",
type:"address"}],name:"Deploy",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",
name:"addr",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"S\
end",type:"event"},{inputs:[{internalType:"bytes",name:"owner_pubkey",type:"bytes"},{internalType:"b\
ytes32",name:"salt",type:"bytes32"},{internalType:"uint256",name:"value",type:"uint256"}],name:"crea\
teWallet",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"nonpayable",type:"\
function"},{inputs:[{internalType:"bytes",name:"message",type:"bytes"}],name:"send",outputs:[],stateMutability:"\
payable",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"by\
tes",name:"",type:"bytes"}],name:"verifyExternal",outputs:[{internalType:"bool",name:"",type:"bool"}],
stateMutability:"view",type:"function"},{inputs:[{internalType:"address payable",name:"addr",type:"a\
ddress"},{internalType:"uint256",name:"value",type:"uint256"}],name:"withdrawTo",outputs:[],stateMutability:"\
nonpayable",type:"function"}];const Q=class x{constructor(e){this.client=e}async withdrawTo(e,f=1000000000000000000n,a){
const[s,b]=await Promise.all([a??this.client.getMessageCount(x.address,"latest"),this.client.chainId()]),
i=n.encodeFunctionData({abi:Y,functionName:"withdrawTo",args:[e.toLowerCase(),f]}),c=new M({isDeploy:!1,
to:n.hexToBytes(x.address),chainId:b,seqno:s,data:n.hexToBytes(i),authData:new Uint8Array(0)}),o=c.encode();
return await this.client.sendRawMessage(n.bytesToHex(o)),c.hash()}async withdrawToWithRetry(e,f=1000000000000000000n,a=5){
let s=0;for(;s++<a;)try{const[b,i]=await Promise.all([this.client.getMessageCount(x.address,"latest"),
this.client.chainId()]),c=n.encodeFunctionData({abi:Y,functionName:"withdrawTo",args:[e.toLowerCase(),
f]}),o=new M({isDeploy:!1,to:n.hexToBytes(x.address),chainId:i,seqno:b,data:n.hexToBytes(c),authData:new Uint8Array(
0)}),y=o.encode();await this.client.sendRawMessage(n.bytesToHex(y));const h=n.bytesToHex(o.hash()),T=await Promise.
race([new Promise(m=>setTimeout(()=>m([]),1e4)),J(this.client,R(x.address),h)]);if(T.length===0||T.some(
m=>!m.success))continue;return h}catch(b){if(await new Promise(i=>setTimeout(i,1e3)),s>=a)throw b}throw new Error(
"Failed to withdraw to the given address")}};Q.address="0x000100000000000000000000000000000FA00CE7";
let k0=Q;const C0="0x608060405260405162001eff38038062001eff8339818101604052810190620000299190620001c\
6565b805f90816200003991906200044c565b505062000530565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80f\
d5b5f601f19601f8301169050919050565b7f4e487b710000000000000000000000000000000000000000000000000000000\
05f52604160045260245ffd5b620000a2826200005a565b810181811067ffffffffffffffff82111715620000c457620000c\
36200006a565b5b80604052505050565b5f620000d862000041565b9050620000e6828262000097565b919050565b5f67fff\
fffffffffffff8211156200010857620001076200006a565b5b62000113826200005a565b9050602081019050919050565b5\
f5b838110156200013f57808201518184015260208101905062000122565b5f8484015250505050565b5f620001606200015\
a84620000eb565b620000cd565b9050828152602081018484840111156200017f576200017e62000056565b5b6200018c848\
28562000120565b509392505050565b5f82601f830112620001ab57620001aa62000052565b5b8151620001bd84826020860\
16200014a565b91505092915050565b5f60208284031215620001de57620001dd6200004a565b5b5f82015167fffffffffff\
fffff811115620001fe57620001fd6200004e565b5b6200020c8482850162000194565b91505092915050565b5f815190509\
19050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5\
f60028204905060018216806200026457607f821691505b6020821081036200027a57620002796200021f565b5b509190505\
65b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088\
302620002de7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002a1565b620002ea8\
683620002a1565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5\
f620003346200032e620003288462000302565b6200030b565b62000302565b9050919050565b5f819050919050565b62000\
34f8362000314565b620003676200035e826200033b565b848454620002ad565b825550505050565b5f90565b6200037d620\
0036f565b6200038a81848462000344565b505050565b5b81811015620003b157620003a55f8262000373565b60018101905\
062000390565b5050565b601f8211156200040057620003ca8162000280565b620003d58462000292565b810160208510156\
20003e5578190505b620003fd620003f48562000292565b8301826200038f565b50505b505050565b5f82821c90509291505\
0565b5f620004225f198460080262000405565b1980831691505092915050565b5f6200043c838362000411565b915082600\
2028217905092915050565b620004578262000215565b67ffffffffffffffff8111156200047357620004726200006a565b5\
b6200047f82546200024c565b6200048c828285620003b5565b5f60209050601f831160018114620004c2575f8415620004a\
d578287015190505b620004b985826200042f565b86555062000528565b601f198416620004d28662000280565b5f5b82811\
015620004fb57848901518255600182019150602085019450602081019050620004d4565b868310156200051b57848901516\
2000517601f89168262000411565b8355505b6001600288020188555050505b505050505050565b6119c1806200053e5f395\
ff3fe60806040526004361061007e575f3560e01c80639647c0161161004d5780639647c0161461013d578063be4b1772146\
10159578063c248ab2014610175578063f5b8214a1461019157610085565b80632bb1ae7c146100895780634f7d1d5814610\
0b157806355b517cb146100d9578063796d7f561461010157610085565b3661008557005b5f80fd5b348015610094575f80f\
d5b506100af60048036038101906100aa9190610bc3565b6101b9565b005b3480156100bc575f80fd5b506100d7600480360\
38101906100d29190610dd3565b610252565b005b3480156100e4575f80fd5b506100ff60048036038101906100fa9190610\
e88565b61034e565b005b34801561010c575f80fd5b5061012760048036038101906101229190610f32565b6103f2565b604\
0516101349190610f9e565b60405180910390f35b61015760048036038101906101529190610fb7565b6104d1565b005b610\
173600480360381019061016e9190610ff5565b6105d3565b005b61018f600480360381019061018a91906110d1565b6106d\
5565b005b34801561019c575f80fd5b506101b760048036038101906101b2919061124e565b6107bd565b005b6101c161086\
4565b15610201576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610\
1f8906113ba565b60405180910390fd5b61024e5a83838080601f01602080910402602001604051908101604052809392919\
08181526020018383808284375f81840152601f19601f82011690508083019250505050505050610970565b5050565b61025\
a610864565b1561029a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600\
401610291906113ba565b60405180910390fd5b5f8473ffffffffffffffffffffffffffffffffffffffff168385908460405\
16102c39190611444565b5f60405180830381858888f193505050503d805f81146102fe576040519150601f19603f3d01168\
2016040523d82523d5f602084013e610303565b606091505b5050905080610347576040517f08c379a000000000000000000\
000000000000000000000000000000000000000815260040161033e906114a4565b60405180910390fd5b5050505050565b6\
10356610864565b15610396576040517f08c379a000000000000000000000000000000000000000000000000000000000815\
260040161038d906113ba565b60405180910390fd5b6103e887878888888888888080601f016020809104026020016040519\
0810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050610\
98e565b5050505050505050565b5f6104c85f8054610402906114ef565b80601f01602080910402602001604051908101604\
0528092919081815260200182805461042e906114ef565b80156104795780601f10610450576101008083540402835291602\
00191610479565b820191905f5260205f20905b81548152906001019060200180831161045c57829003601f168201915b505\
05050508585858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840\
152601f19601f820116905080830192505050505050506109af565b90509392505050565b6104d9610864565b15610519576\
040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610510906113ba565b6\
0405180910390fd5b5f3073ffffffffffffffffffffffffffffffffffffffff1690505f61271090506105cc7201222222222\
2222222222222222222222222225f80845f600a87610561919061154c565b888b8b61056e575f610570565b305b604051602\
401610582939291906115ab565b60405160208183030381529060405263e7d3fe6b60e01b6020820180517bfffffffffffff\
fffffffffffffffffffffffffffffffffffffffffff838183161783525050505061098e565b5050505050565b6105db61086\
4565b1561061b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610\
612906113ba565b60405180910390fd5b5f3073ffffffffffffffffffffffffffffffffffffffff1690505f61c3509050610\
6ce72012222222222222222222222222222222222225f80845f600a876002610665919061154c565b61066f919061154c565\
b888b8b604051602401610684939291906115ab565b604051602081830303815290604052630ad58d2f60e01b60208201805\
17bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061098e565b505050505\
0565b6106dd610864565b1561071d576040517f08c379a000000000000000000000000000000000000000000000000000000\
0008152600401610714906113ba565b60405180910390fd5b5f5a90506107b67201222222222222222222222222222222222\
2225f80845f600a87610749919061154c565b8a5f8b8b610757575f610759565b305b60405160240161076c9493929190611\
622565b604051602081830303815290604052637166eb4960e01b6020820180517bfffffffffffffffffffffffffffffffff\
fffffffffffffffffffffff838183161783525050505061098e565b5050505050565b6107c5610864565b156108055760405\
17f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc906113ba565b60405\
180910390fd5b6108588989898989888a89898080601f0160208091040260200160405190810160405280939291908181526\
020018383808284375f81840152601f19601f82011690508083019250505050505050610ab5565b505050505050505050505\
65b5f60605f8060ff73ffffffffffffffffffffffffffffffffffffffff168360405161088f9190611444565b5f604051808\
30381855afa9150503d805f81146108c7576040519150601f19603f3d011682016040523d82523d5f602084013e6108cc565\
b606091505b509150915081610911576040517f08c379a000000000000000000000000000000000000000000000000000000\
0008152600401610908906116b6565b60405180910390fd5b5f815111610954576040517f08c379a00000000000000000000\
0000000000000000000000000000000000000815260040161094b90611744565b60405180910390fd5b80806020019051810\
1906109689190611776565b935050505090565b5f815190505f8082602085015f60fc88f1610989575f80fd5b505050565b5\
f60606109a1898989898989878a610ab5565b915050979650505050505050565b5f808484846040516020016109c69392919\
06117e9565b60405160208183030381529060405290505f80606060fe73ffffffffffffffffffffffffffffffffffffffff1\
684604051610a019190611444565b5f60405180830381855afa9150503d805f8114610a39576040519150601f19603f3d011\
682016040523d82523d5f602084013e610a3e565b606091505b50809250819450505082610a87576040517f08c379a000000\
0000000000000000000000000000000000000000000000000008152600401610a7e906116b6565b60405180910390fd5b5f8\
1511115610aa75780806020019051810190610aa49190611776565b91505b819450505050509392505050565b5f8060fd73f\
fffffffffffffffffffffffffffffffffffffff16632495aa6d86888d8d8d8d8b8b6040518963ffffffff1660e01b8152600\
401610afe9796959493929190611910565b60206040518083038185885af1158015610b1a573d5f803e3d5ffd5b505050505\
06040513d601f19601f82011682018060405250810190610b3f9190611776565b90508091505098975050505050505050565\
b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f8083601f840112610b8357610b82610b62565b5\
b8235905067ffffffffffffffff811115610ba057610b9f610b66565b5b602083019150836001820283011115610bbc57610\
bbb610b6a565b5b9250929050565b5f8060208385031215610bd957610bd8610b5a565b5b5f83013567ffffffffffffffff8\
11115610bf657610bf5610b5e565b5b610c0285828601610b6e565b92509250509250929050565b5f73fffffffffffffffff\
fffffffffffffffffffffff82169050919050565b5f610c3782610c0e565b9050919050565b610c4781610c2d565b8114610\
c51575f80fd5b50565b5f81359050610c6281610c3e565b92915050565b5f819050919050565b610c7a81610c68565b81146\
10c84575f80fd5b50565b5f81359050610c9581610c71565b92915050565b5f80fd5b5f601f19601f8301169050919050565\
b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610ce5826\
10c9f565b810181811067ffffffffffffffff82111715610d0457610d03610caf565b5b80604052505050565b5f610d16610\
b51565b9050610d228282610cdc565b919050565b5f67ffffffffffffffff821115610d4157610d40610caf565b5b610d4a8\
2610c9f565b9050602081019050919050565b828183375f83830152505050565b5f610d77610d7284610d27565b610d0d565\
b905082815260208101848484011115610d9357610d92610c9b565b5b610d9e848285610d57565b509392505050565b5f826\
01f830112610dba57610db9610b62565b5b8135610dca848260208601610d65565b91505092915050565b5f805f806080858\
7031215610deb57610dea610b5a565b5b5f610df887828801610c54565b9450506020610e0987828801610c87565b9350506\
040610e1a87828801610c87565b925050606085013567ffffffffffffffff811115610e3b57610e3a610b5e565b5b610e478\
7828801610da6565b91505092959194509250565b5f8115159050919050565b610e6781610e53565b8114610e71575f80fd5\
b50565b5f81359050610e8281610e5e565b92915050565b5f805f805f805f60c0888a031215610ea357610ea2610b5a565b5\
b5f610eb08a828b01610c54565b9750506020610ec18a828b01610c54565b9650506040610ed28a828b01610c87565b95505\
06060610ee38a828b01610e74565b9450506080610ef48a828b01610c87565b93505060a088013567ffffffffffffffff811\
115610f1557610f14610b5e565b5b610f218a828b01610b6e565b925092505092959891949750929550565b5f805f6040848\
6031215610f4957610f48610b5a565b5b5f610f5686828701610c87565b935050602084013567ffffffffffffffff8111156\
10f7757610f76610b5e565b5b610f8386828701610b6e565b92509250509250925092565b610f9881610e53565b825250505\
65b5f602082019050610fb15f830184610f8f565b92915050565b5f8060408385031215610fcd57610fcc610b5a565b5b5f6\
10fda85828601610c87565b9250506020610feb85828601610e74565b9150509250929050565b5f806040838503121561100\
b5761100a610b5a565b5b5f61101885828601610c87565b925050602061102985828601610c54565b9150509250929050565\
b5f67ffffffffffffffff82111561104d5761104c610caf565b5b61105682610c9f565b9050602081019050919050565b5f6\
1107561107084611033565b610d0d565b90508281526020810184848401111561109157611090610c9b565b5b61109c84828\
5610d57565b509392505050565b5f82601f8301126110b8576110b7610b62565b5b81356110c8848260208601611063565b9\
1505092915050565b5f805f606084860312156110e8576110e7610b5a565b5b5f6110f586828701610c87565b93505060208\
4013567ffffffffffffffff81111561111657611115610b5e565b5b611122868287016110a4565b925050604061113386828\
701610e74565b9150509250925092565b5f67ffffffffffffffff82111561115757611156610caf565b5b602082029050602\
081019050919050565b5f80fd5b5f6040828403121561118157611180611168565b5b61118b6040610d0d565b90505f61119\
a84828501610c87565b5f8301525060206111ad84828501610c87565b60208301525092915050565b5f6111cb6111c684611\
13d565b610d0d565b905080838252602082019050604084028301858111156111ee576111ed610b6a565b5b835b818110156\
112175780611203888261116c565b8452602084019350506040810190506111f0565b5050509392505050565b5f82601f830\
11261123557611234610b62565b5b81356112458482602086016111b9565b91505092915050565b5f805f805f805f805f610\
1008a8c03121561126c5761126b610b5a565b5b5f6112798c828d01610c54565b995050602061128a8c828d01610c54565b9\
85050604061129b8c828d01610c54565b97505060606112ac8c828d01610c87565b96505060806112bd8c828d01610e74565\
b95505060a08a013567ffffffffffffffff8111156112de576112dd610b5e565b5b6112ea8c828d01611221565b94505060c\
06112fb8c828d01610c87565b93505060e08a013567ffffffffffffffff81111561131c5761131b610b5e565b5b6113288c8\
28d01610b6e565b92509250509295985092959850929598565b5f82825260208201905092915050565b7f547279696e67207\
46f2063616c6c2065787465726e616c2066756e6374696f6e5f8201527f207769746820696e7465726e616c206d657373616\
76500000000000000000000602082015250565b5f6113a460368361133a565b91506113af8261134a565b604082019050919\
050565b5f6020820190508181035f8301526113d181611398565b9050919050565b5f81519050919050565b5f81905092915\
050565b5f5b838110156114095780820151818401526020810190506113ee565b5f8484015250505050565b5f61141e82611\
3d8565b61142881856113e2565b93506114388185602086016113ec565b80840191505092915050565b5f61144f828461141\
4565b915081905092915050565b7f43616c6c206661696c65640000000000000000000000000000000000000000005f82015\
250565b5f61148e600b8361133a565b91506114998261145a565b602082019050919050565b5f6020820190508181035f830\
1526114bb81611482565b9050919050565b7f4e487b710000000000000000000000000000000000000000000000000000000\
05f52602260045260245ffd5b5f600282049050600182168061150657607f821691505b60208210810361151957611518611\
4c2565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045\
260245ffd5b5f61155682610c68565b915061156183610c68565b925082820261156f81610c68565b9150828204841483151\
76115865761158561151f565b5b5092915050565b61159681610c68565b82525050565b6115a581610c2d565b82525050565\
b5f6060820190506115be5f83018661158d565b6115cb602083018561158d565b6115d8604083018461159c565b949350505\
050565b5f81519050919050565b5f6115f4826115e0565b6115fe818561133a565b935061160e8185602086016113ec565b6\
1161781610c9f565b840191505092915050565b5f6080820190506116355f83018761158d565b611642602083018661159c5\
65b818103604083015261165481856115ea565b9050611663606083018461159c565b95945050505050565b7f507265636f6\
d70696c656420636f6e74726163742063616c6c206661696c65645f82015250565b5f6116a060208361133a565b91506116a\
b8261166c565b602082019050919050565b5f6020820190508181035f8301526116cd81611694565b9050919050565b7f274\
9535f494e5445524e414c5f4d455353414745272072657475726e7320696e5f8201527f76616c69642064617461000000000\
00000000000000000000000000000000000602082015250565b5f61172e602a8361133a565b9150611739826116d4565b604\
082019050919050565b5f6020820190508181035f83015261175b81611722565b9050919050565b5f8151905061177081610\
e5e565b92915050565b5f6020828403121561178b5761178a610b5a565b5b5f61179884828501611762565b9150509291505\
0565b5f82825260208201905092915050565b5f6117bb826113d8565b6117c581856117a1565b93506117d58185602086016\
113ec565b6117de81610c9f565b840191505092915050565b5f6060820190508181035f83015261180181866117b1565b905\
0611810602083018561158d565b818103604083015261182281846117b1565b9050949350505050565b5f815190509190505\
65b5f82825260208201905092915050565b5f819050602082019050919050565b61185e81610c68565b82525050565b60408\
2015f8201516118785f850182611855565b50602082015161188b6020850182611855565b50505050565b5f61189c8383611\
864565b60408301905092915050565b5f602082019050919050565b5f6118be8261182c565b6118c88185611836565b93506\
118d383611846565b805f5b838110156119035781516118ea8882611891565b97506118f5836118a8565b925050600181019\
0506118d6565b5085935050505092915050565b5f60e0820190506119235f83018a610f8f565b611930602083018961159c5\
65b61193d604083018861159c565b61194a606083018761159c565b611957608083018661158d565b81810360a0830152611\
96981856118b4565b905081810360c083015261197d81846117b1565b90509897505050505050505056fea26469706673582\
212201e973eb5c7959750c4e77210d3e9a58cf9005e2500e827031ba7d910dcc1907364736f6c63430008150033";var q=[
{inputs:[{internalType:"bytes",name:"_pubkey",type:"bytes"}],stateMutability:"payable",type:"constru\
ctor"},{inputs:[{internalType:"address",name:"dst",type:"address"},{internalType:"address",name:"ref\
undTo",type:"address"},{internalType:"uint256",name:"gas",type:"uint256"},{internalType:"bool",name:"\
deploy",type:"bool"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"bytes",name:"\
callData",type:"bytes"}],name:"asyncCall",outputs:[],stateMutability:"nonpayable",type:"function"},{
inputs:[{internalType:"address",name:"dst",type:"address"},{internalType:"address",name:"refundTo",type:"\
address"},{internalType:"address",name:"bounceTo",type:"address"},{internalType:"uint256",name:"gas",
type:"uint256"},{internalType:"bool",name:"deploy",type:"bool"},{components:[{internalType:"uint256",
name:"id",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struc\
t Nil.Token[]",name:"tokens",type:"tuple[]"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"\
bytes",name:"callData",type:"bytes"}],name:"asyncCall",outputs:[],stateMutability:"nonpayable",type:"\
function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"string",name:"\
name",type:"string"},{internalType:"bool",name:"withdraw",type:"bool"}],name:"createToken",outputs:[],
stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint\
256"},{internalType:"bool",name:"withdraw",type:"bool"}],name:"mintToken",outputs:[],stateMutability:"\
payable",type:"function"},{inputs:[{internalType:"bytes",name:"message",type:"bytes"}],name:"send",outputs:[],
stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"dst",type:"addr\
ess"},{internalType:"uint256",name:"gas",type:"uint256"},{internalType:"uint256",name:"value",type:"\
uint256"},{internalType:"bytes",name:"call_data",type:"bytes"}],name:"syncCall",outputs:[],stateMutability:"\
nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"hash",type:"uint256"},{internalType:"\
bytes",name:"signature",type:"bytes"}],name:"verifyExternal",outputs:[{internalType:"bool",name:"",type:"\
bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"\
uint256"},{internalType:"address",name:"to",type:"address"}],name:"withdrawToken",outputs:[],stateMutability:"\
payable",type:"function"},{stateMutability:"payable",type:"receive"}];const W=class k{static calculateWalletAddress({
pubKey:e,shardId:f,salt:a}){const{address:s}=D({abi:q,bytecode:k.code,args:[n.bytesToHex(e)],salt:a,
shard:f});return s}constructor({pubkey:e,shardId:f,address:a,client:s,salt:b,signer:i}){this.pubkey=
c0(e),this.client=s,this.signer=i,r(!(b&&a),"You should use salt and shard for calculating address o\
r address itself, not both to avoid issue."),this.address=a?w(a):k.calculateWalletAddress({pubKey:this.
pubkey,shardId:f,salt:b}),b&&(this.salt=F(b)),this.shardId=R(this.address)}getAddressHex(){return n.
bytesToHex(this.address)}async selfDeploy(e=!0){r(typeof this.salt<"u","Salt is required for externa\
l deployment. Please provide salt for walelt");const[f,a]=await Promise.all([await this.client.getBalance(
this.getAddressHex(),"latest"),await this.client.getCode(this.getAddressHex(),"latest").catch(()=>Uint8Array.
from([]))]);r(a.length===0,"Contract already deployed"),r(f>0n,"Insufficient balance");const{data:s}=D(
{abi:q,bytecode:k.code,args:[n.bytesToHex(this.pubkey)],salt:this.salt,shard:this.shardId}),{hash:b}=await this.
requestToWallet({data:s,deploy:!0,seqno:0});if(e)for(;!((await this.client.getCode(this.getAddressHex(),
"latest")).length>0);)await new Promise(i=>setTimeout(i,1e3));return b}async checkDeploymentStatus(){
return(await this.client.getCode(this.getAddressHex(),"latest")).length>0}async requestToWallet(e,f=!0){
const[a,s]=await Promise.all([e.seqno??this.client.getMessageCount(this.getAddressHex(),"latest"),e.
chainId??this.client.chainId()]),b=await L({isDeploy:e.deploy,to:this.address,chainId:s,seqno:a,data:e.
data},this.signer);return f&&await this.client.sendRawMessage(b.raw),b}async sendMessage({to:e,refundTo:f,
bounceTo:a,data:s,deploy:b,seqno:i,gas:c,value:o,tokens:y,chainId:h}){const T=n.bytesToHex(w(e)),m=n.
bytesToHex(w(f??this.address)),e0=n.bytesToHex(w(a??this.address)),t0=s?s instanceof Uint8Array?n.bytesToHex(
s):s:"0x",f0=n.encodeFunctionData({abi:q,functionName:"asyncCall",args:[T,m,e0,c,!!b,y??[],o??0n,t0]}),
{hash:a0}=await this.requestToWallet({data:n.hexToBytes(f0),deploy:!1,seqno:i,chainId:h});return n.bytesToHex(
a0)}async sendRawInternalMessage(e){const{hash:f}=await this.requestToWallet({data:e,deploy:!1});return n.
bytesToHex(f)}async deployContract({shardId:e,bytecode:f,abi:a,args:s,salt:b,value:i,gas:c,seqno:o,chainId:y}){
let h;a&&s?h={shard:e,bytecode:f,abi:a,args:s,salt:b}:(r(a||s,"ABI and args should be provided toget\
her or not provided at all."),h={shard:e,bytecode:f,salt:b});const{data:T,address:m}=D(h);return{hash:await this.
sendMessage({to:m,refundTo:this.getAddressHex(),data:T,value:i??0n,deploy:!0,gas:c,seqno:o,chainId:y}),
address:n.bytesToHex(m)}}async syncSendMessage({to:e,data:f,seqno:a,gas:s,value:b}){const i=n.bytesToHex(
w(e)),c=f?f instanceof Uint8Array?n.bytesToHex(f):f:"0x",o=n.encodeFunctionData({abi:q,functionName:"\
syncCall",args:[i,s,b,c]}),{hash:y}=await this.requestToWallet({data:n.hexToBytes(o),deploy:!1,seqno:a});
return n.bytesToHex(y)}async getBalance(){return this.client.getBalance(this.getAddressHex(),"latest")}};
W.code=n.hexToBytes(C0),W.abi=q;let S0=W;var P0=[{inputs:[{internalType:"bytes",name:"_pubkey",type:"\
bytes"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"uint256",name:"amo\
unt",type:"uint256"},{internalType:"address",name:"owner",type:"address"},{internalType:"string",name:"\
name",type:"string"},{internalType:"address",name:"sendTo",type:"address"}],name:"create",outputs:[{
internalType:"bool",name:"",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"\
uint256",name:"id",type:"uint256"}],name:"getName",outputs:[{internalType:"string",name:"",type:"str\
ing"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"id",type:"uint\
256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address",name:"sendTo",type:"\
address"}],name:"mint",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"\
uint256",name:"",type:"uint256"}],name:"tokens",outputs:[{internalType:"uint256",name:"id",type:"uin\
t256"},{internalType:"string",name:"name",type:"string"},{internalType:"address",name:"owner",type:"\
address"},{internalType:"uint256",name:"totalSupply",type:"uint256"}],stateMutability:"view",type:"f\
unction"},{inputs:[{internalType:"uint256",name:"hash",type:"uint256"},{internalType:"bytes",name:"s\
ignature",type:"bytes"}],name:"verifyExternal",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"\
view",type:"function"},{inputs:[{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uin\
t256",name:"amount",type:"uint256"},{internalType:"address",name:"to",type:"address"}],name:"withdra\
w",outputs:[],stateMutability:"payable",type:"function"},{stateMutability:"payable",type:"receive"}];
const U0=P0,N0="0x0001222222222222222222222222222222222222";exports.BlockNotFoundError=K,exports.ExternalMessageEnvelope=
M,exports.Faucet=k0,exports.HttpTransport=A0,exports.ITransport=D0,exports.InternalMessageEnvelope=y0,
exports.InvalidShardIdError=X,exports.LocalECDSAKeySigner=B0,exports.MINTER_ABI=U0,exports.MINTER_ADDRESS=
N0,exports.MetaMaskSigner=q0,exports.MetaMaskTransport=E0,exports.PublicClient=I0,exports.SszMessageSchema=
N,exports.SszSignedMessageSchema=B,exports.WalletV1=S0,exports.addHexPrefix=u,exports.assertIsAddress=
T0,exports.assertIsBuffer=h0,exports.assertIsHexString=p0,exports.assertIsValidBlock=w0,exports.assertIsValidDeployData=
g0,exports.assertIsValidPrivateKey=j,exports.assertIsValidSendMessageData=m0,exports.assertIsValidShardId=
p,exports.bytesToString=r0,exports.calculateAddress=_,exports.convertEthToWei=H0,exports.externalDeploymentMessage=
u0,exports.externalMessageEncode=L,exports.generateRandomPrivateKey=M0,exports.getAddressFromPublicKey=
G,exports.getPublicKey=z,exports.getShardIdFromAddress=R,exports.hexToBigInt=I,exports.hexToNumber=$,
exports.isAddress=E,exports.isHexString=P,exports.isValidBlock=V,exports.poseidonHash=v,exports.refineAddress=
w,exports.removeHexPrefix=g,exports.toHex=A,exports.waitTillCompleted=J;
//# sourceMappingURL=niljs.cjs.map
