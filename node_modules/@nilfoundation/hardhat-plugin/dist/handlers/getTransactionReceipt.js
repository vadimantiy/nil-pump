"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransactionReceipt = getTransactionReceipt;
const interceptors_1 = require("../interceptors");
const conversion_1 = require("../utils/conversion");
async function getTransactionReceipt(method, params, context) {
    const [preparedMethod, preparedParams] = prepareInput(method, params, context);
    if (context.debug) {
        console.log(`Method ${preparedMethod} params ${JSON.stringify(preparedParams)}`);
    }
    const result = await (0, interceptors_1.executeOriginalFunction)(preparedMethod, preparedParams, context);
    const response = adaptResponse(result, preparedParams);
    if (context.debug) {
        console.log(`Response ${JSON.stringify(response)}`);
    }
    return response;
}
function prepareInput(method, params, context) {
    return [
        "eth_getInMessageReceipt",
        [
            context.hre.config.shardId ?? (0, conversion_1.shardNumber)(context.wallet.getAddressHex()),
            ...params,
        ],
    ];
}
function adaptResponse(result, params) {
    if (!result) {
        return null;
    }
    result.transactionIndex = 1;
    result.blockNumber = String(result.blockNumber);
    result.status =
        typeof result.success === "boolean"
            ? result.success
                ? "0x1"
                : "0x0"
            : result.success;
    result.contractAddress = result.contractAddress
        ? String(result.contractAddress)
        : null;
    result.gasUsed = String(result.gasUsed);
    result.logs = [];
    result.index = 1;
    result.hash = String(params[1]);
    result.transactionHash = String(params[1]);
    result.cumulativeGasUsed = result.gasUsed;
    return result;
}
