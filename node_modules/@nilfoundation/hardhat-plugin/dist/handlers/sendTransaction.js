"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendTransaction = sendTransaction;
const niljs_1 = require("@nilfoundation/niljs");
const conversion_1 = require("../utils/conversion");
const string_1 = require("../utils/string");
async function sendTransaction(params, context) {
    if (context.debug) {
        console.log(`Method eth_sendTransaction params ${JSON.stringify(params)}`);
    }
    if (params[0].to === undefined) {
        return prepareDeployment(params, context);
    }
    return handleDirectTransaction(params, context);
}
async function prepareDeployment(params, context) {
    const deployed = await context.wallet.deployContract({
        shardId: context.hre.config.shardId ?? (0, conversion_1.shardNumber)(context.wallet.getAddressHex()),
        bytecode: (0, conversion_1.hexStringToUint8Array)(params[0].data),
        salt: BigInt(Math.floor(Math.random() * 100000)),
        feeCredit: context.feeCredit,
        value: params[0].value !== undefined ? BigInt(params[0].value) : 0n,
    });
    if (context.debug) {
        console.log(`Response deployment ${JSON.stringify(deployed)}`);
    }
    const receipt = await (0, niljs_1.waitTillCompleted)(context.client, (0, conversion_1.shardNumber)(context.wallet.getAddressHex()), deployed.hash);
    if (context.debug) {
        console.log(`Response deployment receipt ${JSON.stringify(receipt, string_1.bigintReplacer)}`);
    }
    return receipt[0].outMessages?.[0] ?? "";
}
async function handleDirectTransaction(params, context) {
    const hash = await context.wallet.sendMessage({
        to: (0, conversion_1.hexStringToUint8Array)(params[0].to),
        feeCredit: context.directTxFeeCredit ?? 10000000n,
        value: params[0].value !== undefined ? BigInt(params[0].value) : 0n,
        data: (0, conversion_1.hexStringToUint8Array)(params[0].data),
    });
    if (context.debug) {
        console.log(`Response tx hash ${hash}`);
    }
    const receipt = await (0, niljs_1.waitTillCompleted)(context.client, (0, conversion_1.shardNumber)(context.wallet.getAddressHex()), hash);
    if (context.debug) {
        console.log(`Response tx receipt ${JSON.stringify(receipt, string_1.bigintReplacer)}`);
    }
    return hash;
}
