/**!
 * @nilfoundation/niljs v0.13.0
 *
 * @copyright (c) 2024 =nil; Foundation.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
"use strict";var y0=require("@iden3/js-crypto"),H=require("@chainsafe/persistent-merkle-tree"),g=require("@chainsafe/ssz"),
y=require("@noble/curves/abstract/utils"),r=require("viem"),d=require("tiny-invariant"),P=require("@noble/curves/secp256k1"),
h0=require("@scure/bip39"),U=require("@open-rpc/client-js");function p0(t){var e=Object.create(null);
return t&&Object.keys(t).forEach(function(f){if(f!=="default"){var a=Object.getOwnPropertyDescriptor(
t,f);Object.defineProperty(e,f,a.get?a:{enumerable:!0,get:function(){return t[f]}})}}),e.default=t,Object.
freeze(e)}var v=p0(y0);let D=class b0 extends Error{constructor(e,{isOperational:f=!0,cause:a,docsPath:s}={}){
super(),this.name=this.constructor.name,this.isOperational=f,this.cause=a,this.docsPath=s,this.message=
`${e??"An error occured"}
      Name: ${this.name}`,s&&(this.message=`${this.message}
      Docs: see \${this.docsPath}`),Object.setPrototypeOf(this,b0.prototype)}};const g0=/^[0-9a-fA-F]+$/,
K=t=>typeof t=="string"&&t.startsWith("0x")&&g0.test(B(t)),B=t=>t.startsWith("0x")?t.slice(2):t,l=t=>`\
0x${B(t)}`,m0=t=>l(t.reduce((e,f)=>e+f.replace("0x",""),""));const L=t=>{if(t>=48&&t<=57)return t-48;
if(t>=65&&t<=70)return t-55;if(t>=97&&t<=102)return t-87},E=t=>Number.parseInt(B(t),16),q=t=>BigInt(
l(t)),o=t=>{let e=t.slice(2);e.length%2&&(e=`0${e}`);const f=e.length/2,a=new Uint8Array(f);for(let s=0,
n=0;s<f;s++){const b=L(e.charCodeAt(n++)),c=L(e.charCodeAt(n++));if(b===void 0||c===void 0)throw new D(
`Invalid byte sequence ("${e[n-2]}${e[n-1]}" in "${e}").`);a[s]=b*16+c}return a};const w0=Array.from(
{length:256},(t,e)=>e.toString(16).padStart(2,"0")),T0=t=>{let e="";for(let f=0;f<t.length;f++)e+=t.
charCodeAt(f).toString(16);return l(e)},I0=t=>{let e="";for(let f=0;f<t.length;f++)e+=w0[t[f]];return l(
e)},v0=t=>{const e=BigInt(t),f=BigInt(Number.MAX_SAFE_INTEGER),a=0;if(typeof t!="bigint"&&(f&&e>f||e<
a))throw new a0({max:f,min:a,value:e});return l(e.toString(16))},x=t=>typeof t=="string"?T0(t):t instanceof
Uint8Array?I0(t):typeof t=="number"||typeof t=="bigint"?v0(t):l((t?1:0).toString(16));const B0=new TextDecoder(
"utf8"),x0=t=>B0.decode(t),T=t=>x(t);let R;"default"in v&&typeof v.default=="object"&&v.default!==null&&
"poseidon"in v.default&&typeof v.default.poseidon=="function"?R=v.default.poseidon:R=v.poseidon;const I=t=>R.
hashBytesX(t,16);H.setHasher({digest64(t,e){const f=I(y.concatBytes(t,e)),a=new Uint8Array(32);for(let s=0;s<
32;s++)a[31-s]=Number(f>>BigInt(s*8)&BigInt(255));return a},digest64HashObjects(t,e){const f=I(y.concatBytes(
H.hashObjectToUint8Array(t),H.hashObjectToUint8Array(e))),a=new Uint8Array(32);for(let s=0;s<32;s++)
a[31-s]=Number(f>>BigInt(s*8)&BigInt(255));return H.uint8ArrayToHashObject(a)}});const N={Uint8:new g.
UintNumberType(1),Uint32:new g.UintNumberType(4),Uint64:new g.UintNumberType(8),UintBn256:new g.UintBigintType(
32),Bool:new g.BooleanType},M0=new g.ByteVectorType(20),O=new g.ContainerType({deploy:N.Bool,feeCredit:N.
UintBn256,to:M0,chainId:N.Uint64,seqno:N.Uint64,data:new g.ByteListType(24576)}),F=new g.ContainerType(
{...O.fields,authData:new g.ByteListType(256)});const q0=/^0x[0-9a-fA-F]{40}$/,V=t=>typeof t=="strin\
g"&&q0.test(t),W=t=>typeof t=="string"?Number.parseInt(t.slice(2,6),16):t[0]<<8|t[1],z=(t,e,f)=>{if(!Number.
isInteger(t))throw new Error("Shard ID must be an integer");if(f.length!==32)throw new Error("Salt m\
ust be 32 bytes");if(e.length===0)throw new Error("Code must not be empty");if(t<0||t>65535)throw new Error(
"Invalid shard ID");const a=new Uint8Array(e.length+32);a.set(e),a.set(f,e.length);const s=I(a),n=y.
numberToBytesBE(t,2),b=y.numberToBytesBE(s,32);return new Uint8Array([...n,...b.slice(14)])},$=t=>{if(typeof t==
"string"){const e=o(t);if(e.length!==20)throw new Error("Invalid address length");return e}if(t.length!==
20)throw new Error("Invalid address length");return t};const G=t=>typeof t=="bigint"?o(l(t.toString(
16).padStart(64,"0"))).slice(0,32):(d(t.length===32,"Salt must be 32 bytes"),t),$0=t=>{const e=typeof t==
"string"?o(t):t;return d(t.length===33,"Invalid pubkey length"),e},X=({data:t,abi:e,functionName:f,args:a})=>!t&&
!e?"0x":(d(!(t&&e),"ABI and data cannot be provided together"),t?typeof t=="string"?t:T(t):(d(e&&f,"\
ABI and functionName is required"),r.encodeFunctionData({abi:e,functionName:f,args:a||[]})));const k=t=>{
const e=G(t.salt);let f;t.abi?f=o(r.encodeDeployData({abi:t.abi,bytecode:typeof t.bytecode=="string"?
t.bytecode:T(t.bytecode),args:t.args||[]})):f=typeof t.bytecode=="string"?o(t.bytecode):t.bytecode;const a=new Uint8Array(
[...f,...e]),s=z(t.shard,f,e);return{data:a,address:s}};class A{constructor({isDeploy:e,to:f,chainId:a,
seqno:s,data:n,authData:b}){this.isDeploy=e,this.to=f,this.chainId=a,this.seqno=s,this.data=n,this.authData=
b}encode(){return F.serialize({feeCredit:50000000n,seqno:this.seqno,chainId:this.chainId,to:this.to,
data:this.data,deploy:this.isDeploy,authData:this.authData})}hash(){const e=this.encode();return y.numberToBytesBE(
I(e),32)}signingHash(){const e=O.serialize({feeCredit:50000000n,seqno:this.seqno,chainId:this.chainId,
to:this.to,data:this.data,deploy:this.isDeploy});return y.numberToBytesBE(I(e),32)}async encodeWithSignature(e){
const f=await this.sign(e),a=F.serialize({feeCredit:50000000n,seqno:this.seqno,chainId:this.chainId,
to:this.to,data:this.data,deploy:this.isDeploy,authData:f}),s=y.numberToBytesBE(I(a),32);return{raw:a,
hash:s}}async sign(e){return e.sign(this.signingHash())}async updateAuthdata(e){return this.authData=
await this.sign(e),this.authData}hexAddress(){return T(this.to)}send(e){return e.sendRawMessage(this.
encode())}}class C0{}const A0=(t,e)=>{const{data:f,address:a}=k(t);return new A({isDeploy:!0,to:a,chainId:e,
seqno:0,data:f,authData:new Uint8Array(0)})},J=async(t,e)=>await new A({...t,authData:new Uint8Array(
0)}).encodeWithSignature(e);let _=class extends D{constructor({blockNumberOrHash:e,...f}){super(`Blo\
ck not found: ${e}`,{...f})}};const H0=0;const Y=t=>!0;const D0=(t,e)=>{d(K(t),e??`Expected a hex st\
ring but got ${t}`)},E0=(t,e)=>{d(t instanceof Uint8Array,e??`Expected a buffer but got ${t}`)},Q=(t,e)=>{
d(K(t)&&t.length===32*2+2,e??`Expected a valid private key, but got ${t}`)},N0=(t,e)=>{const{seqno:f,
pubkey:a,shardId:s}=t;f!==void 0&&d(f>=0,e??`Expected a valid 'seqno' but got ${f}`),a!==void 0&&d(typeof a==
"string",e??`Expected a valid 'pubkey' but got ${a}`),m(s)},k0=(t,e)=>{d(V(t),e??`Expected a valid a\
ddress but got ${t}`)},S0=(t,e)=>{d(Y(),e??`Expected a valid block but got ${t}`)},m=t=>{if(!(typeof t==
"number"&&Number.isInteger(t)&&t>=0&&t<65536&&t!==H0))throw new f0({shardId:t})};let P0=class{constructor(e){
this.transport=e.transport,this.shardId=e.shardId}async request(e){return this.transport.request(e)}getShardId(){
return this.shardId}setShardId(e){m(e),this.shardId=e}};class U0 extends P0{constructor(e){super(e)}async getBlockByHash(e,f=!1,a=this.
shardId){m(a);try{return await this.request({method:"eth_getBlockByHash",params:[a,e,f]})}catch(s){throw new _(
{blockNumberOrHash:e,cause:s})}}async getBlockByNumber(e,f=!1,a=this.shardId){m(a);try{return await this.
request({method:"eth_getBlockByNumber",params:[a,e,f]})}catch(s){throw new _({blockNumberOrHash:e,cause:s})}}async getBlockMessageCountByNumber(e,f=this.
shardId){return m(f),await this.request({method:"eth_getBlockTransactionCountByNumber",params:[f,e]})}async getBlockMessageCountByHash(e,f=this.
shardId){return m(f),await this.request({method:"eth_getBlockTransactionCountByHash",params:[f,e]})}async getCode(e,f){
const a=await this.request({method:"eth_getCode",params:[e,f??"latest"]});return o(a)}async getMessageCount(e,f){
const a=await this.request({method:"eth_getTransactionCount",params:[e,f??"latest"]});return E(a)}async getBalance(e,f){
const a=await this.request({method:"eth_getBalance",params:[l(e),f??"latest"]});return q(a)}async getMessageByHash(e,f=this.
shardId){m(f);const a=await this.request({method:"eth_getInMessageByHash",params:[f,e]});return{...a,
value:BigInt(a.value),gasLimit:BigInt(a.gasLimit),gasUsed:q(a.gasUsed),seqno:q(a.seqno),index:a.index?
E(a.index):0}}async getMessageReceiptByHash(e,f=this.shardId){m(f);const a=n=>({...n,gasUsed:BigInt(
n.gasUsed),gasPrice:n.gasPrice?BigInt(n.gasPrice):0n,outputReceipts:n.outputReceipts?.map(b=>b===null?
null:a(b))??null}),s=await this.request({method:"eth_getInMessageReceipt",params:[f,l(typeof e=="str\
ing"?e:T(e))]});return s===null?null:a(s)}async sendRawMessage(e){return await this.request({method:"\
eth_sendRawTransaction",params:[typeof e=="string"?e:l(T(e))]})}async getGasPrice(e){const f=await this.
request({method:"eth_gasPrice",params:[e]});return q(f)}async estimateGasLimit(){return BigInt(1e6)}async chainId(){
const e=await this.request({method:"eth_chainId",params:[]});return E(e)}async getCurrencies(e,f){const a=await this.
request({method:"eth_getCurrencies",params:[e,f]}),s={};if(a)for(const[n,b]of Object.entries(a))s[n]=
q(b);return s}async call(e,f,a){let s;e.abi?s=r.encodeFunctionData({abi:e.abi,functionName:e.functionName,
args:e.args||[]}):s=typeof e.data=="string"?e.data:l(T(e.data));const n=[{from:e.from||void 0,to:e.to,
data:s,value:x(e.value||0n),feeCredit:(e.feeCredit||5000000n).toString(10)},f];a&&n.push(a);const b=await this.
request({method:"eth_call",params:n});if(e.abi){const c=r.decodeFunctionResult({abi:e.abi,functionName:e.
functionName,data:b.data});return{...b,decodedData:c}}return b}}const K0=t=>l(x(h0.mnemonicToSeedSync(
t).slice(0,32)));const Z=(t,e=!1)=>{const f=P.secp256k1.getPublicKey(B(t),e);return l(y.bytesToHex(f))},
e0=(t,e)=>{m(e);const f=B(t),a=typeof f=="string"?y.hexToBytes(f):f,s=I(a),n=y.numberToBytesBE(e,2),
b=y.numberToBytesBE(s,32);return x(new Uint8Array([...n,...b.slice(14)]))};let R0=class{constructor(e){
this.publicKey=void 0,this.address=void 0;const{privateKey:f,mnemonic:a}=e;d(f||a,"Either privateKey\
 or mnemonic must be provided.");const s=a?K0(a):l(f);Q(s),this.privateKey=s}async sign(e){const f=P.
secp256k1.sign(e,B(this.privateKey)),{r:a,s,recovery:n}=f;return y.concatBytes(y.numberToBytesBE(a,32),
y.numberToBytesBE(s,32),y.numberToBytesBE(n,1))}async getPublicKey(){if(this.publicKey)return o(this.
publicKey);const e=Z(this.privateKey,!0);return this.publicKey=e,o(this.publicKey)}async getAddress(e){
if(this.address)return o(this.address);const f=await this.getPublicKey();return this.address=e0(T(f),
e),o(this.address)}};const O0=()=>x(P.secp256k1.utils.randomPrivateKey());let F0=class{constructor(){
d(typeof window<"u","MetaMaskSigner can be used in the browser only"),d(typeof window.ethereum<"u","\
No MetaMask provider found. Please install MetaMask browser extension before using MetaMaskSigner"),
this.provider=window.ethereum}async sign(e){return new Uint8Array(65)}async getAddress(){return new Uint8Array(
20)}async getPublicKey(){return new Uint8Array(33)}async connect(){await this.provider.request({method:"\
eth_requestAccounts"})}};const t0=async(t,e,f,a)=>{const s=a?.interval||1e3,n=a?.waitTillMainShard||
!0,b=[],c=[[e,f]];let h=0;for(;h!==c.length;){const[w,p]=c[h],u=await t.getMessageReceiptByHash(p,w);
if(!u){await new Promise(i=>setTimeout(i,s));continue}if(u.outMessages!==null&&u.outputReceipts&&u.outputReceipts.
filter(i=>i!==null).length!==u.outMessages.length){await new Promise(i=>setTimeout(i,s));continue}if(n&&
u.shardId!==0&&!u.includedInMain){await new Promise(i=>setTimeout(i,s));continue}if(h++,b.push(u),u.
outputReceipts)for(const i of u.outputReceipts)i!==null&&c.push([i.shardId,i.messageHash])}return b};
const W0=t=>BigInt(t*1e18);const _0=t=>{const e=new U.HTTPTransport(t),f=new U.RequestManager([e]);return new U.
Client(f)};let j0=class{constructor(e){this.rpcClient=_0(e.endpoint),this.timeout=e.timeout!==void 0?
e.timeout:2e4}async request(e){return this.rpcClient.request(e,this.timeout)}connect(){}closeConnection(){
this.rpcClient.close()}};class L0{constructor(e){this.timeout=e.timeout!==void 0?e.timeout:2e4,d(typeof window<
"u","MetaMaskTransport can be used in the browser only"),d(typeof window.ethereum<"u","No MetaMask p\
rovider found. Please install MetaMask browser extension before using MetaMaskSigner"),this.provider=
window.ethereum}async request(e){return this.provider.request(e)}connect(){this.provider.request({method:"\
eth_requestAccounts"})}closeConnection(){}}class V0{}class f0 extends D{constructor({shardId:e,...f}){
super(`Expected a valid shardId but got: ${e}`,{...f})}}class a0 extends D{constructor({max:e,min:f,
value:a,...s}){super(`Number "${a}" is not in safe integer range ${e?`(${f} to ${e})`:`(above ${f})`}`,
{...s})}}var s0=[{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"addr",type:"address"}],
name:"Deploy",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"addr",type:"\
address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Send",type:"event"},
{inputs:[{internalType:"bytes",name:"owner_pubkey",type:"bytes"},{internalType:"bytes32",name:"salt",
type:"bytes32"},{internalType:"uint256",name:"value",type:"uint256"}],name:"createWallet",outputs:[{
internalType:"address",name:"",type:"address"}],stateMutability:"nonpayable",type:"function"},{inputs:[
{internalType:"bytes",name:"message",type:"bytes"}],name:"send",outputs:[],stateMutability:"payable",
type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"bytes",name:"",
type:"bytes"}],name:"verifyExternal",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"\
view",type:"function"},{inputs:[{internalType:"address payable",name:"addr",type:"address"},{internalType:"\
uint256",name:"value",type:"uint256"}],name:"withdrawTo",outputs:[],stateMutability:"nonpayable",type:"\
function"}];const n0=class C{constructor(e){this.client=e}async withdrawTo(e,f=1000000000000000000n,a){
const[s,n]=await Promise.all([a??this.client.getMessageCount(C.address,"latest"),this.client.chainId()]),
b=r.encodeFunctionData({abi:s0,functionName:"withdrawTo",args:[e.toLowerCase(),f]}),c=new A({isDeploy:!1,
to:o(C.address),chainId:n,seqno:s,data:o(b),authData:new Uint8Array(0)}),h=c.encode();return await this.
client.sendRawMessage(r.bytesToHex(h)),c.hash()}async withdrawToWithRetry(e,f=1000000000000000000n,a=5){
let s=0;for(;s++<a;)try{const[n,b]=await Promise.all([this.client.getMessageCount(C.address,"latest"),
this.client.chainId()]),c=r.encodeFunctionData({abi:s0,functionName:"withdrawTo",args:[e.toLowerCase(),
f]}),h=new A({isDeploy:!1,to:o(C.address),chainId:b,seqno:n,data:o(c),authData:new Uint8Array(0)}),w=h.
encode();await this.client.sendRawMessage(r.bytesToHex(w));const p=r.bytesToHex(h.hash()),u=await Promise.
race([new Promise(i=>setTimeout(()=>i([]),1e4)),t0(this.client,W(C.address),p)]);if(u.length===0||u.
some(i=>!i.success))continue;return p}catch(n){if(await new Promise(b=>setTimeout(b,1e3)),s>=a)throw n}
throw new Error("Failed to withdraw to the given address")}};n0.address="0x0001000000000000000000000\
00000000FA00CE7";let z0=n0;const G0="0x6080604052604051620024393803806200243983398181016040528101906\
20000299190620001c7565b80600290816200003a91906200044d565b505062000531565b5f604051905090565b5f80fd5b5\
f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000\
0000000000000000000005f52604160045260245ffd5b620000a3826200005b565b810181811067ffffffffffffffff82111\
715620000c557620000c46200006b565b5b80604052505050565b5f620000d962000042565b9050620000e78282620000985\
65b919050565b5f67ffffffffffffffff8211156200010957620001086200006b565b5b62000114826200005b565b9050602\
081019050919050565b5f5b838110156200014057808201518184015260208101905062000123565b5f84840152505050505\
65b5f620001616200015b84620000ec565b620000ce565b90508281526020810184848401111562000180576200017f62000\
057565b5b6200018d84828562000121565b509392505050565b5f82601f830112620001ac57620001ab62000053565b5b815\
1620001be8482602086016200014b565b91505092915050565b5f60208284031215620001df57620001de6200004b565b5b5\
f82015167ffffffffffffffff811115620001ff57620001fe6200004f565b5b6200020d8482850162000195565b915050929\
15050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f526\
02260045260245ffd5b5f60028204905060018216806200026557607f821691505b6020821081036200027b576200027a620\
00220565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905\
092915050565b5f60088302620002df7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826\
20002a2565b620002eb8683620002a2565b95508019841693508086168417925050509392505050565b5f819050919050565\
b5f819050919050565b5f620003356200032f620003298462000303565b6200030c565b62000303565b9050919050565b5f8\
19050919050565b620003508362000315565b620003686200035f826200033c565b848454620002ae565b825550505050565\
b5f90565b6200037e62000370565b6200038b81848462000345565b505050565b5b81811015620003b257620003a65f82620\
00374565b60018101905062000391565b5050565b601f8211156200040157620003cb8162000281565b620003d6846200029\
3565b81016020851015620003e6578190505b620003fe620003f58562000293565b83018262000390565b50505b505050565\
b5f82821c905092915050565b5f620004235f198460080262000406565b1980831691505092915050565b5f6200043d83836\
2000412565b9150826002028217905092915050565b620004588262000216565b67ffffffffffffffff81111562000474576\
20004736200006b565b5b6200048082546200024d565b6200048d828285620003b6565b5f60209050601f831160018114620\
004c3575f8415620004ae578287015190505b620004ba858262000430565b86555062000529565b601f198416620004d3866\
2000281565b5f5b82811015620004fc57848901518255600182019150602085019450602081019050620004d5565b8683101\
56200051c578489015162000518601f89168262000412565b8355505b6001600288020188555050505b505050505050565b6\
11efa806200053f5f395ff3fe6080604052600436106100aa575f3560e01c8063b534638e11610063578063b534638e14610\
1bd578063cf387fed146101e5578063d064d7841461020f578063e2f5df8c14610239578063eed2063114610255578063f5b\
8214a1461027d576100b1565b80631072b91f146100b55780632bb1ae7c146100dd5780634f7d1d5814610105578063796d7\
f561461012d5780639785630814610169578063add29c6d14610193576100b1565b366100b157005b5f80fd5b3480156100c\
0575f80fd5b506100db60048036038101906100d69190610d59565b6102a5565b005b3480156100e8575f80fd5b506101036\
0048036038101906100fe9190610de5565b6102f9565b005b348015610110575f80fd5b5061012b600480360381019061012\
69190610fc2565b610392565b005b348015610138575f80fd5b50610153600480360381019061014e9190611042565b61048\
e565b60405161016091906110b9565b60405180910390f35b348015610174575f80fd5b5061017d61056e565b60405161018\
a91906110e1565b60405180910390f35b34801561019e575f80fd5b506101a7610585565b6040516101b491906110e1565b6\
0405180910390f35b3480156101c8575f80fd5b506101e360048036038101906101de91906110fa565b61058d565b005b348\
0156101f0575f80fd5b506101f96105e5565b60405161020691906110e1565b60405180910390f35b34801561021a575f80f\
d5b50610223610602565b60405161023091906111c4565b60405180910390f35b610253600480360381019061024e9190611\
239565b610692565b005b348015610260575f80fd5b5061027b60048036038101906102769190611322565b610696565b005\
b348015610288575f80fd5b506102a3600480360381019061029e91906114a4565b6106f1565b005b6102ad6107dd565b156\
102ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e490611\
600565b60405180910390fd5b6102f6816108e9565b50565b6103016107dd565b15610341576040517f08c379a0000000000\
00000000000000000000000000000000000000000000000815260040161033890611600565b60405180910390fd5b61038e5\
a83838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f1\
9601f820116905080830192505050505050506109c1565b5050565b61039a6107dd565b156103da576040517f08c379a0000\
0000000000000000000000000000000000000000000000000000081526004016103d190611600565b60405180910390fd5b5\
f8473ffffffffffffffffffffffffffffffffffffffff16838590846040516104039190611662565b5f60405180830381858\
888f193505050503d805f811461043e576040519150601f19603f3d011682016040523d82523d5f602084013e610443565b6\
06091505b5050905080610487576040517f08c379a0000000000000000000000000000000000000000000000000000000008\
15260040161047e906116c2565b60405180910390fd5b5050505050565b5f6105656002805461049f9061170d565b80601f0\
1602080910402602001604051908101604052809291908181526020018280546104cb9061170d565b80156105165780601f1\
06104ed57610100808354040283529160200191610516565b820191905f5260205f20905b815481529060010190602001808\
3116104f957829003601f168201915b50505050508585858080601f016020809104026020016040519081016040528093929\
1908181526020018383808284375f81840152601f19601f820116905080830192505050505050506109df565b90509392505\
050565b5f6105803061057b6105e5565b610ae5565b905090565b5f8054905090565b6105956107dd565b156105d55760405\
17f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cc90611600565b60405\
180910390fd5b6105e0838383610b6a565b505050565b5f3073ffffffffffffffffffffffffffffffffffffffff169050905\
65b6060600180546106119061170d565b80601f0160208091040260200160405190810160405280929190818152602001828\
05461063d9061170d565b80156106885780601f1061065f57610100808354040283529160200191610688565b820191905f5\
260205f20905b81548152906001019060200180831161066b57829003601f168201915b5050505050905090565b5050565b6\
1069e6107dd565b156106de576040517f08c379a000000000000000000000000000000000000000000000000000000000815\
26004016106d590611600565b60405180910390fd5b80600190816106ed91906118da565b5050565b6106f96107dd565b156\
10739576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073090611\
600565b60405180910390fd5b5f61078f8a8a8a8a60038b8a8c8b8b8080601f0160208091040260200160405190810160405\
280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050610c5e565b905\
0806107d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c89\
06119f3565b60405180910390fd5b50505050505050505050565b5f60605f8060ff73fffffffffffffffffffffffffffffff\
fffffffff16836040516108089190611662565b5f60405180830381855afa9150503d805f8114610840576040519150601f1\
9603f3d011682016040523d82523d5f602084013e610845565b606091505b50915091508161088a576040517f08c379a0000\
00000000000000000000000000000000000000000000000000000815260040161088190611a5b565b60405180910390fd5b5\
f8151116108cd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610\
8c490611ae9565b60405180910390fd5b808060200190518101906108e19190611b1b565b935050505090565b5f60d073fff\
fffffffffffffffffffffffffffffffffffff1663f4c261b5836040518263ffffffff1660e01b81526004016109249190611\
0e1565b6020604051808303815f875af1158015610940573d5f803e3d5ffd5b505050506040513d601f19601f82011682018\
0604052508101906109649190611b1b565b9050806109a6576040517f08c379a000000000000000000000000000000000000\
000000000000000000000815260040161099d90611b90565b60405180910390fd5b815f808282546109b69190611bdb565b9\
25050819055505050565b5f815190505f8082602085015f60fc88f16109da575f80fd5b505050565b5f80848484604051602\
0016109f693929190611c56565b60405160208183030381529060405290505f80606060fe73fffffffffffffffffffffffff\
fffffffffffffff1684604051610a319190611662565b5f60405180830381855afa9150503d805f8114610a6957604051915\
0601f19603f3d011682016040523d82523d5f602084013e610a6e565b606091505b50809250819450505082610ab75760405\
17f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aae90611a5b565b60405\
180910390fd5b5f81511115610ad75780806020019051810190610ad49190611b1b565b91505b81945050505050939250505\
0565b5f60d173ffffffffffffffffffffffffffffffffffffffff16633a1735fc83856040518363ffffffff1660e01b81526\
00401610b22929190611ca8565b6020604051808303815f875af1158015610b3e573d5f803e3d5ffd5b505050506040513d6\
01f19601f82011682018060405250810190610b629190611ce3565b905092915050565b5f600167ffffffffffffffff81111\
5610b8657610b85610e9e565b5b604051908082528060200260200182016040528015610bbf57816020015b610bac610cfd5\
65b815260200190600190039081610ba45790505b509050604051806040016040528084815260200183815250815f8151811\
0610bea57610be9611d0e565b5b60200260200101819052505f610c15855f805f805f808960405180602001604052805f815\
250610c5e565b905080610c57576040517f08c379a0000000000000000000000000000000000000000000000000000000008\
152600401610c4e906119f3565b60405180910390fd5b5050505050565b5f8060fd73fffffffffffffffffffffffffffffff\
fffffffff1663f1d1cf1c86888a8f8f8f8f8c8c6040518a63ffffffff1660e01b8152600401610ca99897969594939291906\
11e3a565b60206040518083038185885af1158015610cc5573d5f803e3d5ffd5b50505050506040513d601f19601f8201168\
2018060405250810190610cea9190611b1b565b9050809150509998505050505050505050565b60405180604001604052805\
f81526020015f81525090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b610d3881610d26565b81146\
10d42575f80fd5b50565b5f81359050610d5381610d2f565b92915050565b5f60208284031215610d6e57610d6d610d1e565\
b5b5f610d7b84828501610d45565b91505092915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f840112610da557610da\
4610d84565b5b8235905067ffffffffffffffff811115610dc257610dc1610d88565b5b60208301915083600182028301111\
5610dde57610ddd610d8c565b5b9250929050565b5f8060208385031215610dfb57610dfa610d1e565b5b5f83013567fffff\
fffffffffff811115610e1857610e17610d22565b5b610e2485828601610d90565b92509250509250929050565b5f73fffff\
fffffffffffffffffffffffffffffffffff82169050919050565b5f610e5982610e30565b9050919050565b610e6981610e4\
f565b8114610e73575f80fd5b50565b5f81359050610e8481610e60565b92915050565b5f80fd5b5f601f19601f830116905\
0919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5\
b610ed482610e8e565b810181811067ffffffffffffffff82111715610ef357610ef2610e9e565b5b80604052505050565b5\
f610f05610d15565b9050610f118282610ecb565b919050565b5f67ffffffffffffffff821115610f3057610f2f610e9e565\
b5b610f3982610e8e565b9050602081019050919050565b828183375f83830152505050565b5f610f66610f6184610f16565\
b610efc565b905082815260208101848484011115610f8257610f81610e8a565b5b610f8d848285610f46565b50939250505\
0565b5f82601f830112610fa957610fa8610d84565b5b8135610fb9848260208601610f54565b91505092915050565b5f805\
f8060808587031215610fda57610fd9610d1e565b5b5f610fe787828801610e76565b9450506020610ff887828801610d455\
65b935050604061100987828801610d45565b925050606085013567ffffffffffffffff81111561102a57611029610d22565\
b5b61103687828801610f95565b91505092959194509250565b5f805f6040848603121561105957611058610d1e565b5b5f6\
1106686828701610d45565b935050602084013567ffffffffffffffff81111561108757611086610d22565b5b61109386828\
701610d90565b92509250509250925092565b5f8115159050919050565b6110b38161109f565b82525050565b5f602082019\
0506110cc5f8301846110aa565b92915050565b6110db81610d26565b82525050565b5f6020820190506110f45f830184611\
0d2565b92915050565b5f805f6060848603121561111157611110610d1e565b5b5f61111e86828701610e76565b935050602\
061112f86828701610d45565b925050604061114086828701610d45565b9150509250925092565b5f81519050919050565b5\
f82825260208201905092915050565b5f5b83811015611181578082015181840152602081019050611166565b5f848401525\
0505050565b5f6111968261114a565b6111a08185611154565b93506111b0818560208601611164565b6111b981610e8e565\
b840191505092915050565b5f6020820190508181035f8301526111dc818461118c565b905092915050565b5f8083601f840\
1126111f9576111f8610d84565b5b8235905067ffffffffffffffff81111561121657611215610d88565b5b6020830191508\
3600182028301111561123257611231610d8c565b5b9250929050565b5f806020838503121561124f5761124e610d1e565b5\
b5f83013567ffffffffffffffff81111561126c5761126b610d22565b5b611278858286016111e4565b92509250509250929\
050565b5f67ffffffffffffffff82111561129e5761129d610e9e565b5b6112a782610e8e565b90506020810190509190505\
65b5f6112c66112c184611284565b610efc565b9050828152602081018484840111156112e2576112e1610e8a565b5b6112e\
d848285610f46565b509392505050565b5f82601f83011261130957611308610d84565b5b81356113198482602086016112b\
4565b91505092915050565b5f6020828403121561133757611336610d1e565b5b5f82013567ffffffffffffffff811115611\
35457611353610d22565b5b611360848285016112f5565b91505092915050565b6113728161109f565b811461137c575f80f\
d5b50565b5f8135905061138d81611369565b92915050565b5f67ffffffffffffffff8211156113ad576113ac610e9e565b5\
b602082029050602081019050919050565b5f80fd5b5f604082840312156113d7576113d66113be565b5b6113e16040610ef\
c565b90505f6113f084828501610d45565b5f83015250602061140384828501610d45565b60208301525092915050565b5f6\
1142161141c84611393565b610efc565b9050808382526020820190506040840283018581111561144457611443610d8c565\
b5b835b8181101561146d578061145988826113c2565b845260208401935050604081019050611446565b505050939250505\
0565b5f82601f83011261148b5761148a610d84565b5b813561149b84826020860161140f565b91505092915050565b5f805\
f805f805f805f6101008a8c0312156114c2576114c1610d1e565b5b5f6114cf8c828d01610e76565b99505060206114e08c8\
28d01610e76565b98505060406114f18c828d01610e76565b97505060606115028c828d01610d45565b96505060806115138\
c828d0161137f565b95505060a08a013567ffffffffffffffff81111561153457611533610d22565b5b6115408c828d01611\
477565b94505060c06115518c828d01610d45565b93505060e08a013567ffffffffffffffff81111561157257611571610d2\
2565b5b61157e8c828d01610d90565b92509250509295985092959850929598565b7f547279696e6720746f2063616c6c206\
5787465726e616c2066756e6374696f6e5f8201527f207769746820696e7465726e616c206d6573736167650000000000000\
0000000602082015250565b5f6115ea603683611154565b91506115f582611590565b604082019050919050565b5f6020820\
190508181035f830152611617816115de565b9050919050565b5f81519050919050565b5f81905092915050565b5f61163c8\
261161e565b6116468185611628565b9350611656818560208601611164565b80840191505092915050565b5f61166d82846\
11632565b915081905092915050565b7f43616c6c206661696c65640000000000000000000000000000000000000000005f8\
2015250565b5f6116ac600b83611154565b91506116b782611678565b602082019050919050565b5f6020820190508181035\
f8301526116d9816116a0565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000\
000005f52602260045260245ffd5b5f600282049050600182168061172457607f821691505b6020821081036117375761173\
66116e0565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b9\
05092915050565b5f600883026117997fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826\
1175e565b6117a3868361175e565b95508019841693508086168417925050509392505050565b5f819050919050565b5f611\
7de6117d96117d484610d26565b6117bb565b610d26565b9050919050565b5f819050919050565b6117f7836117c4565b611\
80b611803826117e5565b84845461176a565b825550505050565b5f90565b61181f611813565b61182a8184846117ee565b5\
05050565b5b8181101561184d576118425f82611817565b600181019050611830565b5050565b601f8211156118925761186\
38161173d565b61186c8461174f565b8101602085101561187b578190505b61188f6118878561174f565b83018261182f565\
b50505b505050565b5f82821c905092915050565b5f6118b25f1984600802611897565b1980831691505092915050565b5f6\
118ca83836118a3565b9150826002028217905092915050565b6118e38261114a565b67ffffffffffffffff8111156118fc5\
76118fb610e9e565b5b611906825461170d565b611911828285611851565b5f60209050601f831160018114611942575f841\
5611930578287015190505b61193a85826118bf565b8655506119a1565b601f1984166119508661173d565b5f5b828110156\
1197757848901518255600182019150602085019450602081019050611952565b868310156119945784890151611990601f8\
916826118a3565b8355505b6001600288020188555050505b505050505050565b7f6173796e6343616c6c206661696c65640\
00000000000000000000000000000005f82015250565b5f6119dd601083611154565b91506119e8826119a9565b602082019\
050919050565b5f6020820190508181035f830152611a0a816119d1565b9050919050565b7f507265636f6d70696c6564206\
36f6e74726163742063616c6c206661696c65645f82015250565b5f611a45602083611154565b9150611a5082611a11565b6\
02082019050919050565b5f6020820190508181035f830152611a7281611a39565b9050919050565b7f2749535f494e54455\
24e414c5f4d455353414745272072657475726e7320696e5f8201527f76616c6964206461746100000000000000000000000\
000000000000000000000602082015250565b5f611ad3602a83611154565b9150611ade82611a79565b60408201905091905\
0565b5f6020820190508181035f830152611b0081611ac7565b9050919050565b5f81519050611b1581611369565b9291505\
0565b5f60208284031215611b3057611b2f610d1e565b5b5f611b3d84828501611b07565b91505092915050565b7f4d696e7\
4206661696c65640000000000000000000000000000000000000000005f82015250565b5f611b7a600b83611154565b91506\
11b8582611b46565b602082019050919050565b5f6020820190508181035f830152611ba781611b6e565b9050919050565b7\
f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611be5826\
10d26565b9150611bf083610d26565b9250828201905080821115611c0857611c07611bae565b5b92915050565b5f8282526\
0208201905092915050565b5f611c288261161e565b611c328185611c0e565b9350611c42818560208601611164565b611c4\
b81610e8e565b840191505092915050565b5f6060820190508181035f830152611c6e8186611c1e565b9050611c7d6020830\
1856110d2565b8181036040830152611c8f8184611c1e565b9050949350505050565b611ca281610e4f565b82525050565b5\
f604082019050611cbb5f8301856110d2565b611cc86020830184611c99565b9392505050565b5f81519050611cdd81610d2\
f565b92915050565b5f60208284031215611cf857611cf7610d1e565b5b5f611d0584828501611ccf565b915050929150505\
65b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60ff8\
2169050919050565b611d5081611d3b565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5\
f819050602082019050919050565b611d8881610d26565b82525050565b604082015f820151611da25f850182611d7f565b5\
06020820151611db56020850182611d7f565b50505050565b5f611dc68383611d8e565b60408301905092915050565b5f602\
082019050919050565b5f611de882611d56565b611df28185611d60565b9350611dfd83611d70565b805f5b83811015611e2\
d578151611e148882611dbb565b9750611e1f83611dd2565b925050600181019050611e00565b50859350505050929150505\
65b5f61010082019050611e4e5f83018b6110aa565b611e5b602083018a611d47565b611e686040830189611c99565b611e7\
56060830188611c99565b611e826080830187611c99565b611e8f60a08301866110d2565b81810360c0830152611ea181856\
11dde565b905081810360e0830152611eb58184611c1e565b9050999850505050505050505056fea26469706673582212207\
cd47c16499d79e9466fcfbf198e677d73ef6ffde7003acb15e6ee45d9a4d20c64736f6c63430008150033";var M=[{inputs:[
{internalType:"bytes",name:"_pubkey",type:"bytes"}],stateMutability:"payable",type:"constructor"},{inputs:[
{internalType:"address",name:"dst",type:"address"},{internalType:"address",name:"refundTo",type:"add\
ress"},{internalType:"address",name:"bounceTo",type:"address"},{internalType:"uint256",name:"feeCred\
it",type:"uint256"},{internalType:"bool",name:"deploy",type:"bool"},{components:[{internalType:"uint\
256",name:"id",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"\
struct Nil.Token[]",name:"tokens",type:"tuple[]"},{internalType:"uint256",name:"value",type:"uint256"},
{internalType:"bytes",name:"callData",type:"bytes"}],name:"asyncCall",outputs:[],stateMutability:"no\
npayable",type:"function"},{inputs:[{internalType:"string",name:"err",type:"string"}],name:"bounce",
outputs:[],stateMutability:"payable",type:"function"},{inputs:[],name:"getCurrencyId",outputs:[{internalType:"\
uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getCurren\
cyName",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"functio\
n"},{inputs:[],name:"getCurrencyTotalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],
stateMutability:"view",type:"function"},{inputs:[],name:"getOwnCurrencyBalance",outputs:[{internalType:"\
uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"\
uint256",name:"amount",type:"uint256"}],name:"mintCurrency",outputs:[],stateMutability:"nonpayable",
type:"function"},{inputs:[{internalType:"bytes",name:"message",type:"bytes"}],name:"send",outputs:[],
stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"addre\
ss"},{internalType:"uint256",name:"currencyId",type:"uint256"},{internalType:"uint256",name:"amount",
type:"uint256"}],name:"sendCurrency",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[
{internalType:"string",name:"name",type:"string"}],name:"setCurrencyName",outputs:[],stateMutability:"\
nonpayable",type:"function"},{inputs:[{internalType:"address",name:"dst",type:"address"},{internalType:"\
uint256",name:"feeCredit",type:"uint256"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"\
bytes",name:"call_data",type:"bytes"}],name:"syncCall",outputs:[],stateMutability:"nonpayable",type:"\
function"},{inputs:[{internalType:"uint256",name:"hash",type:"uint256"},{internalType:"bytes",name:"\
signature",type:"bytes"}],name:"verifyExternal",outputs:[{internalType:"bool",name:"",type:"bool"}],
stateMutability:"view",type:"function"},{stateMutability:"payable",type:"receive"}];const j=class S{static calculateWalletAddress({
pubKey:e,shardId:f,salt:a}){const{address:s}=k({abi:M,bytecode:S.code,args:[r.bytesToHex(e)],salt:a,
shard:f});return s}constructor({pubkey:e,shardId:f,address:a,client:s,salt:n,signer:b}){this.pubkey=
$0(e),this.client=s,this.signer=b,d(!(n&&a),"You should use salt and shard for calculating address o\
r address itself, not both to avoid issue."),this.address=a?$(a):S.calculateWalletAddress({pubKey:this.
pubkey,shardId:f,salt:n}),n&&(this.salt=G(n)),this.shardId=W(x(this.address))}getAddressHex(){return r.
bytesToHex(this.address)}async selfDeploy(e=!0){d(typeof this.salt<"u","Salt is required for externa\
l deployment. Please provide salt for walelt");const[f,a]=await Promise.all([await this.client.getBalance(
this.getAddressHex(),"latest"),await this.client.getCode(this.getAddressHex(),"latest").catch(()=>Uint8Array.
from([]))]);d(a.length===0,"Contract already deployed"),d(f>0n,"Insufficient balance");const{data:s}=k(
{abi:M,bytecode:S.code,args:[r.bytesToHex(this.pubkey)],salt:this.salt,shard:this.shardId}),{hash:n}=await this.
requestToWallet({data:s,deploy:!0,seqno:0});if(e)for(;!((await this.client.getCode(this.getAddressHex(),
"latest")).length>0);)await new Promise(b=>setTimeout(b,1e3));return n}async checkDeploymentStatus(){
return(await this.client.getCode(this.getAddressHex(),"latest")).length>0}async requestToWallet(e,f=!0){
const[a,s]=await Promise.all([e.seqno??this.client.getMessageCount(this.getAddressHex(),"latest"),e.
chainId??this.client.chainId()]),n=await J({isDeploy:e.deploy,to:this.address,chainId:s,seqno:a,data:e.
data},this.signer);return f&&await this.client.sendRawMessage(n.raw),n}async sendMessage({to:e,refundTo:f,
bounceTo:a,data:s,abi:n,functionName:b,args:c,deploy:h,seqno:w,feeCredit:p,value:u,tokens:i,chainId:r0}){
const i0=r.bytesToHex($(e)),d0=r.bytesToHex($(f??this.address)),o0=r.bytesToHex($(a??this.address)),
c0=X({data:s,abi:n,functionName:b,args:c}),u0=r.encodeFunctionData({abi:M,functionName:"asyncCall",args:[
i0,d0,o0,p,!!h,i??[],u??0n,c0]}),{hash:l0}=await this.requestToWallet({data:o(u0),deploy:!1,seqno:w,
chainId:r0});return r.bytesToHex(l0)}async setCurrencyName(e){const f=r.encodeFunctionData({abi:M,functionName:"\
setCurrencyName",args:[e]}),{hash:a}=await this.requestToWallet({data:o(f),deploy:!1});return r.bytesToHex(
a)}async mintCurrency(e){const f=r.encodeFunctionData({abi:M,functionName:"mintCurrency",args:[e]}),
{hash:a}=await this.requestToWallet({data:o(f),deploy:!1});return r.bytesToHex(a)}async sendRawInternalMessage(e){
const{hash:f}=await this.requestToWallet({data:e,deploy:!1});return r.bytesToHex(f)}async deployContract({
shardId:e,bytecode:f,abi:a,args:s,salt:n,value:b,feeCredit:c,seqno:h,chainId:w}){let p;a&&s?p={shard:e,
bytecode:f,abi:a,args:s,salt:n}:(d(!(a||s),"ABI and args should be provided together or not provided\
 at all."),p={shard:e,bytecode:f,salt:n});const{data:u,address:i}=k(p);return{hash:await this.sendMessage(
{to:i,refundTo:this.getAddressHex(),data:u,value:b??0n,deploy:!0,feeCredit:c,seqno:h,chainId:w}),address:r.
bytesToHex(i)}}async syncSendMessage({to:e,data:f,abi:a,functionName:s,args:n,seqno:b,gas:c,value:h}){
const w=r.bytesToHex($(e)),p=X({data:f,abi:a,functionName:s,args:n}),u=r.encodeFunctionData({abi:M,functionName:"\
syncCall",args:[w,c,h,p]}),{hash:i}=await this.requestToWallet({data:o(u),deploy:!1,seqno:b});return r.
bytesToHex(i)}async getBalance(){return this.client.getBalance(this.getAddressHex(),"latest")}};j.code=
o(G0),j.abi=M;let X0=j;exports.BlockNotFoundError=_,exports.ExternalMessageEnvelope=A,exports.Faucet=
z0,exports.HttpTransport=j0,exports.ITransport=V0,exports.IntegerOutOfRangeError=a0,exports.InternalMessageEnvelope=
C0,exports.InvalidShardIdError=f0,exports.LocalECDSAKeySigner=R0,exports.MetaMaskSigner=F0,exports.MetaMaskTransport=
L0,exports.PublicClient=U0,exports.SszMessageSchema=O,exports.SszSignedMessageSchema=F,exports.WalletV1=
X0,exports.addHexPrefix=l,exports.assertIsAddress=k0,exports.assertIsBuffer=E0,exports.assertIsHexString=
D0,exports.assertIsValidBlock=S0,exports.assertIsValidDeployData=N0,exports.assertIsValidPrivateKey=
Q,exports.assertIsValidShardId=m,exports.bytesToHex=T,exports.bytesToString=x0,exports.calculateAddress=
z,exports.concatHex=m0,exports.convertEthToWei=W0,exports.externalDeploymentMessage=A0,exports.externalMessageEncode=
J,exports.generateRandomPrivateKey=O0,exports.getAddressFromPublicKey=e0,exports.getPublicKey=Z,exports.
getShardIdFromAddress=W,exports.hexToBigInt=q,exports.hexToBytes=o,exports.hexToNumber=E,exports.isAddress=
V,exports.isHexString=K,exports.isValidBlock=Y,exports.poseidonHash=I,exports.refineAddress=$,exports.
removeHexPrefix=B,exports.toHex=x,exports.waitTillCompleted=t0;
//# sourceMappingURL=niljs.cjs.map
