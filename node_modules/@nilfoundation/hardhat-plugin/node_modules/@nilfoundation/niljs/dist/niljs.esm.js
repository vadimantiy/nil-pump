/**!
 * @nilfoundation/niljs v0.13.0
 *
 * @copyright (c) 2024 =nil; Foundation.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
import*as v from"@iden3/js-crypto";import{setHasher as g0,hashObjectToUint8Array as V,uint8ArrayToHashObject as m0}from"@chainsafe/persistent-merkle-tree";
import{UintNumberType as H,UintBigintType as w0,BooleanType as T0,ByteVectorType as I0,ContainerType as j,
ByteListType as z}from"@chainsafe/ssz";import{concatBytes as E,numberToBytesBE as p,bytesToHex as v0,
hexToBytes as M0}from"@noble/curves/abstract/utils";import{encodeFunctionData as w,encodeDeployData as x0,
decodeFunctionResult as $0,bytesToHex as u}from"viem";import r from"tiny-invariant";import{secp256k1 as U}from"@noble/curves/secp256k1";
import{mnemonicToSeedSync as B0}from"@scure/bip39";import{HTTPTransport as C0,RequestManager as q0,Client as A0}from"@open-rpc/client-js";
let N=class d0 extends Error{constructor(e,{isOperational:f=!0,cause:a,docsPath:s}={}){super(),this.
name=this.constructor.name,this.isOperational=f,this.cause=a,this.docsPath=s,this.message=`${e??"An \
error occured"}
      Name: ${this.name}`,s&&(this.message=`${this.message}
      Docs: see \${this.docsPath}`),Object.setPrototypeOf(this,d0.prototype)}};const N0=/^[0-9a-fA-F]+$/,
K=t=>typeof t=="string"&&t.startsWith("0x")&&N0.test(M(t)),M=t=>t.startsWith("0x")?t.slice(2):t,l=t=>`\
0x${M(t)}`,S0=t=>l(t.reduce((e,f)=>e+f.replace("0x",""),""));const G=t=>{if(t>=48&&t<=57)return t-48;
if(t>=65&&t<=70)return t-55;if(t>=97&&t<=102)return t-87},S=t=>Number.parseInt(M(t),16),B=t=>BigInt(
l(t)),d=t=>{let e=t.slice(2);e.length%2&&(e=`0${e}`);const f=e.length/2,a=new Uint8Array(f);for(let s=0,
n=0;s<f;s++){const b=G(e.charCodeAt(n++)),o=G(e.charCodeAt(n++));if(b===void 0||o===void 0)throw new N(
`Invalid byte sequence ("${e[n-2]}${e[n-1]}" in "${e}").`);a[s]=b*16+o}return a};const k0=Array.from(
{length:256},(t,e)=>e.toString(16).padStart(2,"0")),D0=t=>{let e="";for(let f=0;f<t.length;f++)e+=t.
charCodeAt(f).toString(16);return l(e)},P0=t=>{let e="";for(let f=0;f<t.length;f++)e+=k0[t[f]];return l(
e)},H0=t=>{const e=BigInt(t),f=BigInt(Number.MAX_SAFE_INTEGER),a=0;if(typeof t!="bigint"&&(f&&e>f||e<
a))throw new b0({max:f,min:a,value:e});return l(e.toString(16))},x=t=>typeof t=="string"?D0(t):t instanceof
Uint8Array?P0(t):typeof t=="number"||typeof t=="bigint"?H0(t):l((t?1:0).toString(16));const E0=new TextDecoder(
"utf8"),U0=t=>E0.decode(t),T=t=>x(t);let R;"default"in v&&typeof v.default=="object"&&v.default!==null&&
"poseidon"in v.default&&typeof v.default.poseidon=="function"?R=v.default.poseidon:R=v.poseidon;const I=t=>R.
hashBytesX(t,16);g0({digest64(t,e){const f=I(E(t,e)),a=new Uint8Array(32);for(let s=0;s<32;s++)a[31-
s]=Number(f>>BigInt(s*8)&BigInt(255));return a},digest64HashObjects(t,e){const f=I(E(V(t),V(e))),a=new Uint8Array(
32);for(let s=0;s<32;s++)a[31-s]=Number(f>>BigInt(s*8)&BigInt(255));return m0(a)}});const k={Uint8:new H(
1),Uint32:new H(4),Uint64:new H(8),UintBn256:new w0(32),Bool:new T0},K0=new I0(20),W=new j({deploy:k.
Bool,feeCredit:k.UintBn256,to:K0,chainId:k.Uint64,seqno:k.Uint64,data:new z(24576)}),O=new j({...W.fields,
authData:new z(256)});const R0=/^0x[0-9a-fA-F]{40}$/,X=t=>typeof t=="string"&&R0.test(t),_=t=>typeof t==
"string"?Number.parseInt(t.slice(2,6),16):t[0]<<8|t[1],Y=(t,e,f)=>{if(!Number.isInteger(t))throw new Error(
"Shard ID must be an integer");if(f.length!==32)throw new Error("Salt must be 32 bytes");if(e.length===
0)throw new Error("Code must not be empty");if(t<0||t>65535)throw new Error("Invalid shard ID");const a=new Uint8Array(
e.length+32);a.set(e),a.set(f,e.length);const s=I(a),n=p(t,2),b=p(s,32);return new Uint8Array([...n,
...b.slice(14)])},C=t=>{if(typeof t=="string"){const e=d(t);if(e.length!==20)throw new Error("Invali\
d address length");return e}if(t.length!==20)throw new Error("Invalid address length");return t};const J=t=>typeof t==
"bigint"?d(l(t.toString(16).padStart(64,"0"))).slice(0,32):(r(t.length===32,"Salt must be 32 bytes"),
t),W0=t=>{const e=typeof t=="string"?d(t):t;return r(t.length===33,"Invalid pubkey length"),e},Q=({data:t,
abi:e,functionName:f,args:a})=>!t&&!e?"0x":(r(!(t&&e),"ABI and data cannot be provided together"),t?
typeof t=="string"?t:T(t):(r(e&&f,"ABI and functionName is required"),w({abi:e,functionName:f,args:a||
[]})));const D=t=>{const e=J(t.salt);let f;t.abi?f=d(x0({abi:t.abi,bytecode:typeof t.bytecode=="stri\
ng"?t.bytecode:T(t.bytecode),args:t.args||[]})):f=typeof t.bytecode=="string"?d(t.bytecode):t.bytecode;
const a=new Uint8Array([...f,...e]),s=Y(t.shard,f,e);return{data:a,address:s}};class A{constructor({
isDeploy:e,to:f,chainId:a,seqno:s,data:n,authData:b}){this.isDeploy=e,this.to=f,this.chainId=a,this.
seqno=s,this.data=n,this.authData=b}encode(){return O.serialize({feeCredit:50000000n,seqno:this.seqno,
chainId:this.chainId,to:this.to,data:this.data,deploy:this.isDeploy,authData:this.authData})}hash(){
const e=this.encode();return p(I(e),32)}signingHash(){const e=W.serialize({feeCredit:50000000n,seqno:this.
seqno,chainId:this.chainId,to:this.to,data:this.data,deploy:this.isDeploy});return p(I(e),32)}async encodeWithSignature(e){
const f=await this.sign(e),a=O.serialize({feeCredit:50000000n,seqno:this.seqno,chainId:this.chainId,
to:this.to,data:this.data,deploy:this.isDeploy,authData:f}),s=p(I(a),32);return{raw:a,hash:s}}async sign(e){
return e.sign(this.signingHash())}async updateAuthdata(e){return this.authData=await this.sign(e),this.
authData}hexAddress(){return T(this.to)}send(e){return e.sendRawMessage(this.encode())}}class O0{}const _0=(t,e)=>{
const{data:f,address:a}=D(t);return new A({isDeploy:!0,to:a,chainId:e,seqno:0,data:f,authData:new Uint8Array(
0)})},Z=async(t,e)=>await new A({...t,authData:new Uint8Array(0)}).encodeWithSignature(e);let F=class extends N{constructor({
blockNumberOrHash:e,...f}){super(`Block not found: ${e}`,{...f})}};const F0=0;const e0=t=>!0;const L0=(t,e)=>{
r(K(t),e??`Expected a hex string but got ${t}`)},V0=(t,e)=>{r(t instanceof Uint8Array,e??`Expected a\
 buffer but got ${t}`)},t0=(t,e)=>{r(K(t)&&t.length===32*2+2,e??`Expected a valid private key, but g\
ot ${t}`)},j0=(t,e)=>{const{seqno:f,pubkey:a,shardId:s}=t;f!==void 0&&r(f>=0,e??`Expected a valid 's\
eqno' but got ${f}`),a!==void 0&&r(typeof a=="string",e??`Expected a valid 'pubkey' but got ${a}`),g(
s)},z0=(t,e)=>{r(X(t),e??`Expected a valid address but got ${t}`)},G0=(t,e)=>{r(e0(),e??`Expected a \
valid block but got ${t}`)},g=t=>{if(!(typeof t=="number"&&Number.isInteger(t)&&t>=0&&t<65536&&t!==F0))
throw new n0({shardId:t})};let X0=class{constructor(e){this.transport=e.transport,this.shardId=e.shardId}async request(e){
return this.transport.request(e)}getShardId(){return this.shardId}setShardId(e){g(e),this.shardId=e}};
class Y0 extends X0{constructor(e){super(e)}async getBlockByHash(e,f=!1,a=this.shardId){g(a);try{return await this.
request({method:"eth_getBlockByHash",params:[a,e,f]})}catch(s){throw new F({blockNumberOrHash:e,cause:s})}}async getBlockByNumber(e,f=!1,a=this.
shardId){g(a);try{return await this.request({method:"eth_getBlockByNumber",params:[a,e,f]})}catch(s){
throw new F({blockNumberOrHash:e,cause:s})}}async getBlockMessageCountByNumber(e,f=this.shardId){return g(
f),await this.request({method:"eth_getBlockTransactionCountByNumber",params:[f,e]})}async getBlockMessageCountByHash(e,f=this.
shardId){return g(f),await this.request({method:"eth_getBlockTransactionCountByHash",params:[f,e]})}async getCode(e,f){
const a=await this.request({method:"eth_getCode",params:[e,f??"latest"]});return d(a)}async getMessageCount(e,f){
const a=await this.request({method:"eth_getTransactionCount",params:[e,f??"latest"]});return S(a)}async getBalance(e,f){
const a=await this.request({method:"eth_getBalance",params:[l(e),f??"latest"]});return B(a)}async getMessageByHash(e,f=this.
shardId){g(f);const a=await this.request({method:"eth_getInMessageByHash",params:[f,e]});return{...a,
value:BigInt(a.value),gasLimit:BigInt(a.gasLimit),gasUsed:B(a.gasUsed),seqno:B(a.seqno),index:a.index?
S(a.index):0}}async getMessageReceiptByHash(e,f=this.shardId){g(f);const a=n=>({...n,gasUsed:BigInt(
n.gasUsed),gasPrice:n.gasPrice?BigInt(n.gasPrice):0n,outputReceipts:n.outputReceipts?.map(b=>b===null?
null:a(b))??null}),s=await this.request({method:"eth_getInMessageReceipt",params:[f,l(typeof e=="str\
ing"?e:T(e))]});return s===null?null:a(s)}async sendRawMessage(e){return await this.request({method:"\
eth_sendRawTransaction",params:[typeof e=="string"?e:l(T(e))]})}async getGasPrice(e){const f=await this.
request({method:"eth_gasPrice",params:[e]});return B(f)}async estimateGasLimit(){return BigInt(1e6)}async chainId(){
const e=await this.request({method:"eth_chainId",params:[]});return S(e)}async getCurrencies(e,f){const a=await this.
request({method:"eth_getCurrencies",params:[e,f]}),s={};if(a)for(const[n,b]of Object.entries(a))s[n]=
B(b);return s}async call(e,f,a){let s;e.abi?s=w({abi:e.abi,functionName:e.functionName,args:e.args||
[]}):s=typeof e.data=="string"?e.data:l(T(e.data));const n=[{from:e.from||void 0,to:e.to,data:s,value:x(
e.value||0n),feeCredit:(e.feeCredit||5000000n).toString(10)},f];a&&n.push(a);const b=await this.request(
{method:"eth_call",params:n});if(e.abi){const o=$0({abi:e.abi,functionName:e.functionName,data:b.data});
return{...b,decodedData:o}}return b}}const J0=t=>l(x(B0(t).slice(0,32)));const f0=(t,e=!1)=>{const f=U.
getPublicKey(M(t),e);return l(v0(f))},a0=(t,e)=>{g(e);const f=M(t),a=typeof f=="string"?M0(f):f,s=I(
a),n=p(e,2),b=p(s,32);return x(new Uint8Array([...n,...b.slice(14)]))};let Q0=class{constructor(e){this.
publicKey=void 0,this.address=void 0;const{privateKey:f,mnemonic:a}=e;r(f||a,"Either privateKey or m\
nemonic must be provided.");const s=a?J0(a):l(f);t0(s),this.privateKey=s}async sign(e){const f=U.sign(
e,M(this.privateKey)),{r:a,s,recovery:n}=f;return E(p(a,32),p(s,32),p(n,1))}async getPublicKey(){if(this.
publicKey)return d(this.publicKey);const e=f0(this.privateKey,!0);return this.publicKey=e,d(this.publicKey)}async getAddress(e){
if(this.address)return d(this.address);const f=await this.getPublicKey();return this.address=a0(T(f),
e),d(this.address)}};const Z0=()=>x(U.utils.randomPrivateKey());let e5=class{constructor(){r(typeof window<
"u","MetaMaskSigner can be used in the browser only"),r(typeof window.ethereum<"u","No MetaMask prov\
ider found. Please install MetaMask browser extension before using MetaMaskSigner"),this.provider=window.
ethereum}async sign(e){return new Uint8Array(65)}async getAddress(){return new Uint8Array(20)}async getPublicKey(){
return new Uint8Array(33)}async connect(){await this.provider.request({method:"eth_requestAccounts"})}};
const s0=async(t,e,f,a)=>{const s=a?.interval||1e3,n=a?.waitTillMainShard||!0,b=[],o=[[e,f]];let y=0;
for(;y!==o.length;){const[m,h]=o[y],c=await t.getMessageReceiptByHash(h,m);if(!c){await new Promise(
i=>setTimeout(i,s));continue}if(c.outMessages!==null&&c.outputReceipts&&c.outputReceipts.filter(i=>i!==
null).length!==c.outMessages.length){await new Promise(i=>setTimeout(i,s));continue}if(n&&c.shardId!==
0&&!c.includedInMain){await new Promise(i=>setTimeout(i,s));continue}if(y++,b.push(c),c.outputReceipts)
for(const i of c.outputReceipts)i!==null&&o.push([i.shardId,i.messageHash])}return b};const t5=t=>BigInt(
t*1e18);const f5=t=>{const e=new C0(t),f=new q0([e]);return new A0(f)};let a5=class{constructor(e){this.
rpcClient=f5(e.endpoint),this.timeout=e.timeout!==void 0?e.timeout:2e4}async request(e){return this.
rpcClient.request(e,this.timeout)}connect(){}closeConnection(){this.rpcClient.close()}};class s5{constructor(e){
this.timeout=e.timeout!==void 0?e.timeout:2e4,r(typeof window<"u","MetaMaskTransport can be used in \
the browser only"),r(typeof window.ethereum<"u","No MetaMask provider found. Please install MetaMask\
 browser extension before using MetaMaskSigner"),this.provider=window.ethereum}async request(e){return this.
provider.request(e)}connect(){this.provider.request({method:"eth_requestAccounts"})}closeConnection(){}}
class n5{}class n0 extends N{constructor({shardId:e,...f}){super(`Expected a valid shardId but got: ${e}`,
{...f})}}class b0 extends N{constructor({max:e,min:f,value:a,...s}){super(`Number "${a}" is not in s\
afe integer range ${e?`(${f} to ${e})`:`(above ${f})`}`,{...s})}}var i0=[{anonymous:!1,inputs:[{indexed:!1,
internalType:"address",name:"addr",type:"address"}],name:"Deploy",type:"event"},{anonymous:!1,inputs:[
{indexed:!1,internalType:"address",name:"addr",type:"address"},{indexed:!1,internalType:"uint256",name:"\
value",type:"uint256"}],name:"Send",type:"event"},{inputs:[{internalType:"bytes",name:"owner_pubkey",
type:"bytes"},{internalType:"bytes32",name:"salt",type:"bytes32"},{internalType:"uint256",name:"valu\
e",type:"uint256"}],name:"createWallet",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"\
nonpayable",type:"function"},{inputs:[{internalType:"bytes",name:"message",type:"bytes"}],name:"send",
outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"\
uint256"},{internalType:"bytes",name:"",type:"bytes"}],name:"verifyExternal",outputs:[{internalType:"\
bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address \
payable",name:"addr",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"wit\
hdrawTo",outputs:[],stateMutability:"nonpayable",type:"function"}];const r0=class q{constructor(e){this.
client=e}async withdrawTo(e,f=1000000000000000000n,a){const[s,n]=await Promise.all([a??this.client.getMessageCount(
q.address,"latest"),this.client.chainId()]),b=w({abi:i0,functionName:"withdrawTo",args:[e.toLowerCase(),
f]}),o=new A({isDeploy:!1,to:d(q.address),chainId:n,seqno:s,data:d(b),authData:new Uint8Array(0)}),y=o.
encode();return await this.client.sendRawMessage(u(y)),o.hash()}async withdrawToWithRetry(e,f=1000000000000000000n,a=5){
let s=0;for(;s++<a;)try{const[n,b]=await Promise.all([this.client.getMessageCount(q.address,"latest"),
this.client.chainId()]),o=w({abi:i0,functionName:"withdrawTo",args:[e.toLowerCase(),f]}),y=new A({isDeploy:!1,
to:d(q.address),chainId:b,seqno:n,data:d(o),authData:new Uint8Array(0)}),m=y.encode();await this.client.
sendRawMessage(u(m));const h=u(y.hash()),c=await Promise.race([new Promise(i=>setTimeout(()=>i([]),1e4)),
s0(this.client,_(q.address),h)]);if(c.length===0||c.some(i=>!i.success))continue;return h}catch(n){if(await new Promise(
b=>setTimeout(b,1e3)),s>=a)throw n}throw new Error("Failed to withdraw to the given address")}};r0.address=
"0x000100000000000000000000000000000FA00CE7";let b5=r0;const i5="0x608060405260405162002439380380620\
024398339818101604052810190620000299190620001c7565b80600290816200003a91906200044d565b505062000531565\
b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b710000000\
00000000000000000000000000000000000000000000000005f52604160045260245ffd5b620000a3826200005b565b81018\
1811067ffffffffffffffff82111715620000c557620000c46200006b565b5b80604052505050565b5f620000d9620000425\
65b9050620000e7828262000098565b919050565b5f67ffffffffffffffff8211156200010957620001086200006b565b5b6\
2000114826200005b565b9050602081019050919050565b5f5b8381101562000140578082015181840152602081019050620\
00123565b5f8484015250505050565b5f620001616200015b84620000ec565b620000ce565b9050828152602081018484840\
1111562000180576200017f62000057565b5b6200018d84828562000121565b509392505050565b5f82601f830112620001a\
c57620001ab62000053565b5b8151620001be8482602086016200014b565b91505092915050565b5f6020828403121562000\
1df57620001de6200004b565b5b5f82015167ffffffffffffffff811115620001ff57620001fe6200004f565b5b6200020d8\
482850162000195565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000\
000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200026557607f821691505b60208\
21081036200027b576200027a62000220565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f830\
1049050919050565b5f82821b905092915050565b5f60088302620002df7ffffffffffffffffffffffffffffffffffffffff\
fffffffffffffffffffffffff82620002a2565b620002eb8683620002a2565b9550801984169350808616841792505050939\
2505050565b5f819050919050565b5f819050919050565b5f620003356200032f620003298462000303565b6200030c565b6\
2000303565b9050919050565b5f819050919050565b620003508362000315565b620003686200035f826200033c565b84845\
4620002ae565b825550505050565b5f90565b6200037e62000370565b6200038b81848462000345565b505050565b5b81811\
015620003b257620003a65f8262000374565b60018101905062000391565b5050565b601f8211156200040157620003cb816\
2000281565b620003d68462000293565b81016020851015620003e6578190505b620003fe620003f58562000293565b83018\
262000390565b50505b505050565b5f82821c905092915050565b5f620004235f198460080262000406565b1980831691505\
092915050565b5f6200043d838362000412565b9150826002028217905092915050565b620004588262000216565b67fffff\
fffffffffff8111156200047457620004736200006b565b5b6200048082546200024d565b6200048d828285620003b6565b5\
f60209050601f831160018114620004c3575f8415620004ae578287015190505b620004ba858262000430565b86555062000\
529565b601f198416620004d38662000281565b5f5b82811015620004fc57848901518255600182019150602085019450602\
081019050620004d5565b868310156200051c578489015162000518601f89168262000412565b8355505b600160028802018\
8555050505b505050505050565b611efa806200053f5f395ff3fe6080604052600436106100aa575f3560e01c8063b534638\
e11610063578063b534638e146101bd578063cf387fed146101e5578063d064d7841461020f578063e2f5df8c14610239578\
063eed2063114610255578063f5b8214a1461027d576100b1565b80631072b91f146100b55780632bb1ae7c146100dd57806\
34f7d1d5814610105578063796d7f561461012d5780639785630814610169578063add29c6d14610193576100b1565b36610\
0b157005b5f80fd5b3480156100c0575f80fd5b506100db60048036038101906100d69190610d59565b6102a5565b005b348\
0156100e8575f80fd5b5061010360048036038101906100fe9190610de5565b6102f9565b005b348015610110575f80fd5b5\
061012b60048036038101906101269190610fc2565b610392565b005b348015610138575f80fd5b506101536004803603810\
19061014e9190611042565b61048e565b60405161016091906110b9565b60405180910390f35b348015610174575f80fd5b5\
061017d61056e565b60405161018a91906110e1565b60405180910390f35b34801561019e575f80fd5b506101a7610585565\
b6040516101b491906110e1565b60405180910390f35b3480156101c8575f80fd5b506101e360048036038101906101de919\
06110fa565b61058d565b005b3480156101f0575f80fd5b506101f96105e5565b60405161020691906110e1565b604051809\
10390f35b34801561021a575f80fd5b50610223610602565b60405161023091906111c4565b60405180910390f35b6102536\
00480360381019061024e9190611239565b610692565b005b348015610260575f80fd5b5061027b600480360381019061027\
69190611322565b610696565b005b348015610288575f80fd5b506102a3600480360381019061029e91906114a4565b6106f\
1565b005b6102ad6107dd565b156102ed576040517f08c379a00000000000000000000000000000000000000000000000000\
000000081526004016102e490611600565b60405180910390fd5b6102f6816108e9565b50565b6103016107dd565b1561034\
1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610338906116005\
65b60405180910390fd5b61038e5a83838080601f01602080910402602001604051908101604052809392919081815260200\
18383808284375f81840152601f19601f820116905080830192505050505050506109c1565b5050565b61039a6107dd565b1\
56103da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d1906\
11600565b60405180910390fd5b5f8473ffffffffffffffffffffffffffffffffffffffff168385908460405161040391906\
11662565b5f60405180830381858888f193505050503d805f811461043e576040519150601f19603f3d011682016040523d8\
2523d5f602084013e610443565b606091505b5050905080610487576040517f08c379a000000000000000000000000000000\
000000000000000000000000000815260040161047e906116c2565b60405180910390fd5b5050505050565b5f61056560028\
05461049f9061170d565b80601f01602080910402602001604051908101604052809291908181526020018280546104cb906\
1170d565b80156105165780601f106104ed57610100808354040283529160200191610516565b820191905f5260205f20905\
b8154815290600101906020018083116104f957829003601f168201915b50505050508585858080601f01602080910402602\
00160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505\
05050506109df565b90509392505050565b5f6105803061057b6105e5565b610ae5565b905090565b5f8054905090565b610\
5956107dd565b156105d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526\
004016105cc90611600565b60405180910390fd5b6105e0838383610b6a565b505050565b5f3073fffffffffffffffffffff\
fffffffffffffffffff16905090565b6060600180546106119061170d565b80601f016020809104026020016040519081016\
040528092919081815260200182805461063d9061170d565b80156106885780601f1061065f5761010080835404028352916\
0200191610688565b820191905f5260205f20905b81548152906001019060200180831161066b57829003601f168201915b5\
050505050905090565b5050565b61069e6107dd565b156106de576040517f08c379a00000000000000000000000000000000\
000000000000000000000000081526004016106d590611600565b60405180910390fd5b80600190816106ed91906118da565\
b5050565b6106f96107dd565b15610739576040517f08c379a00000000000000000000000000000000000000000000000000\
0000000815260040161073090611600565b60405180910390fd5b5f61078f8a8a8a8a60038b8a8c8b8b8080601f016020809\
1040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019\
250505050505050610c5e565b9050806107d1576040517f08c379a0000000000000000000000000000000000000000000000\
0000000000081526004016107c8906119f3565b60405180910390fd5b50505050505050505050565b5f60605f8060ff73fff\
fffffffffffffffffffffffffffffffffffff16836040516108089190611662565b5f60405180830381855afa9150503d805\
f8114610840576040519150601f19603f3d011682016040523d82523d5f602084013e610845565b606091505b50915091508\
161088a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610881906\
11a5b565b60405180910390fd5b5f8151116108cd576040517f08c379a000000000000000000000000000000000000000000\
00000000000000081526004016108c490611ae9565b60405180910390fd5b808060200190518101906108e19190611b1b565\
b935050505090565b5f60d073ffffffffffffffffffffffffffffffffffffffff1663f4c261b5836040518263ffffffff166\
0e01b815260040161092491906110e1565b6020604051808303815f875af1158015610940573d5f803e3d5ffd5b505050506\
040513d601f19601f820116820180604052508101906109649190611b1b565b9050806109a6576040517f08c379a00000000\
0000000000000000000000000000000000000000000000000815260040161099d90611b90565b60405180910390fd5b815f8\
08282546109b69190611bdb565b925050819055505050565b5f815190505f8082602085015f60fc88f16109da575f80fd5b5\
05050565b5f808484846040516020016109f693929190611c56565b60405160208183030381529060405290505f80606060f\
e73ffffffffffffffffffffffffffffffffffffffff1684604051610a319190611662565b5f60405180830381855afa91505\
03d805f8114610a69576040519150601f19603f3d011682016040523d82523d5f602084013e610a6e565b606091505b50809\
250819450505082610ab7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526\
00401610aae90611a5b565b60405180910390fd5b5f81511115610ad75780806020019051810190610ad49190611b1b565b9\
1505b819450505050509392505050565b5f60d173ffffffffffffffffffffffffffffffffffffffff16633a1735fc8385604\
0518363ffffffff1660e01b8152600401610b22929190611ca8565b6020604051808303815f875af1158015610b3e573d5f8\
03e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b629190611ce3565b905092915050565b5\
f600167ffffffffffffffff811115610b8657610b85610e9e565b5b604051908082528060200260200182016040528015610\
bbf57816020015b610bac610cfd565b815260200190600190039081610ba45790505b5090506040518060400160405280848\
15260200183815250815f81518110610bea57610be9611d0e565b5b60200260200101819052505f610c15855f805f805f808\
960405180602001604052805f815250610c5e565b905080610c57576040517f08c379a000000000000000000000000000000\
0000000000000000000000000008152600401610c4e906119f3565b60405180910390fd5b5050505050565b5f8060fd73fff\
fffffffffffffffffffffffffffffffffffff1663f1d1cf1c86888a8f8f8f8f8c8c6040518a63ffffffff1660e01b8152600\
401610ca9989796959493929190611e3a565b60206040518083038185885af1158015610cc5573d5f803e3d5ffd5b5050505\
0506040513d601f19601f82011682018060405250810190610cea9190611b1b565b905080915050999850505050505050505\
0565b60405180604001604052805f81526020015f81525090565b5f604051905090565b5f80fd5b5f80fd5b5f81905091905\
0565b610d3881610d26565b8114610d42575f80fd5b50565b5f81359050610d5381610d2f565b92915050565b5f602082840\
31215610d6e57610d6d610d1e565b5b5f610d7b84828501610d45565b91505092915050565b5f80fd5b5f80fd5b5f80fd5b5\
f8083601f840112610da557610da4610d84565b5b8235905067ffffffffffffffff811115610dc257610dc1610d88565b5b6\
02083019150836001820283011115610dde57610ddd610d8c565b5b9250929050565b5f8060208385031215610dfb57610df\
a610d1e565b5b5f83013567ffffffffffffffff811115610e1857610e17610d22565b5b610e2485828601610d90565b92509\
250509250929050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610e5982610e30565\
b9050919050565b610e6981610e4f565b8114610e73575f80fd5b50565b5f81359050610e8481610e60565b92915050565b5\
f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000\
000005f52604160045260245ffd5b610ed482610e8e565b810181811067ffffffffffffffff82111715610ef357610ef2610\
e9e565b5b80604052505050565b5f610f05610d15565b9050610f118282610ecb565b919050565b5f67ffffffffffffffff8\
21115610f3057610f2f610e9e565b5b610f3982610e8e565b9050602081019050919050565b828183375f838301525050505\
65b5f610f66610f6184610f16565b610efc565b905082815260208101848484011115610f8257610f81610e8a565b5b610f8\
d848285610f46565b509392505050565b5f82601f830112610fa957610fa8610d84565b5b8135610fb9848260208601610f5\
4565b91505092915050565b5f805f8060808587031215610fda57610fd9610d1e565b5b5f610fe787828801610e76565b945\
0506020610ff887828801610d45565b935050604061100987828801610d45565b925050606085013567ffffffffffffffff8\
1111561102a57611029610d22565b5b61103687828801610f95565b91505092959194509250565b5f805f604084860312156\
1105957611058610d1e565b5b5f61106686828701610d45565b935050602084013567ffffffffffffffff811115611087576\
11086610d22565b5b61109386828701610d90565b92509250509250925092565b5f8115159050919050565b6110b38161109\
f565b82525050565b5f6020820190506110cc5f8301846110aa565b92915050565b6110db81610d26565b82525050565b5f6\
020820190506110f45f8301846110d2565b92915050565b5f805f6060848603121561111157611110610d1e565b5b5f61111\
e86828701610e76565b935050602061112f86828701610d45565b925050604061114086828701610d45565b9150509250925\
092565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561118157808201518184015260208\
1019050611166565b5f8484015250505050565b5f6111968261114a565b6111a08185611154565b93506111b081856020860\
1611164565b6111b981610e8e565b840191505092915050565b5f6020820190508181035f8301526111dc818461118c565b9\
05092915050565b5f8083601f8401126111f9576111f8610d84565b5b8235905067ffffffffffffffff81111561121657611\
215610d88565b5b60208301915083600182028301111561123257611231610d8c565b5b9250929050565b5f8060208385031\
21561124f5761124e610d1e565b5b5f83013567ffffffffffffffff81111561126c5761126b610d22565b5b6112788582860\
16111e4565b92509250509250929050565b5f67ffffffffffffffff82111561129e5761129d610e9e565b5b6112a782610e8\
e565b9050602081019050919050565b5f6112c66112c184611284565b610efc565b905082815260208101848484011115611\
2e2576112e1610e8a565b5b6112ed848285610f46565b509392505050565b5f82601f83011261130957611308610d84565b5\
b81356113198482602086016112b4565b91505092915050565b5f6020828403121561133757611336610d1e565b5b5f82013\
567ffffffffffffffff81111561135457611353610d22565b5b611360848285016112f5565b91505092915050565b6113728\
161109f565b811461137c575f80fd5b50565b5f8135905061138d81611369565b92915050565b5f67ffffffffffffffff821\
1156113ad576113ac610e9e565b5b602082029050602081019050919050565b5f80fd5b5f604082840312156113d7576113d\
66113be565b5b6113e16040610efc565b90505f6113f084828501610d45565b5f83015250602061140384828501610d45565\
b60208301525092915050565b5f61142161141c84611393565b610efc565b905080838252602082019050604084028301858\
1111561144457611443610d8c565b5b835b8181101561146d578061145988826113c2565b845260208401935050604081019\
050611446565b5050509392505050565b5f82601f83011261148b5761148a610d84565b5b813561149b84826020860161140\
f565b91505092915050565b5f805f805f805f805f6101008a8c0312156114c2576114c1610d1e565b5b5f6114cf8c828d016\
10e76565b99505060206114e08c828d01610e76565b98505060406114f18c828d01610e76565b97505060606115028c828d0\
1610d45565b96505060806115138c828d0161137f565b95505060a08a013567ffffffffffffffff811115611534576115336\
10d22565b5b6115408c828d01611477565b94505060c06115518c828d01610d45565b93505060e08a013567fffffffffffff\
fff81111561157257611571610d22565b5b61157e8c828d01610d90565b92509250509295985092959850929598565b7f547\
279696e6720746f2063616c6c2065787465726e616c2066756e6374696f6e5f8201527f207769746820696e7465726e616c2\
06d65737361676500000000000000000000602082015250565b5f6115ea603683611154565b91506115f582611590565b604\
082019050919050565b5f6020820190508181035f830152611617816115de565b9050919050565b5f81519050919050565b5\
f81905092915050565b5f61163c8261161e565b6116468185611628565b9350611656818560208601611164565b808401915\
05092915050565b5f61166d8284611632565b915081905092915050565b7f43616c6c206661696c656400000000000000000\
00000000000000000000000005f82015250565b5f6116ac600b83611154565b91506116b782611678565b602082019050919\
050565b5f6020820190508181035f8301526116d9816116a0565b9050919050565b7f4e487b7100000000000000000000000\
0000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061172457607f8216915\
05b602082108103611737576117366116e0565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8\
301049050919050565b5f82821b905092915050565b5f600883026117997ffffffffffffffffffffffffffffffffffffffff\
fffffffffffffffffffffffff8261175e565b6117a3868361175e565b9550801984169350808616841792505050939250505\
0565b5f819050919050565b5f6117de6117d96117d484610d26565b6117bb565b610d26565b9050919050565b5f819050919\
050565b6117f7836117c4565b61180b611803826117e5565b84845461176a565b825550505050565b5f90565b61181f61181\
3565b61182a8184846117ee565b505050565b5b8181101561184d576118425f82611817565b600181019050611830565b505\
0565b601f821115611892576118638161173d565b61186c8461174f565b8101602085101561187b578190505b61188f61188\
78561174f565b83018261182f565b50505b505050565b5f82821c905092915050565b5f6118b25f1984600802611897565b1\
980831691505092915050565b5f6118ca83836118a3565b9150826002028217905092915050565b6118e38261114a565b67f\
fffffffffffffff8111156118fc576118fb610e9e565b5b611906825461170d565b611911828285611851565b5f602090506\
01f831160018114611942575f8415611930578287015190505b61193a85826118bf565b8655506119a1565b601f198416611\
9508661173d565b5f5b8281101561197757848901518255600182019150602085019450602081019050611952565b8683101\
56119945784890151611990601f8916826118a3565b8355505b6001600288020188555050505b505050505050565b7f61737\
96e6343616c6c206661696c6564000000000000000000000000000000005f82015250565b5f6119dd601083611154565b915\
06119e8826119a9565b602082019050919050565b5f6020820190508181035f830152611a0a816119d1565b9050919050565\
b7f507265636f6d70696c656420636f6e74726163742063616c6c206661696c65645f82015250565b5f611a4560208361115\
4565b9150611a5082611a11565b602082019050919050565b5f6020820190508181035f830152611a7281611a39565b90509\
19050565b7f2749535f494e5445524e414c5f4d455353414745272072657475726e7320696e5f8201527f76616c696420646\
1746100000000000000000000000000000000000000000000602082015250565b5f611ad3602a83611154565b9150611ade8\
2611a79565b604082019050919050565b5f6020820190508181035f830152611b0081611ac7565b9050919050565b5f81519\
050611b1581611369565b92915050565b5f60208284031215611b3057611b2f610d1e565b5b5f611b3d84828501611b07565\
b91505092915050565b7f4d696e74206661696c65640000000000000000000000000000000000000000005f82015250565b5\
f611b7a600b83611154565b9150611b8582611b46565b602082019050919050565b5f6020820190508181035f830152611ba\
781611b6e565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601\
160045260245ffd5b5f611be582610d26565b9150611bf083610d26565b9250828201905080821115611c0857611c07611ba\
e565b5b92915050565b5f82825260208201905092915050565b5f611c288261161e565b611c328185611c0e565b9350611c4\
2818560208601611164565b611c4b81610e8e565b840191505092915050565b5f6060820190508181035f830152611c6e818\
6611c1e565b9050611c7d60208301856110d2565b8181036040830152611c8f8184611c1e565b9050949350505050565b611\
ca281610e4f565b82525050565b5f604082019050611cbb5f8301856110d2565b611cc86020830184611c99565b939250505\
0565b5f81519050611cdd81610d2f565b92915050565b5f60208284031215611cf857611cf7610d1e565b5b5f611d0584828\
501611ccf565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f5\
2603260045260245ffd5b5f60ff82169050919050565b611d5081611d3b565b82525050565b5f81519050919050565b5f828\
25260208201905092915050565b5f819050602082019050919050565b611d8881610d26565b82525050565b604082015f820\
151611da25f850182611d7f565b506020820151611db56020850182611d7f565b50505050565b5f611dc68383611d8e565b6\
0408301905092915050565b5f602082019050919050565b5f611de882611d56565b611df28185611d60565b9350611dfd836\
11d70565b805f5b83811015611e2d578151611e148882611dbb565b9750611e1f83611dd2565b925050600181019050611e0\
0565b5085935050505092915050565b5f61010082019050611e4e5f83018b6110aa565b611e5b602083018a611d47565b611\
e686040830189611c99565b611e756060830188611c99565b611e826080830187611c99565b611e8f60a08301866110d2565\
b81810360c0830152611ea18185611dde565b905081810360e0830152611eb58184611c1e565b90509998505050505050505\
05056fea26469706673582212207cd47c16499d79e9466fcfbf198e677d73ef6ffde7003acb15e6ee45d9a4d20c64736f6c6\
3430008150033";var $=[{inputs:[{internalType:"bytes",name:"_pubkey",type:"bytes"}],stateMutability:"\
payable",type:"constructor"},{inputs:[{internalType:"address",name:"dst",type:"address"},{internalType:"\
address",name:"refundTo",type:"address"},{internalType:"address",name:"bounceTo",type:"address"},{internalType:"\
uint256",name:"feeCredit",type:"uint256"},{internalType:"bool",name:"deploy",type:"bool"},{components:[
{internalType:"uint256",name:"id",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint25\
6"}],internalType:"struct Nil.Token[]",name:"tokens",type:"tuple[]"},{internalType:"uint256",name:"v\
alue",type:"uint256"},{internalType:"bytes",name:"callData",type:"bytes"}],name:"asyncCall",outputs:[],
stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"string",name:"err",type:"strin\
g"}],name:"bounce",outputs:[],stateMutability:"payable",type:"function"},{inputs:[],name:"getCurrenc\
yId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},
{inputs:[],name:"getCurrencyName",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"\
view",type:"function"},{inputs:[],name:"getCurrencyTotalSupply",outputs:[{internalType:"uint256",name:"",
type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getOwnCurrencyBalance",outputs:[
{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[
{internalType:"uint256",name:"amount",type:"uint256"}],name:"mintCurrency",outputs:[],stateMutability:"\
nonpayable",type:"function"},{inputs:[{internalType:"bytes",name:"message",type:"bytes"}],name:"send",
outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",
type:"address"},{internalType:"uint256",name:"currencyId",type:"uint256"},{internalType:"uint256",name:"\
amount",type:"uint256"}],name:"sendCurrency",outputs:[],stateMutability:"nonpayable",type:"function"},
{inputs:[{internalType:"string",name:"name",type:"string"}],name:"setCurrencyName",outputs:[],stateMutability:"\
nonpayable",type:"function"},{inputs:[{internalType:"address",name:"dst",type:"address"},{internalType:"\
uint256",name:"feeCredit",type:"uint256"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"\
bytes",name:"call_data",type:"bytes"}],name:"syncCall",outputs:[],stateMutability:"nonpayable",type:"\
function"},{inputs:[{internalType:"uint256",name:"hash",type:"uint256"},{internalType:"bytes",name:"\
signature",type:"bytes"}],name:"verifyExternal",outputs:[{internalType:"bool",name:"",type:"bool"}],
stateMutability:"view",type:"function"},{stateMutability:"payable",type:"receive"}];const L=class P{static calculateWalletAddress({
pubKey:e,shardId:f,salt:a}){const{address:s}=D({abi:$,bytecode:P.code,args:[u(e)],salt:a,shard:f});return s}constructor({
pubkey:e,shardId:f,address:a,client:s,salt:n,signer:b}){this.pubkey=W0(e),this.client=s,this.signer=
b,r(!(n&&a),"You should use salt and shard for calculating address or address itself, not both to av\
oid issue."),this.address=a?C(a):P.calculateWalletAddress({pubKey:this.pubkey,shardId:f,salt:n}),n&&
(this.salt=J(n)),this.shardId=_(x(this.address))}getAddressHex(){return u(this.address)}async selfDeploy(e=!0){
r(typeof this.salt<"u","Salt is required for external deployment. Please provide salt for walelt");const[
f,a]=await Promise.all([await this.client.getBalance(this.getAddressHex(),"latest"),await this.client.
getCode(this.getAddressHex(),"latest").catch(()=>Uint8Array.from([]))]);r(a.length===0,"Contract alr\
eady deployed"),r(f>0n,"Insufficient balance");const{data:s}=D({abi:$,bytecode:P.code,args:[u(this.pubkey)],
salt:this.salt,shard:this.shardId}),{hash:n}=await this.requestToWallet({data:s,deploy:!0,seqno:0});
if(e)for(;!((await this.client.getCode(this.getAddressHex(),"latest")).length>0);)await new Promise(
b=>setTimeout(b,1e3));return n}async checkDeploymentStatus(){return(await this.client.getCode(this.getAddressHex(),
"latest")).length>0}async requestToWallet(e,f=!0){const[a,s]=await Promise.all([e.seqno??this.client.
getMessageCount(this.getAddressHex(),"latest"),e.chainId??this.client.chainId()]),n=await Z({isDeploy:e.
deploy,to:this.address,chainId:s,seqno:a,data:e.data},this.signer);return f&&await this.client.sendRawMessage(
n.raw),n}async sendMessage({to:e,refundTo:f,bounceTo:a,data:s,abi:n,functionName:b,args:o,deploy:y,seqno:m,
feeCredit:h,value:c,tokens:i,chainId:o0}){const c0=u(C(e)),u0=u(C(f??this.address)),l0=u(C(a??this.address)),
y0=Q({data:s,abi:n,functionName:b,args:o}),h0=w({abi:$,functionName:"asyncCall",args:[c0,u0,l0,h,!!y,
i??[],c??0n,y0]}),{hash:p0}=await this.requestToWallet({data:d(h0),deploy:!1,seqno:m,chainId:o0});return u(
p0)}async setCurrencyName(e){const f=w({abi:$,functionName:"setCurrencyName",args:[e]}),{hash:a}=await this.
requestToWallet({data:d(f),deploy:!1});return u(a)}async mintCurrency(e){const f=w({abi:$,functionName:"\
mintCurrency",args:[e]}),{hash:a}=await this.requestToWallet({data:d(f),deploy:!1});return u(a)}async sendRawInternalMessage(e){
const{hash:f}=await this.requestToWallet({data:e,deploy:!1});return u(f)}async deployContract({shardId:e,
bytecode:f,abi:a,args:s,salt:n,value:b,feeCredit:o,seqno:y,chainId:m}){let h;a&&s?h={shard:e,bytecode:f,
abi:a,args:s,salt:n}:(r(!(a||s),"ABI and args should be provided together or not provided at all."),
h={shard:e,bytecode:f,salt:n});const{data:c,address:i}=D(h);return{hash:await this.sendMessage({to:i,
refundTo:this.getAddressHex(),data:c,value:b??0n,deploy:!0,feeCredit:o,seqno:y,chainId:m}),address:u(
i)}}async syncSendMessage({to:e,data:f,abi:a,functionName:s,args:n,seqno:b,gas:o,value:y}){const m=u(
C(e)),h=Q({data:f,abi:a,functionName:s,args:n}),c=w({abi:$,functionName:"syncCall",args:[m,o,y,h]}),
{hash:i}=await this.requestToWallet({data:d(c),deploy:!1,seqno:b});return u(i)}async getBalance(){return this.
client.getBalance(this.getAddressHex(),"latest")}};L.code=d(i5),L.abi=$;let r5=L;export{F as BlockNotFoundError,A as ExternalMessageEnvelope,b5 as Faucet,a5 as HttpTransport,n5 as ITransport,
b0 as IntegerOutOfRangeError,O0 as InternalMessageEnvelope,n0 as InvalidShardIdError,Q0 as LocalECDSAKeySigner,
e5 as MetaMaskSigner,s5 as MetaMaskTransport,Y0 as PublicClient,W as SszMessageSchema,O as SszSignedMessageSchema,
r5 as WalletV1,l as addHexPrefix,z0 as assertIsAddress,V0 as assertIsBuffer,L0 as assertIsHexString,
G0 as assertIsValidBlock,j0 as assertIsValidDeployData,t0 as assertIsValidPrivateKey,g as assertIsValidShardId,
T as bytesToHex,U0 as bytesToString,Y as calculateAddress,S0 as concatHex,t5 as convertEthToWei,_0 as externalDeploymentMessage,
Z as externalMessageEncode,Z0 as generateRandomPrivateKey,a0 as getAddressFromPublicKey,f0 as getPublicKey,
_ as getShardIdFromAddress,B as hexToBigInt,d as hexToBytes,S as hexToNumber,X as isAddress,K as isHexString,
e0 as isValidBlock,I as poseidonHash,C as refineAddress,M as removeHexPrefix,x as toHex,s0 as waitTillCompleted};
//# sourceMappingURL=niljs.esm.js.map
