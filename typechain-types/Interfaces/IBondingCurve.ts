/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IBondingCurveInterface extends Interface {
  getFunction(
    nameOrSignature: "calculateCurvedBurnReturn" | "calculateCurvedMintReturn"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CurvedBurn" | "CurvedMint"): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateCurvedBurnReturn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCurvedMintReturn",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateCurvedBurnReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCurvedMintReturn",
    data: BytesLike
  ): Result;
}

export namespace CurvedBurnEvent {
  export type InputTuple = [
    sender: AddressLike,
    amount: BigNumberish,
    reimbursement: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    amount: bigint,
    reimbursement: bigint
  ];
  export interface OutputObject {
    sender: string;
    amount: bigint;
    reimbursement: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CurvedMintEvent {
  export type InputTuple = [
    sender: AddressLike,
    amount: BigNumberish,
    deposit: BigNumberish
  ];
  export type OutputTuple = [sender: string, amount: bigint, deposit: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
    deposit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IBondingCurve extends BaseContract {
  connect(runner?: ContractRunner | null): IBondingCurve;
  waitForDeployment(): Promise<this>;

  interface: IBondingCurveInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateCurvedBurnReturn: TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    "view"
  >;

  calculateCurvedMintReturn: TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateCurvedBurnReturn"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateCurvedMintReturn"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;

  getEvent(
    key: "CurvedBurn"
  ): TypedContractEvent<
    CurvedBurnEvent.InputTuple,
    CurvedBurnEvent.OutputTuple,
    CurvedBurnEvent.OutputObject
  >;
  getEvent(
    key: "CurvedMint"
  ): TypedContractEvent<
    CurvedMintEvent.InputTuple,
    CurvedMintEvent.OutputTuple,
    CurvedMintEvent.OutputObject
  >;

  filters: {
    "CurvedBurn(address,uint256,uint256)": TypedContractEvent<
      CurvedBurnEvent.InputTuple,
      CurvedBurnEvent.OutputTuple,
      CurvedBurnEvent.OutputObject
    >;
    CurvedBurn: TypedContractEvent<
      CurvedBurnEvent.InputTuple,
      CurvedBurnEvent.OutputTuple,
      CurvedBurnEvent.OutputObject
    >;

    "CurvedMint(address,uint256,uint256)": TypedContractEvent<
      CurvedMintEvent.InputTuple,
      CurvedMintEvent.OutputTuple,
      CurvedMintEvent.OutputObject
    >;
    CurvedMint: TypedContractEvent<
      CurvedMintEvent.InputTuple,
      CurvedMintEvent.OutputTuple,
      CurvedMintEvent.OutputObject
    >;
  };
}
