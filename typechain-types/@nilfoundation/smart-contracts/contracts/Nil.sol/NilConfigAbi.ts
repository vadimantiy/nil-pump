/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace Nil {
  export type ValidatorInfoStruct = {
    PublicKey: BigNumberish[];
    WithdrawalAddress: AddressLike;
  };

  export type ValidatorInfoStructOutput = [
    PublicKey: bigint[],
    WithdrawalAddress: string
  ] & { PublicKey: bigint[]; WithdrawalAddress: string };

  export type ParamValidatorsStruct = { list: Nil.ValidatorInfoStruct[] };

  export type ParamValidatorsStructOutput = [
    list: Nil.ValidatorInfoStructOutput[]
  ] & { list: Nil.ValidatorInfoStructOutput[] };

  export type ParamGasPriceStruct = { gasPriceScale: BigNumberish };

  export type ParamGasPriceStructOutput = [gasPriceScale: bigint] & {
    gasPriceScale: bigint;
  };
}

export interface NilConfigAbiInterface extends Interface {
  getFunction(
    nameOrSignature: "curr_validators" | "gas_price"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "curr_validators",
    values: [Nil.ParamValidatorsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "gas_price",
    values: [Nil.ParamGasPriceStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "curr_validators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gas_price", data: BytesLike): Result;
}

export interface NilConfigAbi extends BaseContract {
  connect(runner?: ContractRunner | null): NilConfigAbi;
  waitForDeployment(): Promise<this>;

  interface: NilConfigAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  curr_validators: TypedContractMethod<
    [arg0: Nil.ParamValidatorsStruct],
    [void],
    "nonpayable"
  >;

  gas_price: TypedContractMethod<
    [arg0: Nil.ParamGasPriceStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "curr_validators"
  ): TypedContractMethod<
    [arg0: Nil.ParamValidatorsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gas_price"
  ): TypedContractMethod<[arg0: Nil.ParamGasPriceStruct], [void], "nonpayable">;

  filters: {};
}
