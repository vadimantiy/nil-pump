/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface NilInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ASYNC_REQUEST_MIN_GAS"
      | "FORWARD_NONE"
      | "FORWARD_PERCENTAGE"
      | "FORWARD_REMAINING"
      | "FORWARD_VALUE"
      | "IS_INTERNAL_MESSAGE"
      | "MANAGE_CURRENCY"
      | "VERIFY_SIGNATURE"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ASYNC_REQUEST_MIN_GAS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FORWARD_NONE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FORWARD_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FORWARD_REMAINING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FORWARD_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IS_INTERNAL_MESSAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGE_CURRENCY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFY_SIGNATURE",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ASYNC_REQUEST_MIN_GAS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FORWARD_NONE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FORWARD_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FORWARD_REMAINING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FORWARD_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IS_INTERNAL_MESSAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGE_CURRENCY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFY_SIGNATURE",
    data: BytesLike
  ): Result;
}

export interface Nil extends BaseContract {
  connect(runner?: ContractRunner | null): Nil;
  waitForDeployment(): Promise<this>;

  interface: NilInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ASYNC_REQUEST_MIN_GAS: TypedContractMethod<[], [bigint], "view">;

  FORWARD_NONE: TypedContractMethod<[], [bigint], "view">;

  FORWARD_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  FORWARD_REMAINING: TypedContractMethod<[], [bigint], "view">;

  FORWARD_VALUE: TypedContractMethod<[], [bigint], "view">;

  IS_INTERNAL_MESSAGE: TypedContractMethod<[], [string], "view">;

  MANAGE_CURRENCY: TypedContractMethod<[], [string], "view">;

  VERIFY_SIGNATURE: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ASYNC_REQUEST_MIN_GAS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FORWARD_NONE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FORWARD_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FORWARD_REMAINING"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FORWARD_VALUE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "IS_INTERNAL_MESSAGE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MANAGE_CURRENCY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERIFY_SIGNATURE"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
